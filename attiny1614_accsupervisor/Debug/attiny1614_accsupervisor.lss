
attiny1614_accsupervisor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803800  00000db6  00000e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00803806  00803806  00000e50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036be  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cbd  00000000  00000000  000046be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bef  00000000  00000000  0000637b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00006f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c1c  00000000  00000000  000072ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb3  00000000  00000000  00008ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00009b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_7>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  68:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_27>
  70:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  7c:	2c 03       	fmul	r18, r20
  7e:	e2 03       	fmuls	r22, r18
  80:	45 03       	mulsu	r20, r21
  82:	e2 03       	fmuls	r22, r18
  84:	e2 03       	fmuls	r22, r18
  86:	e2 03       	fmuls	r22, r18
  88:	e2 03       	fmuls	r22, r18
  8a:	e2 03       	fmuls	r22, r18
  8c:	5e 03       	fmul	r21, r22
  8e:	e2 03       	fmuls	r22, r18
  90:	77 03       	mulsu	r23, r23
  92:	e2 03       	fmuls	r22, r18
  94:	90 03       	fmuls	r17, r16
  96:	e2 03       	fmuls	r22, r18
  98:	e2 03       	fmuls	r22, r18
  9a:	e2 03       	fmuls	r22, r18
  9c:	b6 03       	fmuls	r19, r22
  9e:	e2 03       	fmuls	r22, r18
  a0:	cd 03       	fmulsu	r20, r21

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	df e3       	ldi	r29, 0x3F	; 63
  ac:	de bf       	out	0x3e, r29	; 62

000000ae <__do_copy_data>:
  ae:	18 e3       	ldi	r17, 0x38	; 56
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b8 e3       	ldi	r27, 0x38	; 56
  b4:	e6 eb       	ldi	r30, 0xB6	; 182
  b6:	fd e0       	ldi	r31, 0x0D	; 13
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a6 30       	cpi	r26, 0x06	; 6
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
  c4:	28 e3       	ldi	r18, 0x38	; 56
  c6:	a6 e0       	ldi	r26, 0x06	; 6
  c8:	b8 e3       	ldi	r27, 0x38	; 56
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a6 34       	cpi	r26, 0x46	; 70
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
  d8:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <__vector_7>:
}

int isAdcOn()
{
	return _gpio_status & GPIO_ADC_MASK;
}
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
 108:	0e 94 98 04 	call	0x930	; 0x930 <incTick>
 10c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 110:	88 23       	and	r24, r24
 112:	29 f0       	breq	.+10     	; 0x11e <__vector_7+0x3e>
 114:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_27>:
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
 156:	1f c0       	rjmp	.+62     	; 0x196 <__vector_27+0x56>
 158:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 15c:	81 fd       	sbrc	r24, 1
 15e:	1b c0       	rjmp	.+54     	; 0x196 <__vector_27+0x56>
 160:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 164:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 168:	9c 01       	movw	r18, r24
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	20 93 0f 38 	sts	0x380F, r18	; 0x80380f <uart0_rbuf_wpnt>
 172:	30 93 10 38 	sts	0x3810, r19	; 0x803810 <uart0_rbuf_wpnt+0x1>
 176:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 17a:	fc 01       	movw	r30, r24
 17c:	ef 5e       	subi	r30, 0xEF	; 239
 17e:	f7 4c       	sbci	r31, 0xC7	; 199
 180:	20 83       	st	Z, r18
 182:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 186:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 18a:	80 97       	sbiw	r24, 0x20	; 32
 18c:	20 f0       	brcs	.+8      	; 0x196 <__vector_27+0x56>
 18e:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <uart0_rbuf_wpnt>
 192:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <uart0_rbuf_wpnt+0x1>
 196:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 19a:	88 23       	and	r24, r24
 19c:	ec f2       	brlt	.-70     	; 0x158 <__vector_27+0x18>
 19e:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 1a2:	30 91 0e 38 	lds	r19, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1a6:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 1aa:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	99 f4       	brne	.+38     	; 0x1da <__vector_27+0x9a>
 1b4:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 1b8:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <uart0_rbuf_rpnt>
 1c2:	90 93 0e 38 	sts	0x380E, r25	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1c6:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 1ca:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1ce:	80 97       	sbiw	r24, 0x20	; 32
 1d0:	20 f0       	brcs	.+8      	; 0x1da <__vector_27+0x9a>
 1d2:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt>
 1d6:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <RTC_init>:
 1f0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
 1f4:	81 11       	cpse	r24, r1
 1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <RTC_init>
 1f8:	e0 e4       	ldi	r30, 0x40	; 64
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	87 83       	std	Z+7, r24	; 0x07
 200:	85 83       	std	Z+5, r24	; 0x05
 202:	82 8b       	std	Z+18, r24	; 0x12
 204:	89 e4       	ldi	r24, 0x49	; 73
 206:	80 8b       	std	Z+16, r24	; 0x10
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	08 95       	ret

0000020e <SLPCTRL_init>:
 20e:	e0 e5       	ldi	r30, 0x50	; 80
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	84 60       	ori	r24, 0x04	; 4
 216:	80 83       	st	Z, r24
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret

00000224 <GPIO_init>:
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f4 e0       	ldi	r31, 0x04	; 4
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
 22e:	e0 e2       	ldi	r30, 0x20	; 32
 230:	f4 e0       	ldi	r31, 0x04	; 4
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	08 95       	ret

0000023e <USART0_init>:
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	c0 91 24 11 	lds	r28, 0x1124	; 0x801124 <__TEXT_REGION_LENGTH__+0x701124>
 248:	e0 e0       	ldi	r30, 0x00	; 0
 24a:	f2 e0       	ldi	r31, 0x02	; 2
 24c:	21 81       	ldd	r18, Z+1	; 0x01
 24e:	2e 7f       	andi	r18, 0xFE	; 254
 250:	21 83       	std	Z+1, r18	; 0x01
 252:	e0 e2       	ldi	r30, 0x20	; 32
 254:	f4 e0       	ldi	r31, 0x04	; 4
 256:	20 81       	ld	r18, Z
 258:	27 7f       	andi	r18, 0xF7	; 247
 25a:	20 83       	st	Z, r18
 25c:	20 81       	ld	r18, Z
 25e:	24 60       	ori	r18, 0x04	; 4
 260:	20 83       	st	Z, r18
 262:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__floatunsisf>
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 e8       	ldi	r20, 0x80	; 128
 26c:	51 e4       	ldi	r21, 0x41	; 65
 26e:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	64 e5       	ldi	r22, 0x54	; 84
 278:	73 e7       	ldi	r23, 0x73	; 115
 27a:	8b e4       	ldi	r24, 0x4B	; 75
 27c:	9d e4       	ldi	r25, 0x4D	; 77
 27e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__divsf3>
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	5f e3       	ldi	r21, 0x3F	; 63
 28a:	0e 94 a2 04 	call	0x944	; 0x944 <__addsf3>
 28e:	0e 94 80 05 	call	0xb00	; 0xb00 <__fixsfsi>
 292:	9b 01       	movw	r18, r22
 294:	ac 01       	movw	r20, r24
 296:	ac 2f       	mov	r26, r28
 298:	cc 0f       	add	r28, r28
 29a:	bb 0b       	sbc	r27, r27
 29c:	bc 5f       	subi	r27, 0xFC	; 252
 29e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulshisi3>
 2a2:	8b 01       	movw	r16, r22
 2a4:	9c 01       	movw	r18, r24
 2a6:	99 23       	and	r25, r25
 2a8:	24 f4       	brge	.+8      	; 0x2b2 <USART0_init+0x74>
 2aa:	01 50       	subi	r16, 0x01	; 1
 2ac:	1c 4f       	sbci	r17, 0xFC	; 252
 2ae:	2f 4f       	sbci	r18, 0xFF	; 255
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	d9 01       	movw	r26, r18
 2b4:	c8 01       	movw	r24, r16
 2b6:	07 2e       	mov	r0, r23
 2b8:	7a e0       	ldi	r23, 0x0A	; 10
 2ba:	b5 95       	asr	r27
 2bc:	a7 95       	ror	r26
 2be:	97 95       	ror	r25
 2c0:	87 95       	ror	r24
 2c2:	7a 95       	dec	r23
 2c4:	d1 f7       	brne	.-12     	; 0x2ba <USART0_init+0x7c>
 2c6:	70 2d       	mov	r23, r0
 2c8:	e0 e0       	ldi	r30, 0x00	; 0
 2ca:	f8 e0       	ldi	r31, 0x08	; 8
 2cc:	80 87       	std	Z+8, r24	; 0x08
 2ce:	91 87       	std	Z+9, r25	; 0x09
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	85 83       	std	Z+5, r24	; 0x05
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	87 83       	std	Z+7, r24	; 0x07
 2d8:	13 86       	std	Z+11, r1	; 0x0b
 2da:	80 ec       	ldi	r24, 0xC0	; 192
 2dc:	86 83       	std	Z+6, r24	; 0x06
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <USART0_sendChar>:
 2ea:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 2ee:	95 ff       	sbrs	r25, 5
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <USART0_sendChar>
 2f2:	e0 e0       	ldi	r30, 0x00	; 0
 2f4:	f8 e0       	ldi	r31, 0x08	; 8
 2f6:	94 81       	ldd	r25, Z+4	; 0x04
 2f8:	90 64       	ori	r25, 0x40	; 64
 2fa:	94 83       	std	Z+4, r25	; 0x04
 2fc:	82 83       	std	Z+2, r24	; 0x02
 2fe:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 302:	86 ff       	sbrs	r24, 6
 304:	fc cf       	rjmp	.-8      	; 0x2fe <USART0_sendChar+0x14>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	08 95       	ret

0000030c <USART0_sendBuf>:
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	7c 01       	movw	r14, r24
 318:	16 2f       	mov	r17, r22
 31a:	c0 e0       	ldi	r28, 0x00	; 0
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	09 c0       	rjmp	.+18     	; 0x332 <USART0_sendBuf+0x26>
 320:	f7 01       	movw	r30, r14
 322:	ec 0f       	add	r30, r28
 324:	fd 1f       	adc	r31, r29
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART0_sendChar>
 330:	21 96       	adiw	r28, 0x01	; 1
 332:	81 2f       	mov	r24, r17
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	c8 17       	cp	r28, r24
 338:	d9 07       	cpc	r29, r25
 33a:	90 f3       	brcs	.-28     	; 0x320 <USART0_sendBuf+0x14>
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	08 95       	ret

00000348 <relayOn>:
 348:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 352:	e0 e2       	ldi	r30, 0x20	; 32
 354:	f4 e0       	ldi	r31, 0x04	; 4
 356:	85 81       	ldd	r24, Z+5	; 0x05
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	85 83       	std	Z+5, r24	; 0x05
 35c:	8a e0       	ldi	r24, 0x0A	; 10
 35e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 362:	08 95       	ret

00000364 <relayOff>:
 364:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 36e:	e0 e2       	ldi	r30, 0x20	; 32
 370:	f4 e0       	ldi	r31, 0x04	; 4
 372:	86 81       	ldd	r24, Z+6	; 0x06
 374:	82 60       	ori	r24, 0x02	; 2
 376:	86 83       	std	Z+6, r24	; 0x06
 378:	08 95       	ret

0000037a <adcOn>:
 37a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 384:	e0 e0       	ldi	r30, 0x00	; 0
 386:	f4 e0       	ldi	r31, 0x04	; 4
 388:	85 81       	ldd	r24, Z+5	; 0x05
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	85 83       	std	Z+5, r24	; 0x05
 38e:	08 95       	ret

00000390 <adcOff>:
 390:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 394:	8d 7f       	andi	r24, 0xFD	; 253
 396:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 39a:	e0 e0       	ldi	r30, 0x00	; 0
 39c:	f4 e0       	ldi	r31, 0x04	; 4
 39e:	86 81       	ldd	r24, Z+6	; 0x06
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	86 83       	std	Z+6, r24	; 0x06
 3a4:	08 95       	ret

000003a6 <isRelayOn>:
 3a6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 3aa:	81 70       	andi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	08 95       	ret

000003b0 <ADC_init>:

int ADC_init(void)
{
	// No inversion, no pull-up, no int., dig. buffer disable on PA1 and PA2.
	PORTA.PIN1CTRL &= ~PORT_ISC_gm;
 3b0:	e0 e0       	ldi	r30, 0x00	; 0
 3b2:	f4 e0       	ldi	r31, 0x04	; 4
 3b4:	81 89       	ldd	r24, Z+17	; 0x11
 3b6:	88 7f       	andi	r24, 0xF8	; 248
 3b8:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL &= ~PORT_ISC_gm;
 3ba:	82 89       	ldd	r24, Z+18	; 0x12
 3bc:	88 7f       	andi	r24, 0xF8	; 248
 3be:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3c0:	81 89       	ldd	r24, Z+17	; 0x11
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3c6:	82 89       	ldd	r24, Z+18	; 0x12
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	82 8b       	std	Z+18, r24	; 0x12
	
	// No run in standby, full 10-bit resolution, no freerun, enable.
	ADC0.CTRLA = (1 & ADC_ENABLE_bm);
 3cc:	e0 e0       	ldi	r30, 0x00	; 0
 3ce:	f6 e0       	ldi	r31, 0x06	; 6
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 83       	st	Z, r24
	// No accumulation. Max. value will be 0x3FF (max. of 10-bit)
	ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc;
 3d4:	11 82       	std	Z+1, r1	; 0x01
	// Big sample cap., VDD ref., DIV256 prescaler.
	// Ya, I know. It's an overkill. Better than going under.
	ADC0.CTRLC = ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV256_gc;
 3d6:	97 e1       	ldi	r25, 0x17	; 23
 3d8:	92 83       	std	Z+2, r25	; 0x02
	// 256clk startup delay, no auto sample delay, no delay between samples.
	ADC0.CTRLD = ADC_INITDLY_DLY256_gc;
 3da:	90 ea       	ldi	r25, 0xA0	; 160
 3dc:	93 83       	std	Z+3, r25	; 0x03
	// No window comp.
	ADC0.CTRLE = ADC_WINCM_NONE_gc;
 3de:	14 82       	std	Z+4, r1	; 0x04
	// 0 sample len.
	ADC0.SAMPCTRL = (0 & ADC_SAMPLEN_gm);
 3e0:	15 82       	std	Z+5, r1	; 0x05
	// Not using evt. control
	ADC0.EVCTRL = (0 & ADC_STARTEI_bm);
 3e2:	11 86       	std	Z+9, r1	; 0x09
	// Not using int. control
	ADC0.INTCTRL = (0 & ADC_WCMP_bm) | (0 & ADC_RESRDY_bm);
 3e4:	12 86       	std	Z+10, r1	; 0x0a
	// Clearing possible previous int. flags
	ADC0.INTFLAGS = (1 & ADC_WCMP_bm) | (1 & ADC_RESRDY_bm);
 3e6:	83 87       	std	Z+11, r24	; 0x0b
	// Halting the peripheral in debug halt
	ADC0.DBGCTRL = (0 & ADC_DBGRUN_bm);
 3e8:	14 86       	std	Z+12, r1	; 0x0c
	
	return 0;
}
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	08 95       	ret

000003f0 <doAdcThings>:

void doAdcThings()
{
	pending_sleep_flag |= PENDING_SLEEP_ADC;
 3f0:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
	if((ADC0.COMMAND & ADC_STCONV_bm) == 0)
 3fa:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 3fe:	80 fd       	sbrc	r24, 0
 400:	3a c0       	rjmp	.+116    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	{
		if(ADC0.INTFLAGS & ADC_RESRDY_bm)
 402:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
 406:	80 ff       	sbrs	r24, 0
 408:	27 c0       	rjmp	.+78     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		{
			// Something has been done from previous conversion.
			if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 40a:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 40e:	8f 71       	andi	r24, 0x1F	; 31
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	69 f4       	brne	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			{
				// VBAT
				vbat_volt = ADC0.RES;
 414:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 418:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 41c:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <vbat_volt>
 420:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <vbat_volt+0x1>
				adc_state |= 0x1;
 424:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc_state>
			}
			if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN2_gc)
 42e:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 432:	8f 71       	andi	r24, 0x1F	; 31
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	69 f4       	brne	.+26     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				// VACC
				vacc_volt = ADC0.RES;
 438:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 43c:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 440:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <vacc_volt>
 444:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <vacc_volt+0x1>
				adc_state |= 0x2;
 448:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc_state>
			}
			ADC0.INTFLAGS = (1 & ADC_RESRDY_bm);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
		}
		
		if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 458:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 45c:	8f 71       	andi	r24, 0x1F	; 31
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	21 f4       	brne	.+8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN2_gc;
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 468:	03 c0       	rjmp	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		}
		else
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
		}
		ADC0.COMMAND = (1 & ADC_STCONV_bm);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 476:	08 95       	ret

00000478 <doSwitchingThings>:
	}
}

void doSwitchingThings(void)
{
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
	if(vacc_volt >= vacc_threshold)
 480:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt>
 484:	10 91 09 38 	lds	r17, 0x3809	; 0x803809 <vacc_volt+0x1>
 488:	c0 91 01 38 	lds	r28, 0x3801	; 0x803801 <vacc_threshold>
 48c:	d0 91 02 38 	lds	r29, 0x3802	; 0x803802 <vacc_threshold+0x1>
 490:	0c 17       	cp	r16, r28
 492:	1d 07       	cpc	r17, r29
 494:	18 f0       	brcs	.+6      	; 0x49c <doSwitchingThings+0x24>
	{
		tx2_timeout = 30;
 496:	8e e1       	ldi	r24, 0x1E	; 30
 498:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
	}
	
	if(isRelayOn())
 49c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <isRelayOn>
 4a0:	89 2b       	or	r24, r25
 4a2:	d1 f0       	breq	.+52     	; 0x4d8 <doSwitchingThings+0x60>
	{
		if(vacc_volt < vacc_threshold || vbat_volt < vbat_threshold)
 4a4:	0c 17       	cp	r16, r28
 4a6:	1d 07       	cpc	r17, r29
 4a8:	58 f0       	brcs	.+22     	; 0x4c0 <doSwitchingThings+0x48>
 4aa:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 4ae:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <vbat_volt+0x1>
 4b2:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <vbat_threshold>
 4b6:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <vbat_threshold+0x1>
 4ba:	28 17       	cp	r18, r24
 4bc:	39 07       	cpc	r19, r25
 4be:	88 f4       	brcc	.+34     	; 0x4e2 <doSwitchingThings+0x6a>
		{
			if(tx2_timeout == 0)
 4c0:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 4c4:	81 11       	cpse	r24, r1
 4c6:	0d c0       	rjmp	.+26     	; 0x4e2 <doSwitchingThings+0x6a>
			{
				relayOff();
 4c8:	0e 94 b2 01 	call	0x364	; 0x364 <relayOff>
				pending_sleep_flag &= ~PENDING_SLEEP_UART;
 4cc:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 4d0:	8e 7f       	andi	r24, 0xFE	; 254
 4d2:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
 4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <doSwitchingThings+0x6a>
		}
	}
	else
	{
		// Relay is always on if the accessory power presents
		if(vacc_volt >= vacc_threshold) relayOn();
 4d8:	0c 17       	cp	r16, r28
 4da:	1d 07       	cpc	r17, r29
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <doSwitchingThings+0x6a>
 4de:	0e 94 a4 01 	call	0x348	; 0x348 <relayOn>
	}
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	08 95       	ret

000004ec <main>:
{
	//FILE USART_stream = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_WRITE);
	uint8_t oldTick = 255;
	uint8_t currentTick;
	
	cli();
 4ec:	f8 94       	cli
	RTC_init();
 4ee:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <RTC_init>
	SLPCTRL_init();
 4f2:	0e 94 07 01 	call	0x20e	; 0x20e <SLPCTRL_init>
	GPIO_init();
 4f6:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_init>
	USART0_init(115200);
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	72 ec       	ldi	r23, 0xC2	; 194
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_init>
	ADC_init();
 506:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC_init>
	sei();
 50a:	78 94       	sei
	// Protocol8086 parser in action
	//stdout = &USART_stream;
	parserInit();
 50c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <parserInit>
	setParseDoneCallback(NULL);
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 00 04 	call	0x800	; 0x800 <setParseDoneCallback>
	setUartSendFunc(USART0_sendBuf);
 518:	86 e8       	ldi	r24, 0x86	; 134
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 05 04 	call	0x80a	; 0x80a <setUartSendFunc>
	
	pending_sleep_flag = 0 & PENDING_SLEEP_MASK;
 520:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
	adcOn();
 524:	0e 94 bd 01 	call	0x37a	; 0x37a <adcOn>
}

int main(void)
{
	//FILE USART_stream = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_WRITE);
	uint8_t oldTick = 255;
 528:	df ef       	ldi	r29, 0xFF	; 255
	adcOn();

	// Static scheduling loop
    while (1)
    {
		currentTick = getCurrentTick();
 52a:	0e 94 9e 04 	call	0x93c	; 0x93c <getCurrentTick>
 52e:	c8 2f       	mov	r28, r24
		if(oldTick != currentTick)
 530:	d8 17       	cp	r29, r24
 532:	b9 f0       	breq	.+46     	; 0x562 <main+0x76>
		{
			oldTick = currentTick;
			if(isRelayOn())
 534:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <isRelayOn>
 538:	89 2b       	or	r24, r25
 53a:	91 f0       	breq	.+36     	; 0x560 <main+0x74>
			{
				sendCmd(CMD_HELLO, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 53c:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt>
 540:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <vacc_volt+0x1>
 544:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <vbat_volt>
 548:	60 91 0b 38 	lds	r22, 0x380B	; 0x80380b <vbat_volt+0x1>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 0a 04 	call	0x814	; 0x814 <sendCmd>
				pending_sleep_flag |= PENDING_SLEEP_UART;
 552:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 556:	81 60       	ori	r24, 0x01	; 1
 558:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
    while (1)
    {
		currentTick = getCurrentTick();
		if(oldTick != currentTick)
		{
			oldTick = currentTick;
 55c:	dc 2f       	mov	r29, r28
 55e:	01 c0       	rjmp	.+2      	; 0x562 <main+0x76>
 560:	dc 2f       	mov	r29, r28
				sendCmd(CMD_HELLO, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
				pending_sleep_flag |= PENDING_SLEEP_UART;
			}
		}
		
		doAdcThings();
 562:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <doAdcThings>
		if((adc_state & 0x3) == 0x3)
 566:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 56a:	83 70       	andi	r24, 0x03	; 3
 56c:	83 30       	cpi	r24, 0x03	; 3
 56e:	49 f4       	brne	.+18     	; 0x582 <main+0x96>
		{
			adc_state = 0;
 570:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <adc_state>
			doSwitchingThings();
 574:	0e 94 3c 02 	call	0x478	; 0x478 <doSwitchingThings>
			pending_sleep_flag &= ~PENDING_SLEEP_ADC;
 578:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 57c:	8d 7f       	andi	r24, 0xFD	; 253
 57e:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
		}

		if(uart0_rbuf_rpnt != uart0_rbuf_wpnt)
 582:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 586:	30 91 0e 38 	lds	r19, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 58a:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 58e:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 592:	28 17       	cp	r18, r24
 594:	39 07       	cpc	r19, r25
 596:	d9 f0       	breq	.+54     	; 0x5ce <main+0xe2>
		{
			parseData(uart0_rbuf[uart0_rbuf_rpnt++]);
 598:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 59c:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 5a0:	9c 01       	movw	r18, r24
 5a2:	2f 5f       	subi	r18, 0xFF	; 255
 5a4:	3f 4f       	sbci	r19, 0xFF	; 255
 5a6:	20 93 0d 38 	sts	0x380D, r18	; 0x80380d <uart0_rbuf_rpnt>
 5aa:	30 93 0e 38 	sts	0x380E, r19	; 0x80380e <uart0_rbuf_rpnt+0x1>
 5ae:	fc 01       	movw	r30, r24
 5b0:	ef 5e       	subi	r30, 0xEF	; 239
 5b2:	f7 4c       	sbci	r31, 0xC7	; 199
 5b4:	80 81       	ld	r24, Z
 5b6:	0e 94 34 04 	call	0x868	; 0x868 <parseData>
			if(uart0_rbuf_rpnt >= UART_BUFLEN) uart0_rbuf_rpnt = 0;
 5ba:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 5be:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 5c2:	80 97       	sbiw	r24, 0x20	; 32
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <main+0xe2>
 5c6:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt>
 5ca:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <uart0_rbuf_rpnt+0x1>
		}
		
		if((pending_sleep_flag & PENDING_SLEEP_MASK) == 0)
 5ce:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 5d2:	83 70       	andi	r24, 0x03	; 3
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <main+0xec>
 5d6:	a9 cf       	rjmp	.-174    	; 0x52a <main+0x3e>
		{
			adcOff();
 5d8:	0e 94 c8 01 	call	0x390	; 0x390 <adcOff>
			sleep_cpu();
 5dc:	88 95       	sleep
			adcOn();
 5de:	0e 94 bd 01 	call	0x37a	; 0x37a <adcOn>
 5e2:	a3 cf       	rjmp	.-186    	; 0x52a <main+0x3e>

000005e4 <_encapsulateData>:
static void (*uartSend)(uint8_t *buf, uint8_t szBuf) = NULL;

static int parserState = 0;

void _encapsulateData(uint8_t *buf8, uint8_t one, uint8_t two, uint8_t three, uint8_t four, uint8_t five)
{
 5e4:	ef 92       	push	r14
 5e6:	0f 93       	push	r16
 5e8:	fc 01       	movw	r30, r24
	buf8[0] = UART_STX;
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	80 83       	st	Z, r24
	buf8[1] = one;
 5ee:	61 83       	std	Z+1, r22	; 0x01
	buf8[2] = two;
 5f0:	42 83       	std	Z+2, r20	; 0x02
	buf8[3] = three;
 5f2:	23 83       	std	Z+3, r18	; 0x03
	buf8[4] = four;
 5f4:	04 83       	std	Z+4, r16	; 0x04
	buf8[5] = five;
 5f6:	e5 82       	std	Z+5, r14	; 0x05
	buf8[6] = one + two + three + four + five;
 5f8:	46 0f       	add	r20, r22
 5fa:	24 0f       	add	r18, r20
 5fc:	02 0f       	add	r16, r18
 5fe:	e0 0e       	add	r14, r16
 600:	e6 82       	std	Z+6, r14	; 0x06
	buf8[7] = UART_ETX;
 602:	86 e8       	ldi	r24, 0x86	; 134
 604:	87 83       	std	Z+7, r24	; 0x07
}
 606:	0f 91       	pop	r16
 608:	ef 90       	pop	r14
 60a:	08 95       	ret

0000060c <_parseDone>:

void _parseDone(uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
 60c:	ef 92       	push	r14
 60e:	0f 93       	push	r16
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
 618:	28 97       	sbiw	r28, 0x08	; 8
 61a:	cd bf       	out	0x3d, r28	; 61
 61c:	de bf       	out	0x3e, r29	; 62
	extern uint16_t vacc_volt;
	extern uint16_t vbat_threshold;
	extern uint16_t vacc_threshold;
	extern volatile uint8_t tx2_timeout;
	extern uint8_t pending_sleep_flag;
	uint8_t sendBuf[8] = {0,};
 61e:	de 01       	movw	r26, r28
 620:	11 96       	adiw	r26, 0x01	; 1
 622:	98 e0       	ldi	r25, 0x08	; 8
 624:	fd 01       	movw	r30, r26
 626:	11 92       	st	Z+, r1
 628:	9a 95       	dec	r25
 62a:	e9 f7       	brne	.-6      	; 0x626 <_parseDone+0x1a>

	if(parseDoneCallBack != NULL) parseDoneCallBack(data1, data2, data3, data4, data5);
 62c:	e0 91 42 38 	lds	r30, 0x3842	; 0x803842 <parseDoneCallBack>
 630:	f0 91 43 38 	lds	r31, 0x3843	; 0x803843 <parseDoneCallBack+0x1>
 634:	30 97       	sbiw	r30, 0x00	; 0
 636:	11 f0       	breq	.+4      	; 0x63c <_parseDone+0x30>
 638:	09 95       	icall
 63a:	d3 c0       	rjmp	.+422    	; 0x7e2 <_parseDone+0x1d6>
	else
	{
		/* Default Command Behaviour Parser */
#if _ROLE == PWR_MONITOR
		tx2_timeout = 30;
 63c:	9e e1       	ldi	r25, 0x1E	; 30
 63e:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
		switch(data1)
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	fc 01       	movw	r30, r24
 646:	31 97       	sbiw	r30, 0x01	; 1
 648:	e3 31       	cpi	r30, 0x13	; 19
 64a:	f1 05       	cpc	r31, r1
 64c:	08 f0       	brcs	.+2      	; 0x650 <_parseDone+0x44>
 64e:	ba c0       	rjmp	.+372    	; 0x7c4 <_parseDone+0x1b8>
 650:	e2 5c       	subi	r30, 0xC2	; 194
 652:	ff 4f       	sbci	r31, 0xFF	; 255
 654:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__tablejump2__>
		{
		case CMD_HELLO:
			_encapsulateData(sendBuf, CMD_HELLO2, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 658:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 65c:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 660:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 664:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 668:	62 e0       	ldi	r22, 0x02	; 2
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 672:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 676:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 67a:	30 97       	sbiw	r30, 0x00	; 0
 67c:	09 f4       	brne	.+2      	; 0x680 <_parseDone+0x74>
 67e:	a2 c0       	rjmp	.+324    	; 0x7c4 <_parseDone+0x1b8>
 680:	68 e0       	ldi	r22, 0x08	; 8
 682:	ce 01       	movw	r24, r28
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	09 95       	icall
 688:	9d c0       	rjmp	.+314    	; 0x7c4 <_parseDone+0x1b8>
			break;
		case CMD_HELLO2:
			break;
		case CMD_PING:
			_encapsulateData(sendBuf, CMD_PONG, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 68a:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 68e:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 692:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 696:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 69a:	64 e0       	ldi	r22, 0x04	; 4
 69c:	ce 01       	movw	r24, r28
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 6a4:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 6a8:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 6ac:	30 97       	sbiw	r30, 0x00	; 0
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <_parseDone+0xa6>
 6b0:	89 c0       	rjmp	.+274    	; 0x7c4 <_parseDone+0x1b8>
 6b2:	68 e0       	ldi	r22, 0x08	; 8
 6b4:	ce 01       	movw	r24, r28
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	09 95       	icall
 6ba:	84 c0       	rjmp	.+264    	; 0x7c4 <_parseDone+0x1b8>
		case CMD_HALT:
			break;
		case CMD_HTOK:
			break;
		case CMD_STAT:
			_encapsulateData(sendBuf, CMD_STAT_RSP, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 6bc:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 6c0:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 6c4:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 6c8:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 6cc:	6a e0       	ldi	r22, 0x0A	; 10
 6ce:	ce 01       	movw	r24, r28
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 6d6:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 6da:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 6de:	30 97       	sbiw	r30, 0x00	; 0
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <_parseDone+0xd8>
 6e2:	70 c0       	rjmp	.+224    	; 0x7c4 <_parseDone+0x1b8>
 6e4:	68 e0       	ldi	r22, 0x08	; 8
 6e6:	ce 01       	movw	r24, r28
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	09 95       	icall
 6ec:	6b c0       	rjmp	.+214    	; 0x7c4 <_parseDone+0x1b8>
			break;
		case CMD_STAT_RSP:
			break;
		case CMD_GET_THRESH:
			_encapsulateData(sendBuf, CMD_GET_THRESH_RSP, (uint8_t)((vbat_threshold >> 8) & 0xFF), (uint8_t)(vbat_threshold & 0xFF), (uint8_t)((vacc_threshold >> 8) & 0xFF), (uint8_t)(vacc_threshold & 0xFF));
 6ee:	e0 90 01 38 	lds	r14, 0x3801	; 0x803801 <vacc_threshold>
 6f2:	00 91 02 38 	lds	r16, 0x3802	; 0x803802 <vacc_threshold+0x1>
 6f6:	20 91 03 38 	lds	r18, 0x3803	; 0x803803 <vbat_threshold>
 6fa:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <vbat_threshold+0x1>
 6fe:	6c e0       	ldi	r22, 0x0C	; 12
 700:	ce 01       	movw	r24, r28
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 708:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 70c:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 710:	30 97       	sbiw	r30, 0x00	; 0
 712:	09 f4       	brne	.+2      	; 0x716 <_parseDone+0x10a>
 714:	57 c0       	rjmp	.+174    	; 0x7c4 <_parseDone+0x1b8>
 716:	68 e0       	ldi	r22, 0x08	; 8
 718:	ce 01       	movw	r24, r28
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	09 95       	icall
 71e:	52 c0       	rjmp	.+164    	; 0x7c4 <_parseDone+0x1b8>
			break;
		case CMD_GET_THRESH_RSP:
			break;
		case CMD_SET_THRESH:
			vbat_threshold = ((uint16_t)data2) << 8;
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	76 2f       	mov	r23, r22
 724:	66 27       	eor	r22, r22
			vbat_threshold += data3;
 726:	64 0f       	add	r22, r20
 728:	71 1d       	adc	r23, r1
 72a:	60 93 03 38 	sts	0x3803, r22	; 0x803803 <vbat_threshold>
 72e:	70 93 04 38 	sts	0x3804, r23	; 0x803804 <vbat_threshold+0x1>
			vacc_threshold = ((uint16_t)data4) << 8;
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	32 2f       	mov	r19, r18
 736:	22 27       	eor	r18, r18
			vacc_threshold += data5;
 738:	20 0f       	add	r18, r16
 73a:	31 1d       	adc	r19, r1
 73c:	20 93 01 38 	sts	0x3801, r18	; 0x803801 <vacc_threshold>
 740:	30 93 02 38 	sts	0x3802, r19	; 0x803802 <vacc_threshold+0x1>
			_encapsulateData(sendBuf, CMD_SET_THRESH_RSP, (uint8_t)((vbat_threshold >> 8) & 0xFF), (uint8_t)(vbat_threshold & 0xFF), (uint8_t)((vacc_threshold >> 8) & 0xFF), (uint8_t)(vacc_threshold & 0xFF));
 744:	e2 2e       	mov	r14, r18
 746:	03 2f       	mov	r16, r19
 748:	26 2f       	mov	r18, r22
 74a:	47 2f       	mov	r20, r23
 74c:	6e e0       	ldi	r22, 0x0E	; 14
 74e:	ce 01       	movw	r24, r28
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 756:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 75a:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	89 f1       	breq	.+98     	; 0x7c4 <_parseDone+0x1b8>
 762:	68 e0       	ldi	r22, 0x08	; 8
 764:	ce 01       	movw	r24, r28
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	09 95       	icall
 76a:	2c c0       	rjmp	.+88     	; 0x7c4 <_parseDone+0x1b8>
			break;
		case CMD_SET_THRESH_RSP:
			break;
		case CMD_DONT_SLEEP:
			_dont_sleep = 1;
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <_dont_sleep.1646>
			_encapsulateData(sendBuf, CMD_DONT_SLEEP_RSP, _dont_sleep, 0, 0, 0);
 772:	e1 2c       	mov	r14, r1
 774:	00 e0       	ldi	r16, 0x00	; 0
 776:	20 e0       	ldi	r18, 0x00	; 0
 778:	41 e0       	ldi	r20, 0x01	; 1
 77a:	62 e1       	ldi	r22, 0x12	; 18
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 784:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 788:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 78c:	30 97       	sbiw	r30, 0x00	; 0
 78e:	d1 f0       	breq	.+52     	; 0x7c4 <_parseDone+0x1b8>
 790:	68 e0       	ldi	r22, 0x08	; 8
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	09 95       	icall
 798:	15 c0       	rjmp	.+42     	; 0x7c4 <_parseDone+0x1b8>
			break;
		case CMD_DONT_SLEEP_RSP:
			break;
		case CMD_OKAY_SLEEP:
			_dont_sleep = 0;
 79a:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <_dont_sleep.1646>
			_encapsulateData(sendBuf, CMD_OKAY_SLEEP_RSP, _dont_sleep, 0, 0, 0);
 79e:	e1 2c       	mov	r14, r1
 7a0:	00 e0       	ldi	r16, 0x00	; 0
 7a2:	20 e0       	ldi	r18, 0x00	; 0
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	64 e1       	ldi	r22, 0x14	; 20
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 7b0:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 7b4:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 7b8:	30 97       	sbiw	r30, 0x00	; 0
 7ba:	21 f0       	breq	.+8      	; 0x7c4 <_parseDone+0x1b8>
 7bc:	68 e0       	ldi	r22, 0x08	; 8
 7be:	ce 01       	movw	r24, r28
 7c0:	01 96       	adiw	r24, 0x01	; 1
 7c2:	09 95       	icall
			break;
		default:
			break;
		}
		
		if(_dont_sleep)
 7c4:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <_dont_sleep.1646>
 7c8:	88 23       	and	r24, r24
 7ca:	31 f0       	breq	.+12     	; 0x7d8 <_parseDone+0x1cc>
		{
			pending_sleep_flag |= PENDING_SLEEP_UART;
 7cc:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 7d0:	81 60       	ori	r24, 0x01	; 1
 7d2:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <_parseDone+0x1d6>
		}
		else
		{
			pending_sleep_flag &= ~PENDING_SLEEP_UART;
 7d8:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 7dc:	8e 7f       	andi	r24, 0xFE	; 254
 7de:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
		}
#elif _ROLE == DVR_RECORDER
#else
#endif
	}
}
 7e2:	28 96       	adiw	r28, 0x08	; 8
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	0f 91       	pop	r16
 7ee:	ef 90       	pop	r14
 7f0:	08 95       	ret

000007f2 <parserInit>:


void parserInit()
{
	parserState = 1;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <parserState>
 7fa:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <parserState+0x1>
 7fe:	08 95       	ret

00000800 <setParseDoneCallback>:
}

void setParseDoneCallback(void (*func)(uint8_t, uint8_t, uint8_t, uint8_t, uint8_t))
{
	parseDoneCallBack = func;
 800:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <parseDoneCallBack>
 804:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <parseDoneCallBack+0x1>
 808:	08 95       	ret

0000080a <setUartSendFunc>:
}

void setUartSendFunc(void (*func)(uint8_t *, uint8_t))
{
	uartSend = func;
 80a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <uartSend>
 80e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <uartSend+0x1>
 812:	08 95       	ret

00000814 <sendCmd>:
}

void sendCmd(uint8_t cmd, uint8_t one, uint8_t two, uint8_t three, uint8_t four)
{
 814:	ef 92       	push	r14
 816:	0f 93       	push	r16
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	28 97       	sbiw	r28, 0x08	; 8
 822:	cd bf       	out	0x3d, r28	; 61
 824:	de bf       	out	0x3e, r29	; 62
	uint8_t sendBuf[8] = {0,};
 826:	fe 01       	movw	r30, r28
 828:	31 96       	adiw	r30, 0x01	; 1
 82a:	98 e0       	ldi	r25, 0x08	; 8
 82c:	df 01       	movw	r26, r30
 82e:	1d 92       	st	X+, r1
 830:	9a 95       	dec	r25
 832:	e9 f7       	brne	.-6      	; 0x82e <sendCmd+0x1a>
	_encapsulateData(sendBuf, cmd, one, two, three, four);
 834:	e0 2e       	mov	r14, r16
 836:	02 2f       	mov	r16, r18
 838:	24 2f       	mov	r18, r20
 83a:	46 2f       	mov	r20, r22
 83c:	68 2f       	mov	r22, r24
 83e:	cf 01       	movw	r24, r30
 840:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_encapsulateData>
	if(uartSend != NULL) uartSend(sendBuf, 8);
 844:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 848:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 84c:	30 97       	sbiw	r30, 0x00	; 0
 84e:	21 f0       	breq	.+8      	; 0x858 <sendCmd+0x44>
 850:	68 e0       	ldi	r22, 0x08	; 8
 852:	ce 01       	movw	r24, r28
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	09 95       	icall
}
 858:	28 96       	adiw	r28, 0x08	; 8
 85a:	cd bf       	out	0x3d, r28	; 61
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	0f 91       	pop	r16
 864:	ef 90       	pop	r14
 866:	08 95       	ret

00000868 <parseData>:

void parseData(uint8_t data)
{
 868:	0f 93       	push	r16
 86a:	1f 93       	push	r17
	static uint8_t databuf[8] = {0,};
	static uint32_t recvdcnt = 0;
	uint8_t tmpChksum = 0;

	if(parserState)
 86c:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <parserState>
 870:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <parserState+0x1>
 874:	23 2b       	or	r18, r19
 876:	09 f4       	brne	.+2      	; 0x87a <parseData+0x12>
 878:	58 c0       	rjmp	.+176    	; 0x92a <parseData+0xc2>
	{
		switch(uartState)
 87a:	90 91 44 38 	lds	r25, 0x3844	; 0x803844 <uartState>
 87e:	99 23       	and	r25, r25
 880:	19 f0       	breq	.+6      	; 0x888 <parseData+0x20>
 882:	91 30       	cpi	r25, 0x01	; 1
 884:	b1 f0       	breq	.+44     	; 0x8b2 <parseData+0x4a>
 886:	51 c0       	rjmp	.+162    	; 0x92a <parseData+0xc2>
		{
		case UART_STATE_IDLE:
			if(data == UART_STX)
 888:	80 38       	cpi	r24, 0x80	; 128
 88a:	09 f0       	breq	.+2      	; 0x88e <parseData+0x26>
 88c:	4e c0       	rjmp	.+156    	; 0x92a <parseData+0xc2>
			{
				recvdcnt = 0;
				uartState = UART_STATE_RECEIVING;
 88e:	91 e0       	ldi	r25, 0x01	; 1
 890:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <uartState>
				databuf[recvdcnt++] = data;
 894:	41 e0       	ldi	r20, 0x01	; 1
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	40 93 39 38 	sts	0x3839, r20	; 0x803839 <recvdcnt.1707>
 8a0:	50 93 3a 38 	sts	0x383A, r21	; 0x80383a <recvdcnt.1707+0x1>
 8a4:	60 93 3b 38 	sts	0x383B, r22	; 0x80383b <recvdcnt.1707+0x2>
 8a8:	70 93 3c 38 	sts	0x383C, r23	; 0x80383c <recvdcnt.1707+0x3>
 8ac:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <databuf.1706>
 8b0:	3c c0       	rjmp	.+120    	; 0x92a <parseData+0xc2>
			}
			break;
		case UART_STATE_RECEIVING:
			if(recvdcnt < 8)
 8b2:	40 91 39 38 	lds	r20, 0x3839	; 0x803839 <recvdcnt.1707>
 8b6:	50 91 3a 38 	lds	r21, 0x383A	; 0x80383a <recvdcnt.1707+0x1>
 8ba:	60 91 3b 38 	lds	r22, 0x383B	; 0x80383b <recvdcnt.1707+0x2>
 8be:	70 91 3c 38 	lds	r23, 0x383C	; 0x80383c <recvdcnt.1707+0x3>
 8c2:	48 30       	cpi	r20, 0x08	; 8
 8c4:	51 05       	cpc	r21, r1
 8c6:	61 05       	cpc	r22, r1
 8c8:	71 05       	cpc	r23, r1
 8ca:	68 f5       	brcc	.+90     	; 0x926 <parseData+0xbe>
			{
				databuf[recvdcnt++] = data;
 8cc:	8a 01       	movw	r16, r20
 8ce:	9b 01       	movw	r18, r22
 8d0:	0f 5f       	subi	r16, 0xFF	; 255
 8d2:	1f 4f       	sbci	r17, 0xFF	; 255
 8d4:	2f 4f       	sbci	r18, 0xFF	; 255
 8d6:	3f 4f       	sbci	r19, 0xFF	; 255
 8d8:	00 93 39 38 	sts	0x3839, r16	; 0x803839 <recvdcnt.1707>
 8dc:	10 93 3a 38 	sts	0x383A, r17	; 0x80383a <recvdcnt.1707+0x1>
 8e0:	20 93 3b 38 	sts	0x383B, r18	; 0x80383b <recvdcnt.1707+0x2>
 8e4:	30 93 3c 38 	sts	0x383C, r19	; 0x80383c <recvdcnt.1707+0x3>
 8e8:	fa 01       	movw	r30, r20
 8ea:	ef 5c       	subi	r30, 0xCF	; 207
 8ec:	f7 4c       	sbci	r31, 0xC7	; 199
 8ee:	80 83       	st	Z, r24
				if(recvdcnt == 8)
 8f0:	08 30       	cpi	r16, 0x08	; 8
 8f2:	11 05       	cpc	r17, r1
 8f4:	21 05       	cpc	r18, r1
 8f6:	31 05       	cpc	r19, r1
 8f8:	c1 f4       	brne	.+48     	; 0x92a <parseData+0xc2>
				{
					if(data == UART_ETX)
 8fa:	86 38       	cpi	r24, 0x86	; 134
 8fc:	89 f4       	brne	.+34     	; 0x920 <parseData+0xb8>
					{
						tmpChksum = databuf[1] + databuf[2] + databuf[3] + databuf[4] + databuf[5];
 8fe:	e1 e3       	ldi	r30, 0x31	; 49
 900:	f8 e3       	ldi	r31, 0x38	; 56
 902:	81 81       	ldd	r24, Z+1	; 0x01
 904:	62 81       	ldd	r22, Z+2	; 0x02
 906:	43 81       	ldd	r20, Z+3	; 0x03
 908:	24 81       	ldd	r18, Z+4	; 0x04
 90a:	05 81       	ldd	r16, Z+5	; 0x05
 90c:	98 2f       	mov	r25, r24
 90e:	96 0f       	add	r25, r22
 910:	94 0f       	add	r25, r20
 912:	92 0f       	add	r25, r18
 914:	90 0f       	add	r25, r16
						if(tmpChksum == databuf[6])
 916:	36 81       	ldd	r19, Z+6	; 0x06
 918:	93 13       	cpse	r25, r19
 91a:	02 c0       	rjmp	.+4      	; 0x920 <parseData+0xb8>
						{
							_parseDone(databuf[1], databuf[2], databuf[3], databuf[4], databuf[5]);
 91c:	0e 94 06 03 	call	0x60c	; 0x60c <_parseDone>
						}
					}
					//recvdcnt = 0;
					uartState = UART_STATE_IDLE;
 920:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <uartState>
 924:	02 c0       	rjmp	.+4      	; 0x92a <parseData+0xc2>
			}
			else
			{
				// Highly unlikely case
				//recvdcnt = 0;
				uartState = UART_STATE_IDLE;
 926:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <uartState>
			break;
		default:
			break;
		}
	}
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	08 95       	ret

00000930 <incTick>:

static uint8_t nowtick = 0;

inline void incTick(void)
{
	nowtick++;
 930:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <nowtick>
 934:	8f 5f       	subi	r24, 0xFF	; 255
 936:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <nowtick>
 93a:	08 95       	ret

0000093c <getCurrentTick>:
}

uint8_t getCurrentTick(void)
{
	return nowtick;
}
 93c:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <nowtick>
 940:	08 95       	ret

00000942 <__subsf3>:
 942:	50 58       	subi	r21, 0x80	; 128

00000944 <__addsf3>:
 944:	bb 27       	eor	r27, r27
 946:	aa 27       	eor	r26, r26
 948:	0e 94 b9 04 	call	0x972	; 0x972 <__addsf3x>
 94c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_round>
 950:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fp_pscA>
 954:	38 f0       	brcs	.+14     	; 0x964 <__addsf3+0x20>
 956:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_pscB>
 95a:	20 f0       	brcs	.+8      	; 0x964 <__addsf3+0x20>
 95c:	39 f4       	brne	.+14     	; 0x96c <__addsf3+0x28>
 95e:	9f 3f       	cpi	r25, 0xFF	; 255
 960:	19 f4       	brne	.+6      	; 0x968 <__addsf3+0x24>
 962:	26 f4       	brtc	.+8      	; 0x96c <__addsf3+0x28>
 964:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_nan>
 968:	0e f4       	brtc	.+2      	; 0x96c <__addsf3+0x28>
 96a:	e0 95       	com	r30
 96c:	e7 fb       	bst	r30, 7
 96e:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>

00000972 <__addsf3x>:
 972:	e9 2f       	mov	r30, r25
 974:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_split3>
 978:	58 f3       	brcs	.-42     	; 0x950 <__addsf3+0xc>
 97a:	ba 17       	cp	r27, r26
 97c:	62 07       	cpc	r22, r18
 97e:	73 07       	cpc	r23, r19
 980:	84 07       	cpc	r24, r20
 982:	95 07       	cpc	r25, r21
 984:	20 f0       	brcs	.+8      	; 0x98e <__addsf3x+0x1c>
 986:	79 f4       	brne	.+30     	; 0x9a6 <__addsf3x+0x34>
 988:	a6 f5       	brtc	.+104    	; 0x9f2 <__addsf3x+0x80>
 98a:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_zero>
 98e:	0e f4       	brtc	.+2      	; 0x992 <__addsf3x+0x20>
 990:	e0 95       	com	r30
 992:	0b 2e       	mov	r0, r27
 994:	ba 2f       	mov	r27, r26
 996:	a0 2d       	mov	r26, r0
 998:	0b 01       	movw	r0, r22
 99a:	b9 01       	movw	r22, r18
 99c:	90 01       	movw	r18, r0
 99e:	0c 01       	movw	r0, r24
 9a0:	ca 01       	movw	r24, r20
 9a2:	a0 01       	movw	r20, r0
 9a4:	11 24       	eor	r1, r1
 9a6:	ff 27       	eor	r31, r31
 9a8:	59 1b       	sub	r21, r25
 9aa:	99 f0       	breq	.+38     	; 0x9d2 <__addsf3x+0x60>
 9ac:	59 3f       	cpi	r21, 0xF9	; 249
 9ae:	50 f4       	brcc	.+20     	; 0x9c4 <__addsf3x+0x52>
 9b0:	50 3e       	cpi	r21, 0xE0	; 224
 9b2:	68 f1       	brcs	.+90     	; 0xa0e <__addsf3x+0x9c>
 9b4:	1a 16       	cp	r1, r26
 9b6:	f0 40       	sbci	r31, 0x00	; 0
 9b8:	a2 2f       	mov	r26, r18
 9ba:	23 2f       	mov	r18, r19
 9bc:	34 2f       	mov	r19, r20
 9be:	44 27       	eor	r20, r20
 9c0:	58 5f       	subi	r21, 0xF8	; 248
 9c2:	f3 cf       	rjmp	.-26     	; 0x9aa <__addsf3x+0x38>
 9c4:	46 95       	lsr	r20
 9c6:	37 95       	ror	r19
 9c8:	27 95       	ror	r18
 9ca:	a7 95       	ror	r26
 9cc:	f0 40       	sbci	r31, 0x00	; 0
 9ce:	53 95       	inc	r21
 9d0:	c9 f7       	brne	.-14     	; 0x9c4 <__addsf3x+0x52>
 9d2:	7e f4       	brtc	.+30     	; 0x9f2 <__addsf3x+0x80>
 9d4:	1f 16       	cp	r1, r31
 9d6:	ba 0b       	sbc	r27, r26
 9d8:	62 0b       	sbc	r22, r18
 9da:	73 0b       	sbc	r23, r19
 9dc:	84 0b       	sbc	r24, r20
 9de:	ba f0       	brmi	.+46     	; 0xa0e <__addsf3x+0x9c>
 9e0:	91 50       	subi	r25, 0x01	; 1
 9e2:	a1 f0       	breq	.+40     	; 0xa0c <__addsf3x+0x9a>
 9e4:	ff 0f       	add	r31, r31
 9e6:	bb 1f       	adc	r27, r27
 9e8:	66 1f       	adc	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	c2 f7       	brpl	.-16     	; 0x9e0 <__addsf3x+0x6e>
 9f0:	0e c0       	rjmp	.+28     	; 0xa0e <__addsf3x+0x9c>
 9f2:	ba 0f       	add	r27, r26
 9f4:	62 1f       	adc	r22, r18
 9f6:	73 1f       	adc	r23, r19
 9f8:	84 1f       	adc	r24, r20
 9fa:	48 f4       	brcc	.+18     	; 0xa0e <__addsf3x+0x9c>
 9fc:	87 95       	ror	r24
 9fe:	77 95       	ror	r23
 a00:	67 95       	ror	r22
 a02:	b7 95       	ror	r27
 a04:	f7 95       	ror	r31
 a06:	9e 3f       	cpi	r25, 0xFE	; 254
 a08:	08 f0       	brcs	.+2      	; 0xa0c <__addsf3x+0x9a>
 a0a:	b0 cf       	rjmp	.-160    	; 0x96c <__addsf3+0x28>
 a0c:	93 95       	inc	r25
 a0e:	88 0f       	add	r24, r24
 a10:	08 f0       	brcs	.+2      	; 0xa14 <__addsf3x+0xa2>
 a12:	99 27       	eor	r25, r25
 a14:	ee 0f       	add	r30, r30
 a16:	97 95       	ror	r25
 a18:	87 95       	ror	r24
 a1a:	08 95       	ret

00000a1c <__divsf3>:
 a1c:	0e 94 22 05 	call	0xa44	; 0xa44 <__divsf3x>
 a20:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_round>
 a24:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_pscB>
 a28:	58 f0       	brcs	.+22     	; 0xa40 <__divsf3+0x24>
 a2a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fp_pscA>
 a2e:	40 f0       	brcs	.+16     	; 0xa40 <__divsf3+0x24>
 a30:	29 f4       	brne	.+10     	; 0xa3c <__divsf3+0x20>
 a32:	5f 3f       	cpi	r21, 0xFF	; 255
 a34:	29 f0       	breq	.+10     	; 0xa40 <__divsf3+0x24>
 a36:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
 a3a:	51 11       	cpse	r21, r1
 a3c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_szero>
 a40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_nan>

00000a44 <__divsf3x>:
 a44:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_split3>
 a48:	68 f3       	brcs	.-38     	; 0xa24 <__divsf3+0x8>

00000a4a <__divsf3_pse>:
 a4a:	99 23       	and	r25, r25
 a4c:	b1 f3       	breq	.-20     	; 0xa3a <__divsf3+0x1e>
 a4e:	55 23       	and	r21, r21
 a50:	91 f3       	breq	.-28     	; 0xa36 <__divsf3+0x1a>
 a52:	95 1b       	sub	r25, r21
 a54:	55 0b       	sbc	r21, r21
 a56:	bb 27       	eor	r27, r27
 a58:	aa 27       	eor	r26, r26
 a5a:	62 17       	cp	r22, r18
 a5c:	73 07       	cpc	r23, r19
 a5e:	84 07       	cpc	r24, r20
 a60:	38 f0       	brcs	.+14     	; 0xa70 <__divsf3_pse+0x26>
 a62:	9f 5f       	subi	r25, 0xFF	; 255
 a64:	5f 4f       	sbci	r21, 0xFF	; 255
 a66:	22 0f       	add	r18, r18
 a68:	33 1f       	adc	r19, r19
 a6a:	44 1f       	adc	r20, r20
 a6c:	aa 1f       	adc	r26, r26
 a6e:	a9 f3       	breq	.-22     	; 0xa5a <__divsf3_pse+0x10>
 a70:	35 d0       	rcall	.+106    	; 0xadc <__divsf3_pse+0x92>
 a72:	0e 2e       	mov	r0, r30
 a74:	3a f0       	brmi	.+14     	; 0xa84 <__divsf3_pse+0x3a>
 a76:	e0 e8       	ldi	r30, 0x80	; 128
 a78:	32 d0       	rcall	.+100    	; 0xade <__divsf3_pse+0x94>
 a7a:	91 50       	subi	r25, 0x01	; 1
 a7c:	50 40       	sbci	r21, 0x00	; 0
 a7e:	e6 95       	lsr	r30
 a80:	00 1c       	adc	r0, r0
 a82:	ca f7       	brpl	.-14     	; 0xa76 <__divsf3_pse+0x2c>
 a84:	2b d0       	rcall	.+86     	; 0xadc <__divsf3_pse+0x92>
 a86:	fe 2f       	mov	r31, r30
 a88:	29 d0       	rcall	.+82     	; 0xadc <__divsf3_pse+0x92>
 a8a:	66 0f       	add	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	bb 1f       	adc	r27, r27
 a92:	26 17       	cp	r18, r22
 a94:	37 07       	cpc	r19, r23
 a96:	48 07       	cpc	r20, r24
 a98:	ab 07       	cpc	r26, r27
 a9a:	b0 e8       	ldi	r27, 0x80	; 128
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <__divsf3_pse+0x56>
 a9e:	bb 0b       	sbc	r27, r27
 aa0:	80 2d       	mov	r24, r0
 aa2:	bf 01       	movw	r22, r30
 aa4:	ff 27       	eor	r31, r31
 aa6:	93 58       	subi	r25, 0x83	; 131
 aa8:	5f 4f       	sbci	r21, 0xFF	; 255
 aaa:	3a f0       	brmi	.+14     	; 0xaba <__divsf3_pse+0x70>
 aac:	9e 3f       	cpi	r25, 0xFE	; 254
 aae:	51 05       	cpc	r21, r1
 ab0:	78 f0       	brcs	.+30     	; 0xad0 <__divsf3_pse+0x86>
 ab2:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
 ab6:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_szero>
 aba:	5f 3f       	cpi	r21, 0xFF	; 255
 abc:	e4 f3       	brlt	.-8      	; 0xab6 <__divsf3_pse+0x6c>
 abe:	98 3e       	cpi	r25, 0xE8	; 232
 ac0:	d4 f3       	brlt	.-12     	; 0xab6 <__divsf3_pse+0x6c>
 ac2:	86 95       	lsr	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b7 95       	ror	r27
 aca:	f7 95       	ror	r31
 acc:	9f 5f       	subi	r25, 0xFF	; 255
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__divsf3_pse+0x78>
 ad0:	88 0f       	add	r24, r24
 ad2:	91 1d       	adc	r25, r1
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret
 adc:	e1 e0       	ldi	r30, 0x01	; 1
 ade:	66 0f       	add	r22, r22
 ae0:	77 1f       	adc	r23, r23
 ae2:	88 1f       	adc	r24, r24
 ae4:	bb 1f       	adc	r27, r27
 ae6:	62 17       	cp	r22, r18
 ae8:	73 07       	cpc	r23, r19
 aea:	84 07       	cpc	r24, r20
 aec:	ba 07       	cpc	r27, r26
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <__divsf3_pse+0xae>
 af0:	62 1b       	sub	r22, r18
 af2:	73 0b       	sbc	r23, r19
 af4:	84 0b       	sbc	r24, r20
 af6:	ba 0b       	sbc	r27, r26
 af8:	ee 1f       	adc	r30, r30
 afa:	88 f7       	brcc	.-30     	; 0xade <__divsf3_pse+0x94>
 afc:	e0 95       	com	r30
 afe:	08 95       	ret

00000b00 <__fixsfsi>:
 b00:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fixunssfsi>
 b04:	68 94       	set
 b06:	b1 11       	cpse	r27, r1
 b08:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_szero>
 b0c:	08 95       	ret

00000b0e <__fixunssfsi>:
 b0e:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_splitA>
 b12:	88 f0       	brcs	.+34     	; 0xb36 <__fixunssfsi+0x28>
 b14:	9f 57       	subi	r25, 0x7F	; 127
 b16:	98 f0       	brcs	.+38     	; 0xb3e <__fixunssfsi+0x30>
 b18:	b9 2f       	mov	r27, r25
 b1a:	99 27       	eor	r25, r25
 b1c:	b7 51       	subi	r27, 0x17	; 23
 b1e:	b0 f0       	brcs	.+44     	; 0xb4c <__fixunssfsi+0x3e>
 b20:	e1 f0       	breq	.+56     	; 0xb5a <__fixunssfsi+0x4c>
 b22:	66 0f       	add	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	1a f0       	brmi	.+6      	; 0xb32 <__fixunssfsi+0x24>
 b2c:	ba 95       	dec	r27
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__fixunssfsi+0x14>
 b30:	14 c0       	rjmp	.+40     	; 0xb5a <__fixunssfsi+0x4c>
 b32:	b1 30       	cpi	r27, 0x01	; 1
 b34:	91 f0       	breq	.+36     	; 0xb5a <__fixunssfsi+0x4c>
 b36:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_zero>
 b3a:	b1 e0       	ldi	r27, 0x01	; 1
 b3c:	08 95       	ret
 b3e:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_zero>
 b42:	67 2f       	mov	r22, r23
 b44:	78 2f       	mov	r23, r24
 b46:	88 27       	eor	r24, r24
 b48:	b8 5f       	subi	r27, 0xF8	; 248
 b4a:	39 f0       	breq	.+14     	; 0xb5a <__fixunssfsi+0x4c>
 b4c:	b9 3f       	cpi	r27, 0xF9	; 249
 b4e:	cc f3       	brlt	.-14     	; 0xb42 <__fixunssfsi+0x34>
 b50:	86 95       	lsr	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	b3 95       	inc	r27
 b58:	d9 f7       	brne	.-10     	; 0xb50 <__fixunssfsi+0x42>
 b5a:	3e f4       	brtc	.+14     	; 0xb6a <__fixunssfsi+0x5c>
 b5c:	90 95       	com	r25
 b5e:	80 95       	com	r24
 b60:	70 95       	com	r23
 b62:	61 95       	neg	r22
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	8f 4f       	sbci	r24, 0xFF	; 255
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	08 95       	ret

00000b6c <__floatunsisf>:
 b6c:	e8 94       	clt
 b6e:	09 c0       	rjmp	.+18     	; 0xb82 <__floatsisf+0x12>

00000b70 <__floatsisf>:
 b70:	97 fb       	bst	r25, 7
 b72:	3e f4       	brtc	.+14     	; 0xb82 <__floatsisf+0x12>
 b74:	90 95       	com	r25
 b76:	80 95       	com	r24
 b78:	70 95       	com	r23
 b7a:	61 95       	neg	r22
 b7c:	7f 4f       	sbci	r23, 0xFF	; 255
 b7e:	8f 4f       	sbci	r24, 0xFF	; 255
 b80:	9f 4f       	sbci	r25, 0xFF	; 255
 b82:	99 23       	and	r25, r25
 b84:	a9 f0       	breq	.+42     	; 0xbb0 <__floatsisf+0x40>
 b86:	f9 2f       	mov	r31, r25
 b88:	96 e9       	ldi	r25, 0x96	; 150
 b8a:	bb 27       	eor	r27, r27
 b8c:	93 95       	inc	r25
 b8e:	f6 95       	lsr	r31
 b90:	87 95       	ror	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	b7 95       	ror	r27
 b98:	f1 11       	cpse	r31, r1
 b9a:	f8 cf       	rjmp	.-16     	; 0xb8c <__floatsisf+0x1c>
 b9c:	fa f4       	brpl	.+62     	; 0xbdc <__floatsisf+0x6c>
 b9e:	bb 0f       	add	r27, r27
 ba0:	11 f4       	brne	.+4      	; 0xba6 <__floatsisf+0x36>
 ba2:	60 ff       	sbrs	r22, 0
 ba4:	1b c0       	rjmp	.+54     	; 0xbdc <__floatsisf+0x6c>
 ba6:	6f 5f       	subi	r22, 0xFF	; 255
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	8f 4f       	sbci	r24, 0xFF	; 255
 bac:	9f 4f       	sbci	r25, 0xFF	; 255
 bae:	16 c0       	rjmp	.+44     	; 0xbdc <__floatsisf+0x6c>
 bb0:	88 23       	and	r24, r24
 bb2:	11 f0       	breq	.+4      	; 0xbb8 <__floatsisf+0x48>
 bb4:	96 e9       	ldi	r25, 0x96	; 150
 bb6:	11 c0       	rjmp	.+34     	; 0xbda <__floatsisf+0x6a>
 bb8:	77 23       	and	r23, r23
 bba:	21 f0       	breq	.+8      	; 0xbc4 <__floatsisf+0x54>
 bbc:	9e e8       	ldi	r25, 0x8E	; 142
 bbe:	87 2f       	mov	r24, r23
 bc0:	76 2f       	mov	r23, r22
 bc2:	05 c0       	rjmp	.+10     	; 0xbce <__floatsisf+0x5e>
 bc4:	66 23       	and	r22, r22
 bc6:	71 f0       	breq	.+28     	; 0xbe4 <__floatsisf+0x74>
 bc8:	96 e8       	ldi	r25, 0x86	; 134
 bca:	86 2f       	mov	r24, r22
 bcc:	70 e0       	ldi	r23, 0x00	; 0
 bce:	60 e0       	ldi	r22, 0x00	; 0
 bd0:	2a f0       	brmi	.+10     	; 0xbdc <__floatsisf+0x6c>
 bd2:	9a 95       	dec	r25
 bd4:	66 0f       	add	r22, r22
 bd6:	77 1f       	adc	r23, r23
 bd8:	88 1f       	adc	r24, r24
 bda:	da f7       	brpl	.-10     	; 0xbd2 <__floatsisf+0x62>
 bdc:	88 0f       	add	r24, r24
 bde:	96 95       	lsr	r25
 be0:	87 95       	ror	r24
 be2:	97 f9       	bld	r25, 7
 be4:	08 95       	ret

00000be6 <__fp_inf>:
 be6:	97 f9       	bld	r25, 7
 be8:	9f 67       	ori	r25, 0x7F	; 127
 bea:	80 e8       	ldi	r24, 0x80	; 128
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	60 e0       	ldi	r22, 0x00	; 0
 bf0:	08 95       	ret

00000bf2 <__fp_nan>:
 bf2:	9f ef       	ldi	r25, 0xFF	; 255
 bf4:	80 ec       	ldi	r24, 0xC0	; 192
 bf6:	08 95       	ret

00000bf8 <__fp_pscA>:
 bf8:	00 24       	eor	r0, r0
 bfa:	0a 94       	dec	r0
 bfc:	16 16       	cp	r1, r22
 bfe:	17 06       	cpc	r1, r23
 c00:	18 06       	cpc	r1, r24
 c02:	09 06       	cpc	r0, r25
 c04:	08 95       	ret

00000c06 <__fp_pscB>:
 c06:	00 24       	eor	r0, r0
 c08:	0a 94       	dec	r0
 c0a:	12 16       	cp	r1, r18
 c0c:	13 06       	cpc	r1, r19
 c0e:	14 06       	cpc	r1, r20
 c10:	05 06       	cpc	r0, r21
 c12:	08 95       	ret

00000c14 <__fp_round>:
 c14:	09 2e       	mov	r0, r25
 c16:	03 94       	inc	r0
 c18:	00 0c       	add	r0, r0
 c1a:	11 f4       	brne	.+4      	; 0xc20 <__fp_round+0xc>
 c1c:	88 23       	and	r24, r24
 c1e:	52 f0       	brmi	.+20     	; 0xc34 <__fp_round+0x20>
 c20:	bb 0f       	add	r27, r27
 c22:	40 f4       	brcc	.+16     	; 0xc34 <__fp_round+0x20>
 c24:	bf 2b       	or	r27, r31
 c26:	11 f4       	brne	.+4      	; 0xc2c <__fp_round+0x18>
 c28:	60 ff       	sbrs	r22, 0
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__fp_round+0x20>
 c2c:	6f 5f       	subi	r22, 0xFF	; 255
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <__fp_split3>:
 c36:	57 fd       	sbrc	r21, 7
 c38:	90 58       	subi	r25, 0x80	; 128
 c3a:	44 0f       	add	r20, r20
 c3c:	55 1f       	adc	r21, r21
 c3e:	59 f0       	breq	.+22     	; 0xc56 <__fp_splitA+0x10>
 c40:	5f 3f       	cpi	r21, 0xFF	; 255
 c42:	71 f0       	breq	.+28     	; 0xc60 <__fp_splitA+0x1a>
 c44:	47 95       	ror	r20

00000c46 <__fp_splitA>:
 c46:	88 0f       	add	r24, r24
 c48:	97 fb       	bst	r25, 7
 c4a:	99 1f       	adc	r25, r25
 c4c:	61 f0       	breq	.+24     	; 0xc66 <__fp_splitA+0x20>
 c4e:	9f 3f       	cpi	r25, 0xFF	; 255
 c50:	79 f0       	breq	.+30     	; 0xc70 <__fp_splitA+0x2a>
 c52:	87 95       	ror	r24
 c54:	08 95       	ret
 c56:	12 16       	cp	r1, r18
 c58:	13 06       	cpc	r1, r19
 c5a:	14 06       	cpc	r1, r20
 c5c:	55 1f       	adc	r21, r21
 c5e:	f2 cf       	rjmp	.-28     	; 0xc44 <__fp_split3+0xe>
 c60:	46 95       	lsr	r20
 c62:	f1 df       	rcall	.-30     	; 0xc46 <__fp_splitA>
 c64:	08 c0       	rjmp	.+16     	; 0xc76 <__fp_splitA+0x30>
 c66:	16 16       	cp	r1, r22
 c68:	17 06       	cpc	r1, r23
 c6a:	18 06       	cpc	r1, r24
 c6c:	99 1f       	adc	r25, r25
 c6e:	f1 cf       	rjmp	.-30     	; 0xc52 <__fp_splitA+0xc>
 c70:	86 95       	lsr	r24
 c72:	71 05       	cpc	r23, r1
 c74:	61 05       	cpc	r22, r1
 c76:	08 94       	sec
 c78:	08 95       	ret

00000c7a <__fp_zero>:
 c7a:	e8 94       	clt

00000c7c <__fp_szero>:
 c7c:	bb 27       	eor	r27, r27
 c7e:	66 27       	eor	r22, r22
 c80:	77 27       	eor	r23, r23
 c82:	cb 01       	movw	r24, r22
 c84:	97 f9       	bld	r25, 7
 c86:	08 95       	ret

00000c88 <__mulsf3>:
 c88:	0e 94 57 06 	call	0xcae	; 0xcae <__mulsf3x>
 c8c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_round>
 c90:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fp_pscA>
 c94:	38 f0       	brcs	.+14     	; 0xca4 <__mulsf3+0x1c>
 c96:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_pscB>
 c9a:	20 f0       	brcs	.+8      	; 0xca4 <__mulsf3+0x1c>
 c9c:	95 23       	and	r25, r21
 c9e:	11 f0       	breq	.+4      	; 0xca4 <__mulsf3+0x1c>
 ca0:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
 ca4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_nan>
 ca8:	11 24       	eor	r1, r1
 caa:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_szero>

00000cae <__mulsf3x>:
 cae:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_split3>
 cb2:	70 f3       	brcs	.-36     	; 0xc90 <__mulsf3+0x8>

00000cb4 <__mulsf3_pse>:
 cb4:	95 9f       	mul	r25, r21
 cb6:	c1 f3       	breq	.-16     	; 0xca8 <__mulsf3+0x20>
 cb8:	95 0f       	add	r25, r21
 cba:	50 e0       	ldi	r21, 0x00	; 0
 cbc:	55 1f       	adc	r21, r21
 cbe:	62 9f       	mul	r22, r18
 cc0:	f0 01       	movw	r30, r0
 cc2:	72 9f       	mul	r23, r18
 cc4:	bb 27       	eor	r27, r27
 cc6:	f0 0d       	add	r31, r0
 cc8:	b1 1d       	adc	r27, r1
 cca:	63 9f       	mul	r22, r19
 ccc:	aa 27       	eor	r26, r26
 cce:	f0 0d       	add	r31, r0
 cd0:	b1 1d       	adc	r27, r1
 cd2:	aa 1f       	adc	r26, r26
 cd4:	64 9f       	mul	r22, r20
 cd6:	66 27       	eor	r22, r22
 cd8:	b0 0d       	add	r27, r0
 cda:	a1 1d       	adc	r26, r1
 cdc:	66 1f       	adc	r22, r22
 cde:	82 9f       	mul	r24, r18
 ce0:	22 27       	eor	r18, r18
 ce2:	b0 0d       	add	r27, r0
 ce4:	a1 1d       	adc	r26, r1
 ce6:	62 1f       	adc	r22, r18
 ce8:	73 9f       	mul	r23, r19
 cea:	b0 0d       	add	r27, r0
 cec:	a1 1d       	adc	r26, r1
 cee:	62 1f       	adc	r22, r18
 cf0:	83 9f       	mul	r24, r19
 cf2:	a0 0d       	add	r26, r0
 cf4:	61 1d       	adc	r22, r1
 cf6:	22 1f       	adc	r18, r18
 cf8:	74 9f       	mul	r23, r20
 cfa:	33 27       	eor	r19, r19
 cfc:	a0 0d       	add	r26, r0
 cfe:	61 1d       	adc	r22, r1
 d00:	23 1f       	adc	r18, r19
 d02:	84 9f       	mul	r24, r20
 d04:	60 0d       	add	r22, r0
 d06:	21 1d       	adc	r18, r1
 d08:	82 2f       	mov	r24, r18
 d0a:	76 2f       	mov	r23, r22
 d0c:	6a 2f       	mov	r22, r26
 d0e:	11 24       	eor	r1, r1
 d10:	9f 57       	subi	r25, 0x7F	; 127
 d12:	50 40       	sbci	r21, 0x00	; 0
 d14:	9a f0       	brmi	.+38     	; 0xd3c <__mulsf3_pse+0x88>
 d16:	f1 f0       	breq	.+60     	; 0xd54 <__mulsf3_pse+0xa0>
 d18:	88 23       	and	r24, r24
 d1a:	4a f0       	brmi	.+18     	; 0xd2e <__mulsf3_pse+0x7a>
 d1c:	ee 0f       	add	r30, r30
 d1e:	ff 1f       	adc	r31, r31
 d20:	bb 1f       	adc	r27, r27
 d22:	66 1f       	adc	r22, r22
 d24:	77 1f       	adc	r23, r23
 d26:	88 1f       	adc	r24, r24
 d28:	91 50       	subi	r25, 0x01	; 1
 d2a:	50 40       	sbci	r21, 0x00	; 0
 d2c:	a9 f7       	brne	.-22     	; 0xd18 <__mulsf3_pse+0x64>
 d2e:	9e 3f       	cpi	r25, 0xFE	; 254
 d30:	51 05       	cpc	r21, r1
 d32:	80 f0       	brcs	.+32     	; 0xd54 <__mulsf3_pse+0xa0>
 d34:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
 d38:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_szero>
 d3c:	5f 3f       	cpi	r21, 0xFF	; 255
 d3e:	e4 f3       	brlt	.-8      	; 0xd38 <__mulsf3_pse+0x84>
 d40:	98 3e       	cpi	r25, 0xE8	; 232
 d42:	d4 f3       	brlt	.-12     	; 0xd38 <__mulsf3_pse+0x84>
 d44:	86 95       	lsr	r24
 d46:	77 95       	ror	r23
 d48:	67 95       	ror	r22
 d4a:	b7 95       	ror	r27
 d4c:	f7 95       	ror	r31
 d4e:	e7 95       	ror	r30
 d50:	9f 5f       	subi	r25, 0xFF	; 255
 d52:	c1 f7       	brne	.-16     	; 0xd44 <__mulsf3_pse+0x90>
 d54:	fe 2b       	or	r31, r30
 d56:	88 0f       	add	r24, r24
 d58:	91 1d       	adc	r25, r1
 d5a:	96 95       	lsr	r25
 d5c:	87 95       	ror	r24
 d5e:	97 f9       	bld	r25, 7
 d60:	08 95       	ret

00000d62 <__tablejump2__>:
 d62:	ee 0f       	add	r30, r30
 d64:	ff 1f       	adc	r31, r31
 d66:	05 90       	lpm	r0, Z+
 d68:	f4 91       	lpm	r31, Z
 d6a:	e0 2d       	mov	r30, r0
 d6c:	09 94       	ijmp

00000d6e <__mulshisi3>:
 d6e:	b7 ff       	sbrs	r27, 7
 d70:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__muluhisi3>

00000d74 <__mulohisi3>:
 d74:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__muluhisi3>
 d78:	82 1b       	sub	r24, r18
 d7a:	93 0b       	sbc	r25, r19
 d7c:	08 95       	ret

00000d7e <__muluhisi3>:
 d7e:	0e 94 ca 06 	call	0xd94	; 0xd94 <__umulhisi3>
 d82:	a5 9f       	mul	r26, r21
 d84:	90 0d       	add	r25, r0
 d86:	b4 9f       	mul	r27, r20
 d88:	90 0d       	add	r25, r0
 d8a:	a4 9f       	mul	r26, r20
 d8c:	80 0d       	add	r24, r0
 d8e:	91 1d       	adc	r25, r1
 d90:	11 24       	eor	r1, r1
 d92:	08 95       	ret

00000d94 <__umulhisi3>:
 d94:	a2 9f       	mul	r26, r18
 d96:	b0 01       	movw	r22, r0
 d98:	b3 9f       	mul	r27, r19
 d9a:	c0 01       	movw	r24, r0
 d9c:	a3 9f       	mul	r26, r19
 d9e:	70 0d       	add	r23, r0
 da0:	81 1d       	adc	r24, r1
 da2:	11 24       	eor	r1, r1
 da4:	91 1d       	adc	r25, r1
 da6:	b2 9f       	mul	r27, r18
 da8:	70 0d       	add	r23, r0
 daa:	81 1d       	adc	r24, r1
 dac:	11 24       	eor	r1, r1
 dae:	91 1d       	adc	r25, r1
 db0:	08 95       	ret

00000db2 <_exit>:
 db2:	f8 94       	cli

00000db4 <__stop_program>:
 db4:	ff cf       	rjmp	.-2      	; 0xdb4 <__stop_program>
