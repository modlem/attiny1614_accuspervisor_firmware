
attiny1614_accsupervisor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803800  00000ca6  00000d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00803804  00803804  00000d3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003662  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d32  00000000  00000000  00004552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c01  00000000  00000000  00006284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00006e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c5f  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bce  00000000  00000000  00008e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000099f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_7>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e6 ea       	ldi	r30, 0xA6	; 166
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 34       	cpi	r26, 0x44	; 68
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 6d 02 	call	0x4da	; 0x4da <main>
  b2:	0c 94 51 06 	jmp	0xca2	; 0xca2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_7>:
}

int isAdcOn()
{
	return _gpio_status & GPIO_ADC_MASK;
}
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
  e2:	0e 94 19 04 	call	0x832	; 0x832 <incTick>
  e6:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <tx2_timeout>
  ea:	89 37       	cpi	r24, 0x79	; 121
  ec:	18 f0       	brcs	.+6      	; 0xf4 <__vector_7+0x3a>
  ee:	88 e7       	ldi	r24, 0x78	; 120
  f0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <tx2_timeout>
  f4:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <tx2_timeout>
  f8:	88 23       	and	r24, r24
  fa:	29 f0       	breq	.+10     	; 0x106 <__vector_7+0x4c>
  fc:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <tx2_timeout>
 100:	81 50       	subi	r24, 0x01	; 1
 102:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <tx2_timeout>
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_27>:
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
 13e:	1f c0       	rjmp	.+62     	; 0x17e <__vector_27+0x56>
 140:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 144:	81 fd       	sbrc	r24, 1
 146:	1b c0       	rjmp	.+54     	; 0x17e <__vector_27+0x56>
 148:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <uart0_rbuf_wpnt>
 14c:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <uart0_rbuf_wpnt+0x1>
 150:	9c 01       	movw	r18, r24
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	20 93 0e 38 	sts	0x380E, r18	; 0x80380e <uart0_rbuf_wpnt>
 15a:	30 93 0f 38 	sts	0x380F, r19	; 0x80380f <uart0_rbuf_wpnt+0x1>
 15e:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 162:	fc 01       	movw	r30, r24
 164:	e0 5f       	subi	r30, 0xF0	; 240
 166:	f7 4c       	sbci	r31, 0xC7	; 199
 168:	20 83       	st	Z, r18
 16a:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <uart0_rbuf_wpnt>
 16e:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <uart0_rbuf_wpnt+0x1>
 172:	80 97       	sbiw	r24, 0x20	; 32
 174:	20 f0       	brcs	.+8      	; 0x17e <__vector_27+0x56>
 176:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <uart0_rbuf_wpnt>
 17a:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <uart0_rbuf_wpnt+0x1>
 17e:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 182:	88 23       	and	r24, r24
 184:	ec f2       	brlt	.-70     	; 0x140 <__vector_27+0x18>
 186:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <uart0_rbuf_rpnt>
 18a:	30 91 0d 38 	lds	r19, 0x380D	; 0x80380d <uart0_rbuf_rpnt+0x1>
 18e:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <uart0_rbuf_wpnt>
 192:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <uart0_rbuf_wpnt+0x1>
 196:	28 17       	cp	r18, r24
 198:	39 07       	cpc	r19, r25
 19a:	99 f4       	brne	.+38     	; 0x1c2 <__vector_27+0x9a>
 19c:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <uart0_rbuf_wpnt>
 1a0:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <uart0_rbuf_wpnt+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <uart0_rbuf_rpnt>
 1aa:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <uart0_rbuf_rpnt+0x1>
 1ae:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <uart0_rbuf_rpnt>
 1b2:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <uart0_rbuf_rpnt+0x1>
 1b6:	80 97       	sbiw	r24, 0x20	; 32
 1b8:	20 f0       	brcs	.+8      	; 0x1c2 <__vector_27+0x9a>
 1ba:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <uart0_rbuf_rpnt>
 1be:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt+0x1>
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <RTC_init>:
 1d8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
 1dc:	81 11       	cpse	r24, r1
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <RTC_init>
 1e0:	e0 e4       	ldi	r30, 0x40	; 64
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	87 83       	std	Z+7, r24	; 0x07
 1e8:	85 83       	std	Z+5, r24	; 0x05
 1ea:	82 8b       	std	Z+18, r24	; 0x12
 1ec:	89 e4       	ldi	r24, 0x49	; 73
 1ee:	80 8b       	std	Z+16, r24	; 0x10
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <SLPCTRL_init>:
 1f6:	e0 e5       	ldi	r30, 0x50	; 80
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	80 83       	st	Z, r24
 200:	80 81       	ld	r24, Z
 202:	81 60       	ori	r24, 0x01	; 1
 204:	80 83       	st	Z, r24
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	08 95       	ret

0000020c <GPIO_init>:
 20c:	e0 e0       	ldi	r30, 0x00	; 0
 20e:	f4 e0       	ldi	r31, 0x04	; 4
 210:	80 81       	ld	r24, Z
 212:	88 60       	ori	r24, 0x08	; 8
 214:	80 83       	st	Z, r24
 216:	e0 e2       	ldi	r30, 0x20	; 32
 218:	f4 e0       	ldi	r31, 0x04	; 4
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	80 83       	st	Z, r24
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret

00000226 <USART0_init>:
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	c0 91 24 11 	lds	r28, 0x1124	; 0x801124 <__TEXT_REGION_LENGTH__+0x701124>
 230:	e0 e0       	ldi	r30, 0x00	; 0
 232:	f2 e0       	ldi	r31, 0x02	; 2
 234:	21 81       	ldd	r18, Z+1	; 0x01
 236:	2e 7f       	andi	r18, 0xFE	; 254
 238:	21 83       	std	Z+1, r18	; 0x01
 23a:	e0 e2       	ldi	r30, 0x20	; 32
 23c:	f4 e0       	ldi	r31, 0x04	; 4
 23e:	20 81       	ld	r18, Z
 240:	27 7f       	andi	r18, 0xF7	; 247
 242:	20 83       	st	Z, r18
 244:	20 81       	ld	r18, Z
 246:	24 60       	ori	r18, 0x04	; 4
 248:	20 83       	st	Z, r18
 24a:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	40 e8       	ldi	r20, 0x80	; 128
 254:	51 e4       	ldi	r21, 0x41	; 65
 256:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
 25a:	9b 01       	movw	r18, r22
 25c:	ac 01       	movw	r20, r24
 25e:	64 e5       	ldi	r22, 0x54	; 84
 260:	73 e7       	ldi	r23, 0x73	; 115
 262:	8b e4       	ldi	r24, 0x4B	; 75
 264:	9d e4       	ldi	r25, 0x4D	; 77
 266:	0e 94 8c 04 	call	0x918	; 0x918 <__divsf3>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	5f e3       	ldi	r21, 0x3F	; 63
 272:	0e 94 20 04 	call	0x840	; 0x840 <__addsf3>
 276:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fixsfsi>
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	ac 2f       	mov	r26, r28
 280:	cc 0f       	add	r28, r28
 282:	bb 0b       	sbc	r27, r27
 284:	bc 5f       	subi	r27, 0xFC	; 252
 286:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulshisi3>
 28a:	8b 01       	movw	r16, r22
 28c:	9c 01       	movw	r18, r24
 28e:	99 23       	and	r25, r25
 290:	24 f4       	brge	.+8      	; 0x29a <USART0_init+0x74>
 292:	01 50       	subi	r16, 0x01	; 1
 294:	1c 4f       	sbci	r17, 0xFC	; 252
 296:	2f 4f       	sbci	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	d9 01       	movw	r26, r18
 29c:	c8 01       	movw	r24, r16
 29e:	07 2e       	mov	r0, r23
 2a0:	7a e0       	ldi	r23, 0x0A	; 10
 2a2:	b5 95       	asr	r27
 2a4:	a7 95       	ror	r26
 2a6:	97 95       	ror	r25
 2a8:	87 95       	ror	r24
 2aa:	7a 95       	dec	r23
 2ac:	d1 f7       	brne	.-12     	; 0x2a2 <USART0_init+0x7c>
 2ae:	70 2d       	mov	r23, r0
 2b0:	e0 e0       	ldi	r30, 0x00	; 0
 2b2:	f8 e0       	ldi	r31, 0x08	; 8
 2b4:	80 87       	std	Z+8, r24	; 0x08
 2b6:	91 87       	std	Z+9, r25	; 0x09
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	85 83       	std	Z+5, r24	; 0x05
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	87 83       	std	Z+7, r24	; 0x07
 2c0:	13 86       	std	Z+11, r1	; 0x0b
 2c2:	80 ec       	ldi	r24, 0xC0	; 192
 2c4:	86 83       	std	Z+6, r24	; 0x06
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <USART0_sendChar>:
 2d2:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 2d6:	95 ff       	sbrs	r25, 5
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <USART0_sendChar>
 2da:	e0 e0       	ldi	r30, 0x00	; 0
 2dc:	f8 e0       	ldi	r31, 0x08	; 8
 2de:	94 81       	ldd	r25, Z+4	; 0x04
 2e0:	90 64       	ori	r25, 0x40	; 64
 2e2:	94 83       	std	Z+4, r25	; 0x04
 2e4:	82 83       	std	Z+2, r24	; 0x02
 2e6:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 2ea:	86 ff       	sbrs	r24, 6
 2ec:	fc cf       	rjmp	.-8      	; 0x2e6 <USART0_sendChar+0x14>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <USART0_sendBuf>:
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	7c 01       	movw	r14, r24
 300:	16 2f       	mov	r17, r22
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	09 c0       	rjmp	.+18     	; 0x31a <USART0_sendBuf+0x26>
 308:	f7 01       	movw	r30, r14
 30a:	ec 0f       	add	r30, r28
 30c:	fd 1f       	adc	r31, r29
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	0e 94 69 01 	call	0x2d2	; 0x2d2 <USART0_sendChar>
 318:	21 96       	adiw	r28, 0x01	; 1
 31a:	81 2f       	mov	r24, r17
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	c8 17       	cp	r28, r24
 320:	d9 07       	cpc	r29, r25
 322:	90 f3       	brcs	.-28     	; 0x308 <USART0_sendBuf+0x14>
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	08 95       	ret

00000330 <relayOn>:
 330:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <_gpio_status>
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <_gpio_status>
 33a:	e0 e2       	ldi	r30, 0x20	; 32
 33c:	f4 e0       	ldi	r31, 0x04	; 4
 33e:	84 81       	ldd	r24, Z+4	; 0x04
 340:	82 60       	ori	r24, 0x02	; 2
 342:	84 83       	std	Z+4, r24	; 0x04
 344:	08 95       	ret

00000346 <relayOff>:
 346:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <_gpio_status>
 34a:	8e 7f       	andi	r24, 0xFE	; 254
 34c:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <_gpio_status>
 350:	e0 e2       	ldi	r30, 0x20	; 32
 352:	f4 e0       	ldi	r31, 0x04	; 4
 354:	84 81       	ldd	r24, Z+4	; 0x04
 356:	8d 7f       	andi	r24, 0xFD	; 253
 358:	84 83       	std	Z+4, r24	; 0x04
 35a:	08 95       	ret

0000035c <adcOn>:
 35c:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <_gpio_status>
 360:	82 60       	ori	r24, 0x02	; 2
 362:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <_gpio_status>
 366:	e0 e0       	ldi	r30, 0x00	; 0
 368:	f4 e0       	ldi	r31, 0x04	; 4
 36a:	84 81       	ldd	r24, Z+4	; 0x04
 36c:	88 60       	ori	r24, 0x08	; 8
 36e:	84 83       	std	Z+4, r24	; 0x04
 370:	08 95       	ret

00000372 <adcOff>:
 372:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <_gpio_status>
 376:	8d 7f       	andi	r24, 0xFD	; 253
 378:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <_gpio_status>
 37c:	e0 e0       	ldi	r30, 0x00	; 0
 37e:	f4 e0       	ldi	r31, 0x04	; 4
 380:	84 81       	ldd	r24, Z+4	; 0x04
 382:	87 7f       	andi	r24, 0xF7	; 247
 384:	84 83       	std	Z+4, r24	; 0x04
 386:	08 95       	ret

00000388 <isRelayOn>:
 388:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <_gpio_status>
 38c:	81 70       	andi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	08 95       	ret

00000392 <ADC_init>:

int ADC_init(void)
{
	// No inversion, no pull-up, no int., dig. buffer disable on PA1 and PA2.
	PORTA.PIN1CTRL &= ~PORT_ISC_gm;
 392:	e0 e0       	ldi	r30, 0x00	; 0
 394:	f4 e0       	ldi	r31, 0x04	; 4
 396:	81 89       	ldd	r24, Z+17	; 0x11
 398:	88 7f       	andi	r24, 0xF8	; 248
 39a:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL &= ~PORT_ISC_gm;
 39c:	82 89       	ldd	r24, Z+18	; 0x12
 39e:	88 7f       	andi	r24, 0xF8	; 248
 3a0:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3a2:	81 89       	ldd	r24, Z+17	; 0x11
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3a8:	82 89       	ldd	r24, Z+18	; 0x12
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	82 8b       	std	Z+18, r24	; 0x12
	
	// No run in standby, full 10-bit resolution, no freerun, enable.
	ADC0.CTRLA = (1 & ADC_ENABLE_bm);
 3ae:	e0 e0       	ldi	r30, 0x00	; 0
 3b0:	f6 e0       	ldi	r31, 0x06	; 6
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 83       	st	Z, r24
	// No accumulation. Max. value will be 0x3FF (max. of 10-bit)
	ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc;
 3b6:	11 82       	std	Z+1, r1	; 0x01
	// Big sample cap., VDD ref., DIV256 prescaler.
	// Ya, I know. It's an overkill. Better than going under.
	ADC0.CTRLC = ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV256_gc;
 3b8:	97 e1       	ldi	r25, 0x17	; 23
 3ba:	92 83       	std	Z+2, r25	; 0x02
	// 256clk startup delay, no auto sample delay, no delay between samples.
	ADC0.CTRLD = ADC_INITDLY_DLY256_gc;
 3bc:	90 ea       	ldi	r25, 0xA0	; 160
 3be:	93 83       	std	Z+3, r25	; 0x03
	// No window comp.
	ADC0.CTRLE = ADC_WINCM_NONE_gc;
 3c0:	14 82       	std	Z+4, r1	; 0x04
	// 0 sample len.
	ADC0.SAMPCTRL = (0 & ADC_SAMPLEN_gm);
 3c2:	15 82       	std	Z+5, r1	; 0x05
	// Not using evt. control
	ADC0.EVCTRL = (0 & ADC_STARTEI_bm);
 3c4:	11 86       	std	Z+9, r1	; 0x09
	// Not using int. control
	ADC0.INTCTRL = (0 & ADC_WCMP_bm) | (0 & ADC_RESRDY_bm);
 3c6:	12 86       	std	Z+10, r1	; 0x0a
	// Clearing possible previous int. flags
	ADC0.INTFLAGS = (1 & ADC_WCMP_bm) | (1 & ADC_RESRDY_bm);
 3c8:	83 87       	std	Z+11, r24	; 0x0b
	// Halting the peripheral in debug halt
	ADC0.DBGCTRL = (0 & ADC_DBGRUN_bm);
 3ca:	14 86       	std	Z+12, r1	; 0x0c
	
	return 0;
}
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	08 95       	ret

000003d2 <doAdcThings>:

void doAdcThings()
{
	if((ADC0.COMMAND & ADC_STCONV_bm) == 0)
 3d2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 3d6:	80 fd       	sbrc	r24, 0
 3d8:	40 c0       	rjmp	.+128    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		if(ADC0.INTFLAGS & ADC_RESRDY_bm)
 3da:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
 3de:	80 ff       	sbrs	r24, 0
 3e0:	28 c0       	rjmp	.+80     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		{
			// Something has been done from previous conversion.
			if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 3e2:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 3e6:	8f 71       	andi	r24, 0x1F	; 31
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	71 f4       	brne	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			{
				// VBAT
				vbat_volt = ADC0.RES;
 3ec:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 3f0:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 3f4:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <vbat_volt>
 3f8:	90 93 0a 38 	sts	0x380A, r25	; 0x80380a <vbat_volt+0x1>
				adc_state |= 0x1;
 3fc:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <adc_state>
 400:	81 60       	ori	r24, 0x01	; 1
 402:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <adc_state>
 406:	12 c0       	rjmp	.+36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}
			else if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN2_gc)
 408:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 40c:	8f 71       	andi	r24, 0x1F	; 31
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	69 f4       	brne	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			{
				// VACC
				vacc_volt = ADC0.RES;
 412:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 416:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 41a:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <vacc_volt>
 41e:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <vacc_volt+0x1>
				adc_state |= 0x2;
 422:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <adc_state>
 426:	82 60       	ori	r24, 0x02	; 2
 428:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <adc_state>
			}
			ADC0.INTFLAGS = (1 & ADC_RESRDY_bm);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
		}
		
		if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 432:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 436:	8f 71       	andi	r24, 0x1F	; 31
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	21 f4       	brne	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN2_gc;
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}
		else
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
		}
		ADC0.COMMAND = (1 & ADC_STCONV_bm);
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
		pending_sleep_flag |= PENDING_SLEEP_ADC;
 450:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <__data_end>
 454:	82 60       	ori	r24, 0x02	; 2
 456:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <__data_end>
 45a:	08 95       	ret

0000045c <doSwitchingThings>:
	}
}

void doSwitchingThings(void)
{
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
	static uint8_t lastWatchdogTick = 255;
	static uint8_t watchdogEngaged = 0;
	
	if(vacc_volt >= vacc_threshold)
 464:	00 91 07 38 	lds	r16, 0x3807	; 0x803807 <vacc_volt>
 468:	10 91 08 38 	lds	r17, 0x3808	; 0x803808 <vacc_volt+0x1>
 46c:	c0 91 00 38 	lds	r28, 0x3800	; 0x803800 <__data_start>
 470:	d0 91 01 38 	lds	r29, 0x3801	; 0x803801 <__data_start+0x1>
 474:	0c 17       	cp	r16, r28
 476:	1d 07       	cpc	r17, r29
 478:	18 f0       	brcs	.+6      	; 0x480 <doSwitchingThings+0x24>
					tx2_timeout = TX2_TIMEOUT_SEC;
				}
			}
		}
		#else
		tx2_timeout = TX2_TIMEOUT_SEC;
 47a:	88 e7       	ldi	r24, 0x78	; 120
 47c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <tx2_timeout>
		#endif
	}
	
	if(isRelayOn())
 480:	0e 94 c4 01 	call	0x388	; 0x388 <isRelayOn>
 484:	89 2b       	or	r24, r25
 486:	d1 f0       	breq	.+52     	; 0x4bc <doSwitchingThings+0x60>
	{
		if(vacc_volt < vacc_threshold || vbat_volt < vbat_threshold)
 488:	0c 17       	cp	r16, r28
 48a:	1d 07       	cpc	r17, r29
 48c:	58 f0       	brcs	.+22     	; 0x4a4 <doSwitchingThings+0x48>
 48e:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <vbat_volt>
 492:	30 91 0a 38 	lds	r19, 0x380A	; 0x80380a <vbat_volt+0x1>
 496:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <vbat_threshold>
 49a:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <vbat_threshold+0x1>
 49e:	28 17       	cp	r18, r24
 4a0:	39 07       	cpc	r19, r25
 4a2:	b0 f4       	brcc	.+44     	; 0x4d0 <doSwitchingThings+0x74>
		{
			if(tx2_timeout == 0)
 4a4:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <tx2_timeout>
 4a8:	81 11       	cpse	r24, r1
 4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <doSwitchingThings+0x74>
			{
				relayOff();
 4ac:	0e 94 a3 01 	call	0x346	; 0x346 <relayOff>
				pending_sleep_flag &= ~PENDING_SLEEP_UART;
 4b0:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <__data_end>
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <__data_end>
 4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <doSwitchingThings+0x74>
		}
	}
	else
	{
		// Relay is always on if the accessory power presents
		if(vacc_volt >= vacc_threshold && watchdogEngaged == 0)
 4bc:	0c 17       	cp	r16, r28
 4be:	1d 07       	cpc	r17, r29
 4c0:	38 f0       	brcs	.+14     	; 0x4d0 <doSwitchingThings+0x74>
		{
			relayOn();
 4c2:	0e 94 98 01 	call	0x330	; 0x330 <relayOn>
			pending_sleep_flag |= PENDING_SLEEP_UART;
 4c6:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <__data_end>
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <__data_end>
		}
	}
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	08 95       	ret

000004da <main>:

int main(void)
{
	//FILE USART_stream = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_WRITE);
	
	cli();
 4da:	f8 94       	cli
	RTC_init();
 4dc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RTC_init>
	SLPCTRL_init();
 4e0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <SLPCTRL_init>
	GPIO_init();
 4e4:	0e 94 06 01 	call	0x20c	; 0x20c <GPIO_init>
	USART0_init(115200);
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	72 ec       	ldi	r23, 0xC2	; 194
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 13 01 	call	0x226	; 0x226 <USART0_init>
	ADC_init();
 4f4:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_init>
	sei();
 4f8:	78 94       	sei
	// Protocol8086 parser in action
	// TODO: comment out. Debugging in progress
	//stdout = &USART_stream;
	parserInit();
 4fa:	0e 94 a4 03 	call	0x748	; 0x748 <parserInit>
	setParseDoneCallback(NULL);
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 ab 03 	call	0x756	; 0x756 <setParseDoneCallback>
	setUartSendFunc(USART0_sendBuf);
 506:	8a e7       	ldi	r24, 0x7A	; 122
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 b0 03 	call	0x760	; 0x760 <setUartSendFunc>
	
	pending_sleep_flag = 0 & PENDING_SLEEP_MASK;
 50e:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <__data_end>
	adcOn();
 512:	0e 94 ae 01 	call	0x35c	; 0x35c <adcOn>

	// Static scheduling loop
    while (1)
    {
		doAdcThings();
 516:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <doAdcThings>
		if((adc_state & 0x3) == 0x3)
 51a:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <adc_state>
 51e:	83 70       	andi	r24, 0x03	; 3
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	49 f4       	brne	.+18     	; 0x536 <main+0x5c>
		{
			adc_state = 0;
 524:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <adc_state>
			doSwitchingThings();
 528:	0e 94 2e 02 	call	0x45c	; 0x45c <doSwitchingThings>
			pending_sleep_flag &= ~PENDING_SLEEP_ADC;
 52c:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <__data_end>
 530:	8d 7f       	andi	r24, 0xFD	; 253
 532:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <__data_end>
		}

		if(uart0_rbuf_rpnt != uart0_rbuf_wpnt)
 536:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <uart0_rbuf_rpnt>
 53a:	30 91 0d 38 	lds	r19, 0x380D	; 0x80380d <uart0_rbuf_rpnt+0x1>
 53e:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <uart0_rbuf_wpnt>
 542:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <uart0_rbuf_wpnt+0x1>
 546:	28 17       	cp	r18, r24
 548:	39 07       	cpc	r19, r25
 54a:	d9 f0       	breq	.+54     	; 0x582 <main+0xa8>
		{
			parseData(uart0_rbuf[uart0_rbuf_rpnt++]);
 54c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <uart0_rbuf_rpnt>
 550:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <uart0_rbuf_rpnt+0x1>
 554:	9c 01       	movw	r18, r24
 556:	2f 5f       	subi	r18, 0xFF	; 255
 558:	3f 4f       	sbci	r19, 0xFF	; 255
 55a:	20 93 0c 38 	sts	0x380C, r18	; 0x80380c <uart0_rbuf_rpnt>
 55e:	30 93 0d 38 	sts	0x380D, r19	; 0x80380d <uart0_rbuf_rpnt+0x1>
 562:	fc 01       	movw	r30, r24
 564:	e0 5f       	subi	r30, 0xF0	; 240
 566:	f7 4c       	sbci	r31, 0xC7	; 199
 568:	80 81       	ld	r24, Z
 56a:	0e 94 b5 03 	call	0x76a	; 0x76a <parseData>
			if(uart0_rbuf_rpnt >= UART_BUFLEN) uart0_rbuf_rpnt = 0;
 56e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <uart0_rbuf_rpnt>
 572:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <uart0_rbuf_rpnt+0x1>
 576:	80 97       	sbiw	r24, 0x20	; 32
 578:	20 f0       	brcs	.+8      	; 0x582 <main+0xa8>
 57a:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <uart0_rbuf_rpnt>
 57e:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt+0x1>
		}
		
		if((pending_sleep_flag & PENDING_SLEEP_MASK) == 0)
 582:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <__data_end>
 586:	83 70       	andi	r24, 0x03	; 3
 588:	31 f6       	brne	.-116    	; 0x516 <main+0x3c>
		{
			adcOff();
 58a:	0e 94 b9 01 	call	0x372	; 0x372 <adcOff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58e:	8d e8       	ldi	r24, 0x8D	; 141
 590:	90 e2       	ldi	r25, 0x20	; 32
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <main+0xb8>
 596:	00 00       	nop
			_delay_ms(10);
			sleep_cpu();
 598:	88 95       	sleep
 59a:	8d e8       	ldi	r24, 0x8D	; 141
 59c:	90 e2       	ldi	r25, 0x20	; 32
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <main+0xc4>
 5a2:	00 00       	nop
			_delay_ms(10);
			adcOn();
 5a4:	0e 94 ae 01 	call	0x35c	; 0x35c <adcOn>
 5a8:	b6 cf       	rjmp	.-148    	; 0x516 <main+0x3c>

000005aa <_encapsulateData>:
void sendCmd(uint8_t cmd, uint8_t one, uint8_t two, uint8_t three, uint8_t four)
{
	uint8_t sendBuf[8] = {0,};
	_encapsulateData(sendBuf, cmd, one, two, three, four);
	if(uartSend != NULL) uartSend(sendBuf, 8);
}
 5aa:	ef 92       	push	r14
 5ac:	0f 93       	push	r16
 5ae:	fc 01       	movw	r30, r24
 5b0:	80 e8       	ldi	r24, 0x80	; 128
 5b2:	80 83       	st	Z, r24
 5b4:	61 83       	std	Z+1, r22	; 0x01
 5b6:	42 83       	std	Z+2, r20	; 0x02
 5b8:	23 83       	std	Z+3, r18	; 0x03
 5ba:	04 83       	std	Z+4, r16	; 0x04
 5bc:	e5 82       	std	Z+5, r14	; 0x05
 5be:	46 0f       	add	r20, r22
 5c0:	24 0f       	add	r18, r20
 5c2:	02 0f       	add	r16, r18
 5c4:	e0 0e       	add	r14, r16
 5c6:	e6 82       	std	Z+6, r14	; 0x06
 5c8:	86 e8       	ldi	r24, 0x86	; 134
 5ca:	87 83       	std	Z+7, r24	; 0x07
 5cc:	0f 91       	pop	r16
 5ce:	ef 90       	pop	r14
 5d0:	08 95       	ret

000005d2 <_parseDone>:
 5d2:	ef 92       	push	r14
 5d4:	0f 93       	push	r16
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	28 97       	sbiw	r28, 0x08	; 8
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	fe 01       	movw	r30, r28
 5e6:	31 96       	adiw	r30, 0x01	; 1
 5e8:	98 e0       	ldi	r25, 0x08	; 8
 5ea:	df 01       	movw	r26, r30
 5ec:	1d 92       	st	X+, r1
 5ee:	9a 95       	dec	r25
 5f0:	e9 f7       	brne	.-6      	; 0x5ec <_parseDone+0x1a>
 5f2:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <parseDoneCallBack>
 5f6:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <parseDoneCallBack+0x1>
 5fa:	30 97       	sbiw	r30, 0x00	; 0
 5fc:	11 f0       	breq	.+4      	; 0x602 <_parseDone+0x30>
 5fe:	09 95       	icall
 600:	9b c0       	rjmp	.+310    	; 0x738 <_parseDone+0x166>
 602:	98 e7       	ldi	r25, 0x78	; 120
 604:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <tx2_timeout>
 608:	89 30       	cpi	r24, 0x09	; 9
 60a:	09 f4       	brne	.+2      	; 0x60e <_parseDone+0x3c>
 60c:	3f c0       	rjmp	.+126    	; 0x68c <_parseDone+0xba>
 60e:	28 f4       	brcc	.+10     	; 0x61a <_parseDone+0x48>
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	51 f0       	breq	.+20     	; 0x628 <_parseDone+0x56>
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	09 f1       	breq	.+66     	; 0x65a <_parseDone+0x88>
 618:	8f c0       	rjmp	.+286    	; 0x738 <_parseDone+0x166>
 61a:	8b 30       	cpi	r24, 0x0B	; 11
 61c:	09 f4       	brne	.+2      	; 0x620 <_parseDone+0x4e>
 61e:	4f c0       	rjmp	.+158    	; 0x6be <_parseDone+0xec>
 620:	8d 30       	cpi	r24, 0x0D	; 13
 622:	09 f4       	brne	.+2      	; 0x626 <_parseDone+0x54>
 624:	64 c0       	rjmp	.+200    	; 0x6ee <_parseDone+0x11c>
 626:	88 c0       	rjmp	.+272    	; 0x738 <_parseDone+0x166>
 628:	e0 90 07 38 	lds	r14, 0x3807	; 0x803807 <vacc_volt>
 62c:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt+0x1>
 630:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <vbat_volt>
 634:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <vbat_volt+0x1>
 638:	62 e0       	ldi	r22, 0x02	; 2
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_encapsulateData>
 642:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <uartSend>
 646:	f0 91 3f 38 	lds	r31, 0x383F	; 0x80383f <uartSend+0x1>
 64a:	30 97       	sbiw	r30, 0x00	; 0
 64c:	09 f4       	brne	.+2      	; 0x650 <_parseDone+0x7e>
 64e:	74 c0       	rjmp	.+232    	; 0x738 <_parseDone+0x166>
 650:	68 e0       	ldi	r22, 0x08	; 8
 652:	ce 01       	movw	r24, r28
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	09 95       	icall
 658:	6f c0       	rjmp	.+222    	; 0x738 <_parseDone+0x166>
 65a:	e0 90 07 38 	lds	r14, 0x3807	; 0x803807 <vacc_volt>
 65e:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt+0x1>
 662:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <vbat_volt>
 666:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <vbat_volt+0x1>
 66a:	64 e0       	ldi	r22, 0x04	; 4
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_encapsulateData>
 674:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <uartSend>
 678:	f0 91 3f 38 	lds	r31, 0x383F	; 0x80383f <uartSend+0x1>
 67c:	30 97       	sbiw	r30, 0x00	; 0
 67e:	09 f4       	brne	.+2      	; 0x682 <_parseDone+0xb0>
 680:	5b c0       	rjmp	.+182    	; 0x738 <_parseDone+0x166>
 682:	68 e0       	ldi	r22, 0x08	; 8
 684:	ce 01       	movw	r24, r28
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	09 95       	icall
 68a:	56 c0       	rjmp	.+172    	; 0x738 <_parseDone+0x166>
 68c:	e0 90 07 38 	lds	r14, 0x3807	; 0x803807 <vacc_volt>
 690:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt+0x1>
 694:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <vbat_volt>
 698:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <vbat_volt+0x1>
 69c:	6a e0       	ldi	r22, 0x0A	; 10
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_encapsulateData>
 6a6:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <uartSend>
 6aa:	f0 91 3f 38 	lds	r31, 0x383F	; 0x80383f <uartSend+0x1>
 6ae:	30 97       	sbiw	r30, 0x00	; 0
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <_parseDone+0xe2>
 6b2:	42 c0       	rjmp	.+132    	; 0x738 <_parseDone+0x166>
 6b4:	68 e0       	ldi	r22, 0x08	; 8
 6b6:	ce 01       	movw	r24, r28
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	09 95       	icall
 6bc:	3d c0       	rjmp	.+122    	; 0x738 <_parseDone+0x166>
 6be:	e0 90 00 38 	lds	r14, 0x3800	; 0x803800 <__data_start>
 6c2:	00 91 01 38 	lds	r16, 0x3801	; 0x803801 <__data_start+0x1>
 6c6:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <vbat_threshold>
 6ca:	40 91 03 38 	lds	r20, 0x3803	; 0x803803 <vbat_threshold+0x1>
 6ce:	6c e0       	ldi	r22, 0x0C	; 12
 6d0:	ce 01       	movw	r24, r28
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_encapsulateData>
 6d8:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <uartSend>
 6dc:	f0 91 3f 38 	lds	r31, 0x383F	; 0x80383f <uartSend+0x1>
 6e0:	30 97       	sbiw	r30, 0x00	; 0
 6e2:	51 f1       	breq	.+84     	; 0x738 <_parseDone+0x166>
 6e4:	68 e0       	ldi	r22, 0x08	; 8
 6e6:	ce 01       	movw	r24, r28
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	09 95       	icall
 6ec:	25 c0       	rjmp	.+74     	; 0x738 <_parseDone+0x166>
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	76 2f       	mov	r23, r22
 6f2:	66 27       	eor	r22, r22
 6f4:	64 0f       	add	r22, r20
 6f6:	71 1d       	adc	r23, r1
 6f8:	60 93 02 38 	sts	0x3802, r22	; 0x803802 <vbat_threshold>
 6fc:	70 93 03 38 	sts	0x3803, r23	; 0x803803 <vbat_threshold+0x1>
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	32 2f       	mov	r19, r18
 704:	22 27       	eor	r18, r18
 706:	20 0f       	add	r18, r16
 708:	31 1d       	adc	r19, r1
 70a:	20 93 00 38 	sts	0x3800, r18	; 0x803800 <__data_start>
 70e:	30 93 01 38 	sts	0x3801, r19	; 0x803801 <__data_start+0x1>
 712:	e2 2e       	mov	r14, r18
 714:	03 2f       	mov	r16, r19
 716:	26 2f       	mov	r18, r22
 718:	47 2f       	mov	r20, r23
 71a:	6e e0       	ldi	r22, 0x0E	; 14
 71c:	ce 01       	movw	r24, r28
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_encapsulateData>
 724:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <uartSend>
 728:	f0 91 3f 38 	lds	r31, 0x383F	; 0x80383f <uartSend+0x1>
 72c:	30 97       	sbiw	r30, 0x00	; 0
 72e:	21 f0       	breq	.+8      	; 0x738 <_parseDone+0x166>
 730:	68 e0       	ldi	r22, 0x08	; 8
 732:	ce 01       	movw	r24, r28
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	09 95       	icall
 738:	28 96       	adiw	r28, 0x08	; 8
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	0f 91       	pop	r16
 744:	ef 90       	pop	r14
 746:	08 95       	ret

00000748 <parserInit>:
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <parserState>
 750:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <parserState+0x1>
 754:	08 95       	ret

00000756 <setParseDoneCallback>:
 756:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <parseDoneCallBack>
 75a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <parseDoneCallBack+0x1>
 75e:	08 95       	ret

00000760 <setUartSendFunc>:
 760:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <uartSend>
 764:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <uartSend+0x1>
 768:	08 95       	ret

0000076a <parseData>:

void parseData(uint8_t data)
{
 76a:	0f 93       	push	r16
 76c:	1f 93       	push	r17
	static uint8_t databuf[8] = {0,};
	static uint32_t recvdcnt = 0;
	uint8_t tmpChksum = 0;

	if(parserState)
 76e:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <parserState>
 772:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <parserState+0x1>
 776:	23 2b       	or	r18, r19
 778:	09 f4       	brne	.+2      	; 0x77c <parseData+0x12>
 77a:	58 c0       	rjmp	.+176    	; 0x82c <parseData+0xc2>
	{
		switch(uartState)
 77c:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <uartState>
 780:	99 23       	and	r25, r25
 782:	19 f0       	breq	.+6      	; 0x78a <parseData+0x20>
 784:	91 30       	cpi	r25, 0x01	; 1
 786:	b1 f0       	breq	.+44     	; 0x7b4 <parseData+0x4a>
 788:	51 c0       	rjmp	.+162    	; 0x82c <parseData+0xc2>
		{
		case UART_STATE_IDLE:
			if(data == UART_STX)
 78a:	80 38       	cpi	r24, 0x80	; 128
 78c:	09 f0       	breq	.+2      	; 0x790 <parseData+0x26>
 78e:	4e c0       	rjmp	.+156    	; 0x82c <parseData+0xc2>
			{
				recvdcnt = 0;
				uartState = UART_STATE_RECEIVING;
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <uartState>
				databuf[recvdcnt++] = data;
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	50 e0       	ldi	r21, 0x00	; 0
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	40 93 38 38 	sts	0x3838, r20	; 0x803838 <recvdcnt.1700>
 7a2:	50 93 39 38 	sts	0x3839, r21	; 0x803839 <recvdcnt.1700+0x1>
 7a6:	60 93 3a 38 	sts	0x383A, r22	; 0x80383a <recvdcnt.1700+0x2>
 7aa:	70 93 3b 38 	sts	0x383B, r23	; 0x80383b <recvdcnt.1700+0x3>
 7ae:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <databuf.1699>
 7b2:	3c c0       	rjmp	.+120    	; 0x82c <parseData+0xc2>
			}
			break;
		case UART_STATE_RECEIVING:
			if(recvdcnt < 8)
 7b4:	40 91 38 38 	lds	r20, 0x3838	; 0x803838 <recvdcnt.1700>
 7b8:	50 91 39 38 	lds	r21, 0x3839	; 0x803839 <recvdcnt.1700+0x1>
 7bc:	60 91 3a 38 	lds	r22, 0x383A	; 0x80383a <recvdcnt.1700+0x2>
 7c0:	70 91 3b 38 	lds	r23, 0x383B	; 0x80383b <recvdcnt.1700+0x3>
 7c4:	48 30       	cpi	r20, 0x08	; 8
 7c6:	51 05       	cpc	r21, r1
 7c8:	61 05       	cpc	r22, r1
 7ca:	71 05       	cpc	r23, r1
 7cc:	68 f5       	brcc	.+90     	; 0x828 <parseData+0xbe>
			{
				databuf[recvdcnt++] = data;
 7ce:	8a 01       	movw	r16, r20
 7d0:	9b 01       	movw	r18, r22
 7d2:	0f 5f       	subi	r16, 0xFF	; 255
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	2f 4f       	sbci	r18, 0xFF	; 255
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
 7da:	00 93 38 38 	sts	0x3838, r16	; 0x803838 <recvdcnt.1700>
 7de:	10 93 39 38 	sts	0x3839, r17	; 0x803839 <recvdcnt.1700+0x1>
 7e2:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <recvdcnt.1700+0x2>
 7e6:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <recvdcnt.1700+0x3>
 7ea:	fa 01       	movw	r30, r20
 7ec:	e0 5d       	subi	r30, 0xD0	; 208
 7ee:	f7 4c       	sbci	r31, 0xC7	; 199
 7f0:	80 83       	st	Z, r24
				if(recvdcnt == 8)
 7f2:	08 30       	cpi	r16, 0x08	; 8
 7f4:	11 05       	cpc	r17, r1
 7f6:	21 05       	cpc	r18, r1
 7f8:	31 05       	cpc	r19, r1
 7fa:	c1 f4       	brne	.+48     	; 0x82c <parseData+0xc2>
				{
					if(data == UART_ETX)
 7fc:	86 38       	cpi	r24, 0x86	; 134
 7fe:	89 f4       	brne	.+34     	; 0x822 <parseData+0xb8>
					{
						tmpChksum = databuf[1] + databuf[2] + databuf[3] + databuf[4] + databuf[5];
 800:	e0 e3       	ldi	r30, 0x30	; 48
 802:	f8 e3       	ldi	r31, 0x38	; 56
 804:	81 81       	ldd	r24, Z+1	; 0x01
 806:	62 81       	ldd	r22, Z+2	; 0x02
 808:	43 81       	ldd	r20, Z+3	; 0x03
 80a:	24 81       	ldd	r18, Z+4	; 0x04
 80c:	05 81       	ldd	r16, Z+5	; 0x05
 80e:	98 2f       	mov	r25, r24
 810:	96 0f       	add	r25, r22
 812:	94 0f       	add	r25, r20
 814:	92 0f       	add	r25, r18
 816:	90 0f       	add	r25, r16
						if(tmpChksum == databuf[6])
 818:	36 81       	ldd	r19, Z+6	; 0x06
 81a:	93 13       	cpse	r25, r19
 81c:	02 c0       	rjmp	.+4      	; 0x822 <parseData+0xb8>
						{
							_parseDone(databuf[1], databuf[2], databuf[3], databuf[4], databuf[5]);
 81e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_parseDone>
						}
					}
					//recvdcnt = 0;
					uartState = UART_STATE_IDLE;
 822:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <uartState>
 826:	02 c0       	rjmp	.+4      	; 0x82c <parseData+0xc2>
			}
			else
			{
				// Highly unlikely case
				//recvdcnt = 0;
				uartState = UART_STATE_IDLE;
 828:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <uartState>
			break;
		default:
			break;
		}
	}
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	08 95       	ret

00000832 <incTick>:

static uint8_t nowtick = 0;

inline void incTick(void)
{
	nowtick++;
 832:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <nowtick>
 836:	8f 5f       	subi	r24, 0xFF	; 255
 838:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <nowtick>
 83c:	08 95       	ret

0000083e <__subsf3>:
 83e:	50 58       	subi	r21, 0x80	; 128

00000840 <__addsf3>:
 840:	bb 27       	eor	r27, r27
 842:	aa 27       	eor	r26, r26
 844:	0e 94 37 04 	call	0x86e	; 0x86e <__addsf3x>
 848:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_round>
 84c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
 850:	38 f0       	brcs	.+14     	; 0x860 <__addsf3+0x20>
 852:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
 856:	20 f0       	brcs	.+8      	; 0x860 <__addsf3+0x20>
 858:	39 f4       	brne	.+14     	; 0x868 <__addsf3+0x28>
 85a:	9f 3f       	cpi	r25, 0xFF	; 255
 85c:	19 f4       	brne	.+6      	; 0x864 <__addsf3+0x24>
 85e:	26 f4       	brtc	.+8      	; 0x868 <__addsf3+0x28>
 860:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>
 864:	0e f4       	brtc	.+2      	; 0x868 <__addsf3+0x28>
 866:	e0 95       	com	r30
 868:	e7 fb       	bst	r30, 7
 86a:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>

0000086e <__addsf3x>:
 86e:	e9 2f       	mov	r30, r25
 870:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_split3>
 874:	58 f3       	brcs	.-42     	; 0x84c <__addsf3+0xc>
 876:	ba 17       	cp	r27, r26
 878:	62 07       	cpc	r22, r18
 87a:	73 07       	cpc	r23, r19
 87c:	84 07       	cpc	r24, r20
 87e:	95 07       	cpc	r25, r21
 880:	20 f0       	brcs	.+8      	; 0x88a <__addsf3x+0x1c>
 882:	79 f4       	brne	.+30     	; 0x8a2 <__addsf3x+0x34>
 884:	a6 f5       	brtc	.+104    	; 0x8ee <__addsf3x+0x80>
 886:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_zero>
 88a:	0e f4       	brtc	.+2      	; 0x88e <__addsf3x+0x20>
 88c:	e0 95       	com	r30
 88e:	0b 2e       	mov	r0, r27
 890:	ba 2f       	mov	r27, r26
 892:	a0 2d       	mov	r26, r0
 894:	0b 01       	movw	r0, r22
 896:	b9 01       	movw	r22, r18
 898:	90 01       	movw	r18, r0
 89a:	0c 01       	movw	r0, r24
 89c:	ca 01       	movw	r24, r20
 89e:	a0 01       	movw	r20, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	ff 27       	eor	r31, r31
 8a4:	59 1b       	sub	r21, r25
 8a6:	99 f0       	breq	.+38     	; 0x8ce <__addsf3x+0x60>
 8a8:	59 3f       	cpi	r21, 0xF9	; 249
 8aa:	50 f4       	brcc	.+20     	; 0x8c0 <__addsf3x+0x52>
 8ac:	50 3e       	cpi	r21, 0xE0	; 224
 8ae:	68 f1       	brcs	.+90     	; 0x90a <__addsf3x+0x9c>
 8b0:	1a 16       	cp	r1, r26
 8b2:	f0 40       	sbci	r31, 0x00	; 0
 8b4:	a2 2f       	mov	r26, r18
 8b6:	23 2f       	mov	r18, r19
 8b8:	34 2f       	mov	r19, r20
 8ba:	44 27       	eor	r20, r20
 8bc:	58 5f       	subi	r21, 0xF8	; 248
 8be:	f3 cf       	rjmp	.-26     	; 0x8a6 <__addsf3x+0x38>
 8c0:	46 95       	lsr	r20
 8c2:	37 95       	ror	r19
 8c4:	27 95       	ror	r18
 8c6:	a7 95       	ror	r26
 8c8:	f0 40       	sbci	r31, 0x00	; 0
 8ca:	53 95       	inc	r21
 8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__addsf3x+0x52>
 8ce:	7e f4       	brtc	.+30     	; 0x8ee <__addsf3x+0x80>
 8d0:	1f 16       	cp	r1, r31
 8d2:	ba 0b       	sbc	r27, r26
 8d4:	62 0b       	sbc	r22, r18
 8d6:	73 0b       	sbc	r23, r19
 8d8:	84 0b       	sbc	r24, r20
 8da:	ba f0       	brmi	.+46     	; 0x90a <__addsf3x+0x9c>
 8dc:	91 50       	subi	r25, 0x01	; 1
 8de:	a1 f0       	breq	.+40     	; 0x908 <__addsf3x+0x9a>
 8e0:	ff 0f       	add	r31, r31
 8e2:	bb 1f       	adc	r27, r27
 8e4:	66 1f       	adc	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	c2 f7       	brpl	.-16     	; 0x8dc <__addsf3x+0x6e>
 8ec:	0e c0       	rjmp	.+28     	; 0x90a <__addsf3x+0x9c>
 8ee:	ba 0f       	add	r27, r26
 8f0:	62 1f       	adc	r22, r18
 8f2:	73 1f       	adc	r23, r19
 8f4:	84 1f       	adc	r24, r20
 8f6:	48 f4       	brcc	.+18     	; 0x90a <__addsf3x+0x9c>
 8f8:	87 95       	ror	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f7 95       	ror	r31
 902:	9e 3f       	cpi	r25, 0xFE	; 254
 904:	08 f0       	brcs	.+2      	; 0x908 <__addsf3x+0x9a>
 906:	b0 cf       	rjmp	.-160    	; 0x868 <__addsf3+0x28>
 908:	93 95       	inc	r25
 90a:	88 0f       	add	r24, r24
 90c:	08 f0       	brcs	.+2      	; 0x910 <__addsf3x+0xa2>
 90e:	99 27       	eor	r25, r25
 910:	ee 0f       	add	r30, r30
 912:	97 95       	ror	r25
 914:	87 95       	ror	r24
 916:	08 95       	ret

00000918 <__divsf3>:
 918:	0e 94 a0 04 	call	0x940	; 0x940 <__divsf3x>
 91c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_round>
 920:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
 924:	58 f0       	brcs	.+22     	; 0x93c <__divsf3+0x24>
 926:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
 92a:	40 f0       	brcs	.+16     	; 0x93c <__divsf3+0x24>
 92c:	29 f4       	brne	.+10     	; 0x938 <__divsf3+0x20>
 92e:	5f 3f       	cpi	r21, 0xFF	; 255
 930:	29 f0       	breq	.+10     	; 0x93c <__divsf3+0x24>
 932:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 936:	51 11       	cpse	r21, r1
 938:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
 93c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>

00000940 <__divsf3x>:
 940:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_split3>
 944:	68 f3       	brcs	.-38     	; 0x920 <__divsf3+0x8>

00000946 <__divsf3_pse>:
 946:	99 23       	and	r25, r25
 948:	b1 f3       	breq	.-20     	; 0x936 <__divsf3+0x1e>
 94a:	55 23       	and	r21, r21
 94c:	91 f3       	breq	.-28     	; 0x932 <__divsf3+0x1a>
 94e:	95 1b       	sub	r25, r21
 950:	55 0b       	sbc	r21, r21
 952:	bb 27       	eor	r27, r27
 954:	aa 27       	eor	r26, r26
 956:	62 17       	cp	r22, r18
 958:	73 07       	cpc	r23, r19
 95a:	84 07       	cpc	r24, r20
 95c:	38 f0       	brcs	.+14     	; 0x96c <__divsf3_pse+0x26>
 95e:	9f 5f       	subi	r25, 0xFF	; 255
 960:	5f 4f       	sbci	r21, 0xFF	; 255
 962:	22 0f       	add	r18, r18
 964:	33 1f       	adc	r19, r19
 966:	44 1f       	adc	r20, r20
 968:	aa 1f       	adc	r26, r26
 96a:	a9 f3       	breq	.-22     	; 0x956 <__divsf3_pse+0x10>
 96c:	35 d0       	rcall	.+106    	; 0x9d8 <__divsf3_pse+0x92>
 96e:	0e 2e       	mov	r0, r30
 970:	3a f0       	brmi	.+14     	; 0x980 <__divsf3_pse+0x3a>
 972:	e0 e8       	ldi	r30, 0x80	; 128
 974:	32 d0       	rcall	.+100    	; 0x9da <__divsf3_pse+0x94>
 976:	91 50       	subi	r25, 0x01	; 1
 978:	50 40       	sbci	r21, 0x00	; 0
 97a:	e6 95       	lsr	r30
 97c:	00 1c       	adc	r0, r0
 97e:	ca f7       	brpl	.-14     	; 0x972 <__divsf3_pse+0x2c>
 980:	2b d0       	rcall	.+86     	; 0x9d8 <__divsf3_pse+0x92>
 982:	fe 2f       	mov	r31, r30
 984:	29 d0       	rcall	.+82     	; 0x9d8 <__divsf3_pse+0x92>
 986:	66 0f       	add	r22, r22
 988:	77 1f       	adc	r23, r23
 98a:	88 1f       	adc	r24, r24
 98c:	bb 1f       	adc	r27, r27
 98e:	26 17       	cp	r18, r22
 990:	37 07       	cpc	r19, r23
 992:	48 07       	cpc	r20, r24
 994:	ab 07       	cpc	r26, r27
 996:	b0 e8       	ldi	r27, 0x80	; 128
 998:	09 f0       	breq	.+2      	; 0x99c <__divsf3_pse+0x56>
 99a:	bb 0b       	sbc	r27, r27
 99c:	80 2d       	mov	r24, r0
 99e:	bf 01       	movw	r22, r30
 9a0:	ff 27       	eor	r31, r31
 9a2:	93 58       	subi	r25, 0x83	; 131
 9a4:	5f 4f       	sbci	r21, 0xFF	; 255
 9a6:	3a f0       	brmi	.+14     	; 0x9b6 <__divsf3_pse+0x70>
 9a8:	9e 3f       	cpi	r25, 0xFE	; 254
 9aa:	51 05       	cpc	r21, r1
 9ac:	78 f0       	brcs	.+30     	; 0x9cc <__divsf3_pse+0x86>
 9ae:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 9b2:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
 9b6:	5f 3f       	cpi	r21, 0xFF	; 255
 9b8:	e4 f3       	brlt	.-8      	; 0x9b2 <__divsf3_pse+0x6c>
 9ba:	98 3e       	cpi	r25, 0xE8	; 232
 9bc:	d4 f3       	brlt	.-12     	; 0x9b2 <__divsf3_pse+0x6c>
 9be:	86 95       	lsr	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	b7 95       	ror	r27
 9c6:	f7 95       	ror	r31
 9c8:	9f 5f       	subi	r25, 0xFF	; 255
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__divsf3_pse+0x78>
 9cc:	88 0f       	add	r24, r24
 9ce:	91 1d       	adc	r25, r1
 9d0:	96 95       	lsr	r25
 9d2:	87 95       	ror	r24
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret
 9d8:	e1 e0       	ldi	r30, 0x01	; 1
 9da:	66 0f       	add	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	bb 1f       	adc	r27, r27
 9e2:	62 17       	cp	r22, r18
 9e4:	73 07       	cpc	r23, r19
 9e6:	84 07       	cpc	r24, r20
 9e8:	ba 07       	cpc	r27, r26
 9ea:	20 f0       	brcs	.+8      	; 0x9f4 <__divsf3_pse+0xae>
 9ec:	62 1b       	sub	r22, r18
 9ee:	73 0b       	sbc	r23, r19
 9f0:	84 0b       	sbc	r24, r20
 9f2:	ba 0b       	sbc	r27, r26
 9f4:	ee 1f       	adc	r30, r30
 9f6:	88 f7       	brcc	.-30     	; 0x9da <__divsf3_pse+0x94>
 9f8:	e0 95       	com	r30
 9fa:	08 95       	ret

000009fc <__fixsfsi>:
 9fc:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 a00:	68 94       	set
 a02:	b1 11       	cpse	r27, r1
 a04:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
 a08:	08 95       	ret

00000a0a <__fixunssfsi>:
 a0a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_splitA>
 a0e:	88 f0       	brcs	.+34     	; 0xa32 <__fixunssfsi+0x28>
 a10:	9f 57       	subi	r25, 0x7F	; 127
 a12:	98 f0       	brcs	.+38     	; 0xa3a <__fixunssfsi+0x30>
 a14:	b9 2f       	mov	r27, r25
 a16:	99 27       	eor	r25, r25
 a18:	b7 51       	subi	r27, 0x17	; 23
 a1a:	b0 f0       	brcs	.+44     	; 0xa48 <__fixunssfsi+0x3e>
 a1c:	e1 f0       	breq	.+56     	; 0xa56 <__fixunssfsi+0x4c>
 a1e:	66 0f       	add	r22, r22
 a20:	77 1f       	adc	r23, r23
 a22:	88 1f       	adc	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	1a f0       	brmi	.+6      	; 0xa2e <__fixunssfsi+0x24>
 a28:	ba 95       	dec	r27
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__fixunssfsi+0x14>
 a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__fixunssfsi+0x4c>
 a2e:	b1 30       	cpi	r27, 0x01	; 1
 a30:	91 f0       	breq	.+36     	; 0xa56 <__fixunssfsi+0x4c>
 a32:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fp_zero>
 a36:	b1 e0       	ldi	r27, 0x01	; 1
 a38:	08 95       	ret
 a3a:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_zero>
 a3e:	67 2f       	mov	r22, r23
 a40:	78 2f       	mov	r23, r24
 a42:	88 27       	eor	r24, r24
 a44:	b8 5f       	subi	r27, 0xF8	; 248
 a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x4c>
 a48:	b9 3f       	cpi	r27, 0xF9	; 249
 a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x34>
 a4c:	86 95       	lsr	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	b3 95       	inc	r27
 a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x42>
 a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x5c>
 a58:	90 95       	com	r25
 a5a:	80 95       	com	r24
 a5c:	70 95       	com	r23
 a5e:	61 95       	neg	r22
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	08 95       	ret

00000a68 <__floatunsisf>:
 a68:	e8 94       	clt
 a6a:	09 c0       	rjmp	.+18     	; 0xa7e <__floatsisf+0x12>

00000a6c <__floatsisf>:
 a6c:	97 fb       	bst	r25, 7
 a6e:	3e f4       	brtc	.+14     	; 0xa7e <__floatsisf+0x12>
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	99 23       	and	r25, r25
 a80:	a9 f0       	breq	.+42     	; 0xaac <__floatsisf+0x40>
 a82:	f9 2f       	mov	r31, r25
 a84:	96 e9       	ldi	r25, 0x96	; 150
 a86:	bb 27       	eor	r27, r27
 a88:	93 95       	inc	r25
 a8a:	f6 95       	lsr	r31
 a8c:	87 95       	ror	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	b7 95       	ror	r27
 a94:	f1 11       	cpse	r31, r1
 a96:	f8 cf       	rjmp	.-16     	; 0xa88 <__floatsisf+0x1c>
 a98:	fa f4       	brpl	.+62     	; 0xad8 <__floatsisf+0x6c>
 a9a:	bb 0f       	add	r27, r27
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__floatsisf+0x36>
 a9e:	60 ff       	sbrs	r22, 0
 aa0:	1b c0       	rjmp	.+54     	; 0xad8 <__floatsisf+0x6c>
 aa2:	6f 5f       	subi	r22, 0xFF	; 255
 aa4:	7f 4f       	sbci	r23, 0xFF	; 255
 aa6:	8f 4f       	sbci	r24, 0xFF	; 255
 aa8:	9f 4f       	sbci	r25, 0xFF	; 255
 aaa:	16 c0       	rjmp	.+44     	; 0xad8 <__floatsisf+0x6c>
 aac:	88 23       	and	r24, r24
 aae:	11 f0       	breq	.+4      	; 0xab4 <__floatsisf+0x48>
 ab0:	96 e9       	ldi	r25, 0x96	; 150
 ab2:	11 c0       	rjmp	.+34     	; 0xad6 <__floatsisf+0x6a>
 ab4:	77 23       	and	r23, r23
 ab6:	21 f0       	breq	.+8      	; 0xac0 <__floatsisf+0x54>
 ab8:	9e e8       	ldi	r25, 0x8E	; 142
 aba:	87 2f       	mov	r24, r23
 abc:	76 2f       	mov	r23, r22
 abe:	05 c0       	rjmp	.+10     	; 0xaca <__floatsisf+0x5e>
 ac0:	66 23       	and	r22, r22
 ac2:	71 f0       	breq	.+28     	; 0xae0 <__floatsisf+0x74>
 ac4:	96 e8       	ldi	r25, 0x86	; 134
 ac6:	86 2f       	mov	r24, r22
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	60 e0       	ldi	r22, 0x00	; 0
 acc:	2a f0       	brmi	.+10     	; 0xad8 <__floatsisf+0x6c>
 ace:	9a 95       	dec	r25
 ad0:	66 0f       	add	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	da f7       	brpl	.-10     	; 0xace <__floatsisf+0x62>
 ad8:	88 0f       	add	r24, r24
 ada:	96 95       	lsr	r25
 adc:	87 95       	ror	r24
 ade:	97 f9       	bld	r25, 7
 ae0:	08 95       	ret

00000ae2 <__fp_inf>:
 ae2:	97 f9       	bld	r25, 7
 ae4:	9f 67       	ori	r25, 0x7F	; 127
 ae6:	80 e8       	ldi	r24, 0x80	; 128
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	08 95       	ret

00000aee <__fp_nan>:
 aee:	9f ef       	ldi	r25, 0xFF	; 255
 af0:	80 ec       	ldi	r24, 0xC0	; 192
 af2:	08 95       	ret

00000af4 <__fp_pscA>:
 af4:	00 24       	eor	r0, r0
 af6:	0a 94       	dec	r0
 af8:	16 16       	cp	r1, r22
 afa:	17 06       	cpc	r1, r23
 afc:	18 06       	cpc	r1, r24
 afe:	09 06       	cpc	r0, r25
 b00:	08 95       	ret

00000b02 <__fp_pscB>:
 b02:	00 24       	eor	r0, r0
 b04:	0a 94       	dec	r0
 b06:	12 16       	cp	r1, r18
 b08:	13 06       	cpc	r1, r19
 b0a:	14 06       	cpc	r1, r20
 b0c:	05 06       	cpc	r0, r21
 b0e:	08 95       	ret

00000b10 <__fp_round>:
 b10:	09 2e       	mov	r0, r25
 b12:	03 94       	inc	r0
 b14:	00 0c       	add	r0, r0
 b16:	11 f4       	brne	.+4      	; 0xb1c <__fp_round+0xc>
 b18:	88 23       	and	r24, r24
 b1a:	52 f0       	brmi	.+20     	; 0xb30 <__fp_round+0x20>
 b1c:	bb 0f       	add	r27, r27
 b1e:	40 f4       	brcc	.+16     	; 0xb30 <__fp_round+0x20>
 b20:	bf 2b       	or	r27, r31
 b22:	11 f4       	brne	.+4      	; 0xb28 <__fp_round+0x18>
 b24:	60 ff       	sbrs	r22, 0
 b26:	04 c0       	rjmp	.+8      	; 0xb30 <__fp_round+0x20>
 b28:	6f 5f       	subi	r22, 0xFF	; 255
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	8f 4f       	sbci	r24, 0xFF	; 255
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255
 b30:	08 95       	ret

00000b32 <__fp_split3>:
 b32:	57 fd       	sbrc	r21, 7
 b34:	90 58       	subi	r25, 0x80	; 128
 b36:	44 0f       	add	r20, r20
 b38:	55 1f       	adc	r21, r21
 b3a:	59 f0       	breq	.+22     	; 0xb52 <__fp_splitA+0x10>
 b3c:	5f 3f       	cpi	r21, 0xFF	; 255
 b3e:	71 f0       	breq	.+28     	; 0xb5c <__fp_splitA+0x1a>
 b40:	47 95       	ror	r20

00000b42 <__fp_splitA>:
 b42:	88 0f       	add	r24, r24
 b44:	97 fb       	bst	r25, 7
 b46:	99 1f       	adc	r25, r25
 b48:	61 f0       	breq	.+24     	; 0xb62 <__fp_splitA+0x20>
 b4a:	9f 3f       	cpi	r25, 0xFF	; 255
 b4c:	79 f0       	breq	.+30     	; 0xb6c <__fp_splitA+0x2a>
 b4e:	87 95       	ror	r24
 b50:	08 95       	ret
 b52:	12 16       	cp	r1, r18
 b54:	13 06       	cpc	r1, r19
 b56:	14 06       	cpc	r1, r20
 b58:	55 1f       	adc	r21, r21
 b5a:	f2 cf       	rjmp	.-28     	; 0xb40 <__fp_split3+0xe>
 b5c:	46 95       	lsr	r20
 b5e:	f1 df       	rcall	.-30     	; 0xb42 <__fp_splitA>
 b60:	08 c0       	rjmp	.+16     	; 0xb72 <__fp_splitA+0x30>
 b62:	16 16       	cp	r1, r22
 b64:	17 06       	cpc	r1, r23
 b66:	18 06       	cpc	r1, r24
 b68:	99 1f       	adc	r25, r25
 b6a:	f1 cf       	rjmp	.-30     	; 0xb4e <__fp_splitA+0xc>
 b6c:	86 95       	lsr	r24
 b6e:	71 05       	cpc	r23, r1
 b70:	61 05       	cpc	r22, r1
 b72:	08 94       	sec
 b74:	08 95       	ret

00000b76 <__fp_zero>:
 b76:	e8 94       	clt

00000b78 <__fp_szero>:
 b78:	bb 27       	eor	r27, r27
 b7a:	66 27       	eor	r22, r22
 b7c:	77 27       	eor	r23, r23
 b7e:	cb 01       	movw	r24, r22
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret

00000b84 <__mulsf3>:
 b84:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__mulsf3x>
 b88:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_round>
 b8c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
 b90:	38 f0       	brcs	.+14     	; 0xba0 <__mulsf3+0x1c>
 b92:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
 b96:	20 f0       	brcs	.+8      	; 0xba0 <__mulsf3+0x1c>
 b98:	95 23       	and	r25, r21
 b9a:	11 f0       	breq	.+4      	; 0xba0 <__mulsf3+0x1c>
 b9c:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 ba0:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>
 ba4:	11 24       	eor	r1, r1
 ba6:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>

00000baa <__mulsf3x>:
 baa:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_split3>
 bae:	70 f3       	brcs	.-36     	; 0xb8c <__mulsf3+0x8>

00000bb0 <__mulsf3_pse>:
 bb0:	95 9f       	mul	r25, r21
 bb2:	c1 f3       	breq	.-16     	; 0xba4 <__mulsf3+0x20>
 bb4:	95 0f       	add	r25, r21
 bb6:	50 e0       	ldi	r21, 0x00	; 0
 bb8:	55 1f       	adc	r21, r21
 bba:	62 9f       	mul	r22, r18
 bbc:	f0 01       	movw	r30, r0
 bbe:	72 9f       	mul	r23, r18
 bc0:	bb 27       	eor	r27, r27
 bc2:	f0 0d       	add	r31, r0
 bc4:	b1 1d       	adc	r27, r1
 bc6:	63 9f       	mul	r22, r19
 bc8:	aa 27       	eor	r26, r26
 bca:	f0 0d       	add	r31, r0
 bcc:	b1 1d       	adc	r27, r1
 bce:	aa 1f       	adc	r26, r26
 bd0:	64 9f       	mul	r22, r20
 bd2:	66 27       	eor	r22, r22
 bd4:	b0 0d       	add	r27, r0
 bd6:	a1 1d       	adc	r26, r1
 bd8:	66 1f       	adc	r22, r22
 bda:	82 9f       	mul	r24, r18
 bdc:	22 27       	eor	r18, r18
 bde:	b0 0d       	add	r27, r0
 be0:	a1 1d       	adc	r26, r1
 be2:	62 1f       	adc	r22, r18
 be4:	73 9f       	mul	r23, r19
 be6:	b0 0d       	add	r27, r0
 be8:	a1 1d       	adc	r26, r1
 bea:	62 1f       	adc	r22, r18
 bec:	83 9f       	mul	r24, r19
 bee:	a0 0d       	add	r26, r0
 bf0:	61 1d       	adc	r22, r1
 bf2:	22 1f       	adc	r18, r18
 bf4:	74 9f       	mul	r23, r20
 bf6:	33 27       	eor	r19, r19
 bf8:	a0 0d       	add	r26, r0
 bfa:	61 1d       	adc	r22, r1
 bfc:	23 1f       	adc	r18, r19
 bfe:	84 9f       	mul	r24, r20
 c00:	60 0d       	add	r22, r0
 c02:	21 1d       	adc	r18, r1
 c04:	82 2f       	mov	r24, r18
 c06:	76 2f       	mov	r23, r22
 c08:	6a 2f       	mov	r22, r26
 c0a:	11 24       	eor	r1, r1
 c0c:	9f 57       	subi	r25, 0x7F	; 127
 c0e:	50 40       	sbci	r21, 0x00	; 0
 c10:	9a f0       	brmi	.+38     	; 0xc38 <__mulsf3_pse+0x88>
 c12:	f1 f0       	breq	.+60     	; 0xc50 <__mulsf3_pse+0xa0>
 c14:	88 23       	and	r24, r24
 c16:	4a f0       	brmi	.+18     	; 0xc2a <__mulsf3_pse+0x7a>
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	bb 1f       	adc	r27, r27
 c1e:	66 1f       	adc	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	91 50       	subi	r25, 0x01	; 1
 c26:	50 40       	sbci	r21, 0x00	; 0
 c28:	a9 f7       	brne	.-22     	; 0xc14 <__mulsf3_pse+0x64>
 c2a:	9e 3f       	cpi	r25, 0xFE	; 254
 c2c:	51 05       	cpc	r21, r1
 c2e:	80 f0       	brcs	.+32     	; 0xc50 <__mulsf3_pse+0xa0>
 c30:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 c34:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
 c38:	5f 3f       	cpi	r21, 0xFF	; 255
 c3a:	e4 f3       	brlt	.-8      	; 0xc34 <__mulsf3_pse+0x84>
 c3c:	98 3e       	cpi	r25, 0xE8	; 232
 c3e:	d4 f3       	brlt	.-12     	; 0xc34 <__mulsf3_pse+0x84>
 c40:	86 95       	lsr	r24
 c42:	77 95       	ror	r23
 c44:	67 95       	ror	r22
 c46:	b7 95       	ror	r27
 c48:	f7 95       	ror	r31
 c4a:	e7 95       	ror	r30
 c4c:	9f 5f       	subi	r25, 0xFF	; 255
 c4e:	c1 f7       	brne	.-16     	; 0xc40 <__mulsf3_pse+0x90>
 c50:	fe 2b       	or	r31, r30
 c52:	88 0f       	add	r24, r24
 c54:	91 1d       	adc	r25, r1
 c56:	96 95       	lsr	r25
 c58:	87 95       	ror	r24
 c5a:	97 f9       	bld	r25, 7
 c5c:	08 95       	ret

00000c5e <__mulshisi3>:
 c5e:	b7 ff       	sbrs	r27, 7
 c60:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__muluhisi3>

00000c64 <__mulohisi3>:
 c64:	0e 94 37 06 	call	0xc6e	; 0xc6e <__muluhisi3>
 c68:	82 1b       	sub	r24, r18
 c6a:	93 0b       	sbc	r25, r19
 c6c:	08 95       	ret

00000c6e <__muluhisi3>:
 c6e:	0e 94 42 06 	call	0xc84	; 0xc84 <__umulhisi3>
 c72:	a5 9f       	mul	r26, r21
 c74:	90 0d       	add	r25, r0
 c76:	b4 9f       	mul	r27, r20
 c78:	90 0d       	add	r25, r0
 c7a:	a4 9f       	mul	r26, r20
 c7c:	80 0d       	add	r24, r0
 c7e:	91 1d       	adc	r25, r1
 c80:	11 24       	eor	r1, r1
 c82:	08 95       	ret

00000c84 <__umulhisi3>:
 c84:	a2 9f       	mul	r26, r18
 c86:	b0 01       	movw	r22, r0
 c88:	b3 9f       	mul	r27, r19
 c8a:	c0 01       	movw	r24, r0
 c8c:	a3 9f       	mul	r26, r19
 c8e:	70 0d       	add	r23, r0
 c90:	81 1d       	adc	r24, r1
 c92:	11 24       	eor	r1, r1
 c94:	91 1d       	adc	r25, r1
 c96:	b2 9f       	mul	r27, r18
 c98:	70 0d       	add	r23, r0
 c9a:	81 1d       	adc	r24, r1
 c9c:	11 24       	eor	r1, r1
 c9e:	91 1d       	adc	r25, r1
 ca0:	08 95       	ret

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
