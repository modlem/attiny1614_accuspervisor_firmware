
attiny1614_accsupervisor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803800  00000da0  00000e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00803806  00803806  00000e3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036be  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cbd  00000000  00000000  000046aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bdc  00000000  00000000  00006367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00006f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c1c  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6a  00000000  00000000  00008e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00009af6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_7>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  68:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_27>
  70:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  7c:	21 03       	mulsu	r18, r17
  7e:	d7 03       	fmuls	r21, r23
  80:	3a 03       	fmul	r19, r18
  82:	d7 03       	fmuls	r21, r23
  84:	d7 03       	fmuls	r21, r23
  86:	d7 03       	fmuls	r21, r23
  88:	d7 03       	fmuls	r21, r23
  8a:	d7 03       	fmuls	r21, r23
  8c:	53 03       	mulsu	r21, r19
  8e:	d7 03       	fmuls	r21, r23
  90:	6c 03       	fmul	r22, r20
  92:	d7 03       	fmuls	r21, r23
  94:	85 03       	fmuls	r16, r21
  96:	d7 03       	fmuls	r21, r23
  98:	d7 03       	fmuls	r21, r23
  9a:	d7 03       	fmuls	r21, r23
  9c:	ab 03       	fmulsu	r18, r19
  9e:	d7 03       	fmuls	r21, r23
  a0:	c2 03       	fmuls	r20, r18

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	df e3       	ldi	r29, 0x3F	; 63
  ac:	de bf       	out	0x3e, r29	; 62

000000ae <__do_copy_data>:
  ae:	18 e3       	ldi	r17, 0x38	; 56
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b8 e3       	ldi	r27, 0x38	; 56
  b4:	e0 ea       	ldi	r30, 0xA0	; 160
  b6:	fd e0       	ldi	r31, 0x0D	; 13
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a6 30       	cpi	r26, 0x06	; 6
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
  c4:	28 e3       	ldi	r18, 0x38	; 56
  c6:	a6 e0       	ldi	r26, 0x06	; 6
  c8:	b8 e3       	ldi	r27, 0x38	; 56
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a6 34       	cpi	r26, 0x46	; 70
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
  d8:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <__vector_7>:
}

int isAdcOn()
{
	return _gpio_status & GPIO_ADC_MASK;
}
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
 108:	0e 94 8d 04 	call	0x91a	; 0x91a <incTick>
 10c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 110:	88 23       	and	r24, r24
 112:	29 f0       	breq	.+10     	; 0x11e <__vector_7+0x3e>
 114:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_27>:
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
 156:	1f c0       	rjmp	.+62     	; 0x196 <__vector_27+0x56>
 158:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 15c:	81 fd       	sbrc	r24, 1
 15e:	1b c0       	rjmp	.+54     	; 0x196 <__vector_27+0x56>
 160:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 164:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 168:	9c 01       	movw	r18, r24
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	20 93 0f 38 	sts	0x380F, r18	; 0x80380f <uart0_rbuf_wpnt>
 172:	30 93 10 38 	sts	0x3810, r19	; 0x803810 <uart0_rbuf_wpnt+0x1>
 176:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 17a:	fc 01       	movw	r30, r24
 17c:	ef 5e       	subi	r30, 0xEF	; 239
 17e:	f7 4c       	sbci	r31, 0xC7	; 199
 180:	20 83       	st	Z, r18
 182:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 186:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 18a:	80 97       	sbiw	r24, 0x20	; 32
 18c:	20 f0       	brcs	.+8      	; 0x196 <__vector_27+0x56>
 18e:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <uart0_rbuf_wpnt>
 192:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <uart0_rbuf_wpnt+0x1>
 196:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 19a:	88 23       	and	r24, r24
 19c:	ec f2       	brlt	.-70     	; 0x158 <__vector_27+0x18>
 19e:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 1a2:	30 91 0e 38 	lds	r19, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1a6:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 1aa:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	99 f4       	brne	.+38     	; 0x1da <__vector_27+0x9a>
 1b4:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 1b8:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <uart0_rbuf_rpnt>
 1c2:	90 93 0e 38 	sts	0x380E, r25	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1c6:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 1ca:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1ce:	80 97       	sbiw	r24, 0x20	; 32
 1d0:	20 f0       	brcs	.+8      	; 0x1da <__vector_27+0x9a>
 1d2:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt>
 1d6:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <RTC_init>:
 1f0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
 1f4:	81 11       	cpse	r24, r1
 1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <RTC_init>
 1f8:	e0 e4       	ldi	r30, 0x40	; 64
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	87 83       	std	Z+7, r24	; 0x07
 200:	85 83       	std	Z+5, r24	; 0x05
 202:	82 8b       	std	Z+18, r24	; 0x12
 204:	89 e4       	ldi	r24, 0x49	; 73
 206:	80 8b       	std	Z+16, r24	; 0x10
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	08 95       	ret

0000020e <SLPCTRL_init>:
 20e:	e0 e5       	ldi	r30, 0x50	; 80
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	84 60       	ori	r24, 0x04	; 4
 216:	80 83       	st	Z, r24
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret

00000224 <GPIO_init>:
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f4 e0       	ldi	r31, 0x04	; 4
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
 22e:	e0 e2       	ldi	r30, 0x20	; 32
 230:	f4 e0       	ldi	r31, 0x04	; 4
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	08 95       	ret

0000023e <USART0_init>:
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	c0 91 24 11 	lds	r28, 0x1124	; 0x801124 <__TEXT_REGION_LENGTH__+0x701124>
 248:	e0 e0       	ldi	r30, 0x00	; 0
 24a:	f2 e0       	ldi	r31, 0x02	; 2
 24c:	21 81       	ldd	r18, Z+1	; 0x01
 24e:	2e 7f       	andi	r18, 0xFE	; 254
 250:	21 83       	std	Z+1, r18	; 0x01
 252:	e0 e2       	ldi	r30, 0x20	; 32
 254:	f4 e0       	ldi	r31, 0x04	; 4
 256:	20 81       	ld	r18, Z
 258:	27 7f       	andi	r18, 0xF7	; 247
 25a:	20 83       	st	Z, r18
 25c:	20 81       	ld	r18, Z
 25e:	24 60       	ori	r18, 0x04	; 4
 260:	20 83       	st	Z, r18
 262:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatunsisf>
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 e8       	ldi	r20, 0x80	; 128
 26c:	51 e4       	ldi	r21, 0x41	; 65
 26e:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	64 e5       	ldi	r22, 0x54	; 84
 278:	73 e7       	ldi	r23, 0x73	; 115
 27a:	8b e4       	ldi	r24, 0x4B	; 75
 27c:	9d e4       	ldi	r25, 0x4D	; 77
 27e:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	5f e3       	ldi	r21, 0x3F	; 63
 28a:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
 28e:	0e 94 75 05 	call	0xaea	; 0xaea <__fixsfsi>
 292:	9b 01       	movw	r18, r22
 294:	ac 01       	movw	r20, r24
 296:	ac 2f       	mov	r26, r28
 298:	cc 0f       	add	r28, r28
 29a:	bb 0b       	sbc	r27, r27
 29c:	bc 5f       	subi	r27, 0xFC	; 252
 29e:	0e 94 ac 06 	call	0xd58	; 0xd58 <__mulshisi3>
 2a2:	8b 01       	movw	r16, r22
 2a4:	9c 01       	movw	r18, r24
 2a6:	99 23       	and	r25, r25
 2a8:	24 f4       	brge	.+8      	; 0x2b2 <USART0_init+0x74>
 2aa:	01 50       	subi	r16, 0x01	; 1
 2ac:	1c 4f       	sbci	r17, 0xFC	; 252
 2ae:	2f 4f       	sbci	r18, 0xFF	; 255
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	d9 01       	movw	r26, r18
 2b4:	c8 01       	movw	r24, r16
 2b6:	07 2e       	mov	r0, r23
 2b8:	7a e0       	ldi	r23, 0x0A	; 10
 2ba:	b5 95       	asr	r27
 2bc:	a7 95       	ror	r26
 2be:	97 95       	ror	r25
 2c0:	87 95       	ror	r24
 2c2:	7a 95       	dec	r23
 2c4:	d1 f7       	brne	.-12     	; 0x2ba <USART0_init+0x7c>
 2c6:	70 2d       	mov	r23, r0
 2c8:	e0 e0       	ldi	r30, 0x00	; 0
 2ca:	f8 e0       	ldi	r31, 0x08	; 8
 2cc:	80 87       	std	Z+8, r24	; 0x08
 2ce:	91 87       	std	Z+9, r25	; 0x09
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	85 83       	std	Z+5, r24	; 0x05
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	87 83       	std	Z+7, r24	; 0x07
 2d8:	13 86       	std	Z+11, r1	; 0x0b
 2da:	80 ec       	ldi	r24, 0xC0	; 192
 2dc:	86 83       	std	Z+6, r24	; 0x06
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <USART0_sendChar>:
 2ea:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 2ee:	95 ff       	sbrs	r25, 5
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <USART0_sendChar>
 2f2:	e0 e0       	ldi	r30, 0x00	; 0
 2f4:	f8 e0       	ldi	r31, 0x08	; 8
 2f6:	94 81       	ldd	r25, Z+4	; 0x04
 2f8:	90 64       	ori	r25, 0x40	; 64
 2fa:	94 83       	std	Z+4, r25	; 0x04
 2fc:	82 83       	std	Z+2, r24	; 0x02
 2fe:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 302:	86 ff       	sbrs	r24, 6
 304:	fc cf       	rjmp	.-8      	; 0x2fe <USART0_sendChar+0x14>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	08 95       	ret

0000030c <USART0_sendBuf>:
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	7c 01       	movw	r14, r24
 318:	16 2f       	mov	r17, r22
 31a:	c0 e0       	ldi	r28, 0x00	; 0
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	09 c0       	rjmp	.+18     	; 0x332 <USART0_sendBuf+0x26>
 320:	f7 01       	movw	r30, r14
 322:	ec 0f       	add	r30, r28
 324:	fd 1f       	adc	r31, r29
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART0_sendChar>
 330:	21 96       	adiw	r28, 0x01	; 1
 332:	81 2f       	mov	r24, r17
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	c8 17       	cp	r28, r24
 338:	d9 07       	cpc	r29, r25
 33a:	90 f3       	brcs	.-28     	; 0x320 <USART0_sendBuf+0x14>
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	08 95       	ret

00000348 <relayOn>:
 348:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 352:	e0 e2       	ldi	r30, 0x20	; 32
 354:	f4 e0       	ldi	r31, 0x04	; 4
 356:	85 81       	ldd	r24, Z+5	; 0x05
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	85 83       	std	Z+5, r24	; 0x05
 35c:	8a e0       	ldi	r24, 0x0A	; 10
 35e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 362:	08 95       	ret

00000364 <relayOff>:
 364:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 36e:	e0 e2       	ldi	r30, 0x20	; 32
 370:	f4 e0       	ldi	r31, 0x04	; 4
 372:	86 81       	ldd	r24, Z+6	; 0x06
 374:	82 60       	ori	r24, 0x02	; 2
 376:	86 83       	std	Z+6, r24	; 0x06
 378:	08 95       	ret

0000037a <adcOn>:
 37a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 384:	e0 e0       	ldi	r30, 0x00	; 0
 386:	f4 e0       	ldi	r31, 0x04	; 4
 388:	85 81       	ldd	r24, Z+5	; 0x05
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	85 83       	std	Z+5, r24	; 0x05
 38e:	08 95       	ret

00000390 <adcOff>:
 390:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 394:	8d 7f       	andi	r24, 0xFD	; 253
 396:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 39a:	e0 e0       	ldi	r30, 0x00	; 0
 39c:	f4 e0       	ldi	r31, 0x04	; 4
 39e:	86 81       	ldd	r24, Z+6	; 0x06
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	86 83       	std	Z+6, r24	; 0x06
 3a4:	08 95       	ret

000003a6 <isRelayOn>:
 3a6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 3aa:	81 70       	andi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	08 95       	ret

000003b0 <ADC_init>:

int ADC_init(void)
{
	// No inversion, no pull-up, no int., dig. buffer disable on PA1 and PA2.
	PORTA.PIN1CTRL &= ~PORT_ISC_gm;
 3b0:	e0 e0       	ldi	r30, 0x00	; 0
 3b2:	f4 e0       	ldi	r31, 0x04	; 4
 3b4:	81 89       	ldd	r24, Z+17	; 0x11
 3b6:	88 7f       	andi	r24, 0xF8	; 248
 3b8:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL &= ~PORT_ISC_gm;
 3ba:	82 89       	ldd	r24, Z+18	; 0x12
 3bc:	88 7f       	andi	r24, 0xF8	; 248
 3be:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3c0:	81 89       	ldd	r24, Z+17	; 0x11
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3c6:	82 89       	ldd	r24, Z+18	; 0x12
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	82 8b       	std	Z+18, r24	; 0x12
	
	// No run in standby, full 10-bit resolution, no freerun, enable.
	ADC0.CTRLA = (1 & ADC_ENABLE_bm);
 3cc:	e0 e0       	ldi	r30, 0x00	; 0
 3ce:	f6 e0       	ldi	r31, 0x06	; 6
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 83       	st	Z, r24
	// No accumulation. Max. value will be 0x3FF (max. of 10-bit)
	ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc;
 3d4:	11 82       	std	Z+1, r1	; 0x01
	// Big sample cap., VDD ref., DIV256 prescaler.
	// Ya, I know. It's an overkill. Better than going under.
	ADC0.CTRLC = ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV256_gc;
 3d6:	97 e1       	ldi	r25, 0x17	; 23
 3d8:	92 83       	std	Z+2, r25	; 0x02
	// 256clk startup delay, no auto sample delay, no delay between samples.
	ADC0.CTRLD = ADC_INITDLY_DLY256_gc;
 3da:	90 ea       	ldi	r25, 0xA0	; 160
 3dc:	93 83       	std	Z+3, r25	; 0x03
	// No window comp.
	ADC0.CTRLE = ADC_WINCM_NONE_gc;
 3de:	14 82       	std	Z+4, r1	; 0x04
	// 0 sample len.
	ADC0.SAMPCTRL = (0 & ADC_SAMPLEN_gm);
 3e0:	15 82       	std	Z+5, r1	; 0x05
	// Not using evt. control
	ADC0.EVCTRL = (0 & ADC_STARTEI_bm);
 3e2:	11 86       	std	Z+9, r1	; 0x09
	// Not using int. control
	ADC0.INTCTRL = (0 & ADC_WCMP_bm) | (0 & ADC_RESRDY_bm);
 3e4:	12 86       	std	Z+10, r1	; 0x0a
	// Clearing possible previous int. flags
	ADC0.INTFLAGS = (1 & ADC_WCMP_bm) | (1 & ADC_RESRDY_bm);
 3e6:	83 87       	std	Z+11, r24	; 0x0b
	// Halting the peripheral in debug halt
	ADC0.DBGCTRL = (0 & ADC_DBGRUN_bm);
 3e8:	14 86       	std	Z+12, r1	; 0x0c
	
	return 0;
}
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	08 95       	ret

000003f0 <doAdcThings>:

void doAdcThings()
{
	pending_sleep_flag |= PENDING_SLEEP_ADC;
 3f0:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
	if((ADC0.COMMAND & ADC_STCONV_bm) == 0)
 3fa:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 3fe:	80 fd       	sbrc	r24, 0
 400:	3a c0       	rjmp	.+116    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	{
		if(ADC0.INTFLAGS & ADC_RESRDY_bm)
 402:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
 406:	80 ff       	sbrs	r24, 0
 408:	27 c0       	rjmp	.+78     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		{
			// Something has been done from previous conversion.
			if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 40a:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 40e:	8f 71       	andi	r24, 0x1F	; 31
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	69 f4       	brne	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			{
				// VBAT
				vbat_volt = ADC0.RES;
 414:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 418:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 41c:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <vbat_volt>
 420:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <vbat_volt+0x1>
				adc_state |= 0x1;
 424:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc_state>
			}
			if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN2_gc)
 42e:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 432:	8f 71       	andi	r24, 0x1F	; 31
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	69 f4       	brne	.+26     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				// VACC
				vacc_volt = ADC0.RES;
 438:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 43c:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 440:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <vacc_volt>
 444:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <vacc_volt+0x1>
				adc_state |= 0x2;
 448:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc_state>
			}
			ADC0.INTFLAGS = (1 & ADC_RESRDY_bm);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
		}
		
		if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 458:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 45c:	8f 71       	andi	r24, 0x1F	; 31
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	21 f4       	brne	.+8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN2_gc;
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 468:	03 c0       	rjmp	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		}
		else
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
		}
		ADC0.COMMAND = (1 & ADC_STCONV_bm);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 476:	08 95       	ret

00000478 <doSwitchingThings>:
	}
}

void doSwitchingThings(void)
{
	if(isRelayOn())
 478:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <isRelayOn>
 47c:	89 2b       	or	r24, r25
 47e:	e9 f0       	breq	.+58     	; 0x4ba <doSwitchingThings+0x42>
	{
		if(vacc_volt < vacc_threshold || vbat_volt < vbat_threshold)
 480:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <vacc_volt>
 484:	30 91 09 38 	lds	r19, 0x3809	; 0x803809 <vacc_volt+0x1>
 488:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <vacc_threshold>
 48c:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <vacc_threshold+0x1>
 490:	28 17       	cp	r18, r24
 492:	39 07       	cpc	r19, r25
 494:	58 f0       	brcs	.+22     	; 0x4ac <doSwitchingThings+0x34>
 496:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 49a:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <vbat_volt+0x1>
 49e:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <vbat_threshold>
 4a2:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <vbat_threshold+0x1>
 4a6:	28 17       	cp	r18, r24
 4a8:	39 07       	cpc	r19, r25
 4aa:	a0 f4       	brcc	.+40     	; 0x4d4 <doSwitchingThings+0x5c>
		{
			if(tx2_timeout == 0) relayOff();
 4ac:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 4b0:	81 11       	cpse	r24, r1
 4b2:	10 c0       	rjmp	.+32     	; 0x4d4 <doSwitchingThings+0x5c>
 4b4:	0e 94 b2 01 	call	0x364	; 0x364 <relayOff>
 4b8:	08 95       	ret
		}
	}
	else
	{
		// Relay is always on if the accessory power presents
		if(vacc_volt >= vacc_threshold) relayOn();
 4ba:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <vacc_volt>
 4be:	30 91 09 38 	lds	r19, 0x3809	; 0x803809 <vacc_volt+0x1>
 4c2:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <vacc_threshold>
 4c6:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <vacc_threshold+0x1>
 4ca:	28 17       	cp	r18, r24
 4cc:	39 07       	cpc	r19, r25
 4ce:	10 f0       	brcs	.+4      	; 0x4d4 <doSwitchingThings+0x5c>
 4d0:	0e 94 a4 01 	call	0x348	; 0x348 <relayOn>
 4d4:	08 95       	ret

000004d6 <main>:
{
	//FILE USART_stream = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_WRITE);
	uint8_t oldTick = 255;
	uint8_t currentTick;
	
	cli();
 4d6:	f8 94       	cli
	RTC_init();
 4d8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <RTC_init>
	SLPCTRL_init();
 4dc:	0e 94 07 01 	call	0x20e	; 0x20e <SLPCTRL_init>
	GPIO_init();
 4e0:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_init>
	USART0_init(115200);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	72 ec       	ldi	r23, 0xC2	; 194
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_init>
	ADC_init();
 4f0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC_init>
	sei();
 4f4:	78 94       	sei
	// Protocol8086 parser in working
	//stdout = &USART_stream;
	parserInit();
 4f6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <parserInit>
	setParseDoneCallback(NULL);
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <setParseDoneCallback>
	setUartSendFunc(USART0_sendBuf);
 502:	86 e8       	ldi	r24, 0x86	; 134
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <setUartSendFunc>
	
	pending_sleep_flag = 0 & PENDING_SLEEP_MASK;
 50a:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
	adcOn();
 50e:	0e 94 bd 01 	call	0x37a	; 0x37a <adcOn>
}

int main(void)
{
	//FILE USART_stream = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_WRITE);
	uint8_t oldTick = 255;
 512:	df ef       	ldi	r29, 0xFF	; 255
	adcOn();

	// Static scheduling loop
    while (1)
    {
		currentTick = getCurrentTick();
 514:	0e 94 93 04 	call	0x926	; 0x926 <getCurrentTick>
 518:	c8 2f       	mov	r28, r24
		if(oldTick != currentTick)
 51a:	d8 17       	cp	r29, r24
 51c:	b9 f0       	breq	.+46     	; 0x54c <main+0x76>
		{
			oldTick = currentTick;
			if(isRelayOn())
 51e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <isRelayOn>
 522:	89 2b       	or	r24, r25
 524:	91 f0       	breq	.+36     	; 0x54a <main+0x74>
			{
				sendCmd(CMD_HELLO, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 526:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt>
 52a:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <vacc_volt+0x1>
 52e:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <vbat_volt>
 532:	60 91 0b 38 	lds	r22, 0x380B	; 0x80380b <vbat_volt+0x1>
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 ff 03 	call	0x7fe	; 0x7fe <sendCmd>
				pending_sleep_flag |= PENDING_SLEEP_UART;
 53c:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 540:	81 60       	ori	r24, 0x01	; 1
 542:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
    while (1)
    {
		currentTick = getCurrentTick();
		if(oldTick != currentTick)
		{
			oldTick = currentTick;
 546:	dc 2f       	mov	r29, r28
 548:	01 c0       	rjmp	.+2      	; 0x54c <main+0x76>
 54a:	dc 2f       	mov	r29, r28
				sendCmd(CMD_HELLO, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
				pending_sleep_flag |= PENDING_SLEEP_UART;
			}
		}
		
		doAdcThings();
 54c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <doAdcThings>
		if((adc_state & 0x3) == 0x3)
 550:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 554:	83 70       	andi	r24, 0x03	; 3
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	49 f4       	brne	.+18     	; 0x56c <main+0x96>
		{
			adc_state = 0;
 55a:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <adc_state>
			doSwitchingThings();
 55e:	0e 94 3c 02 	call	0x478	; 0x478 <doSwitchingThings>
			pending_sleep_flag &= ~PENDING_SLEEP_ADC;
 562:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 566:	8d 7f       	andi	r24, 0xFD	; 253
 568:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
		}

		if(uart0_rbuf_rpnt != uart0_rbuf_wpnt)
 56c:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 570:	30 91 0e 38 	lds	r19, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 574:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 578:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 57c:	28 17       	cp	r18, r24
 57e:	39 07       	cpc	r19, r25
 580:	d9 f0       	breq	.+54     	; 0x5b8 <main+0xe2>
		{
			parseData(uart0_rbuf[uart0_rbuf_rpnt++]);
 582:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 586:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 58a:	9c 01       	movw	r18, r24
 58c:	2f 5f       	subi	r18, 0xFF	; 255
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	20 93 0d 38 	sts	0x380D, r18	; 0x80380d <uart0_rbuf_rpnt>
 594:	30 93 0e 38 	sts	0x380E, r19	; 0x80380e <uart0_rbuf_rpnt+0x1>
 598:	fc 01       	movw	r30, r24
 59a:	ef 5e       	subi	r30, 0xEF	; 239
 59c:	f7 4c       	sbci	r31, 0xC7	; 199
 59e:	80 81       	ld	r24, Z
 5a0:	0e 94 29 04 	call	0x852	; 0x852 <parseData>
			if(uart0_rbuf_rpnt >= UART_BUFLEN) uart0_rbuf_rpnt = 0;
 5a4:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 5a8:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 5ac:	80 97       	sbiw	r24, 0x20	; 32
 5ae:	20 f0       	brcs	.+8      	; 0x5b8 <main+0xe2>
 5b0:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt>
 5b4:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <uart0_rbuf_rpnt+0x1>
		}
		
		if((pending_sleep_flag & PENDING_SLEEP_MASK) == 0)
 5b8:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 5bc:	83 70       	andi	r24, 0x03	; 3
 5be:	09 f0       	breq	.+2      	; 0x5c2 <main+0xec>
 5c0:	a9 cf       	rjmp	.-174    	; 0x514 <main+0x3e>
		{
			adcOff();
 5c2:	0e 94 c8 01 	call	0x390	; 0x390 <adcOff>
			sleep_cpu();
 5c6:	88 95       	sleep
			adcOn();
 5c8:	0e 94 bd 01 	call	0x37a	; 0x37a <adcOn>
 5cc:	a3 cf       	rjmp	.-186    	; 0x514 <main+0x3e>

000005ce <_encapsulateData>:
static void (*uartSend)(uint8_t *buf, uint8_t szBuf) = NULL;

static int parserState = 0;

void _encapsulateData(uint8_t *buf8, uint8_t one, uint8_t two, uint8_t three, uint8_t four, uint8_t five)
{
 5ce:	ef 92       	push	r14
 5d0:	0f 93       	push	r16
 5d2:	fc 01       	movw	r30, r24
	buf8[0] = UART_STX;
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	80 83       	st	Z, r24
	buf8[1] = one;
 5d8:	61 83       	std	Z+1, r22	; 0x01
	buf8[2] = two;
 5da:	42 83       	std	Z+2, r20	; 0x02
	buf8[3] = three;
 5dc:	23 83       	std	Z+3, r18	; 0x03
	buf8[4] = four;
 5de:	04 83       	std	Z+4, r16	; 0x04
	buf8[5] = five;
 5e0:	e5 82       	std	Z+5, r14	; 0x05
	buf8[6] = one + two + three + four + five;
 5e2:	46 0f       	add	r20, r22
 5e4:	24 0f       	add	r18, r20
 5e6:	02 0f       	add	r16, r18
 5e8:	e0 0e       	add	r14, r16
 5ea:	e6 82       	std	Z+6, r14	; 0x06
	buf8[7] = UART_ETX;
 5ec:	86 e8       	ldi	r24, 0x86	; 134
 5ee:	87 83       	std	Z+7, r24	; 0x07
}
 5f0:	0f 91       	pop	r16
 5f2:	ef 90       	pop	r14
 5f4:	08 95       	ret

000005f6 <_parseDone>:

void _parseDone(uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
 5f6:	ef 92       	push	r14
 5f8:	0f 93       	push	r16
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	28 97       	sbiw	r28, 0x08	; 8
 604:	cd bf       	out	0x3d, r28	; 61
 606:	de bf       	out	0x3e, r29	; 62
	extern uint16_t vacc_volt;
	extern uint16_t vbat_threshold;
	extern uint16_t vacc_threshold;
	extern volatile uint8_t tx2_timeout;
	extern uint8_t pending_sleep_flag;
	uint8_t sendBuf[8] = {0,};
 608:	de 01       	movw	r26, r28
 60a:	11 96       	adiw	r26, 0x01	; 1
 60c:	98 e0       	ldi	r25, 0x08	; 8
 60e:	fd 01       	movw	r30, r26
 610:	11 92       	st	Z+, r1
 612:	9a 95       	dec	r25
 614:	e9 f7       	brne	.-6      	; 0x610 <_parseDone+0x1a>

	if(parseDoneCallBack != NULL) parseDoneCallBack(data1, data2, data3, data4, data5);
 616:	e0 91 42 38 	lds	r30, 0x3842	; 0x803842 <parseDoneCallBack>
 61a:	f0 91 43 38 	lds	r31, 0x3843	; 0x803843 <parseDoneCallBack+0x1>
 61e:	30 97       	sbiw	r30, 0x00	; 0
 620:	11 f0       	breq	.+4      	; 0x626 <_parseDone+0x30>
 622:	09 95       	icall
 624:	d3 c0       	rjmp	.+422    	; 0x7cc <_parseDone+0x1d6>
	else
	{
		/* Default Command Behaviour Parser */
#if _ROLE == PWR_MONITOR
		tx2_timeout = 30;
 626:	9e e1       	ldi	r25, 0x1E	; 30
 628:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
		switch(data1)
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	fc 01       	movw	r30, r24
 630:	31 97       	sbiw	r30, 0x01	; 1
 632:	e3 31       	cpi	r30, 0x13	; 19
 634:	f1 05       	cpc	r31, r1
 636:	08 f0       	brcs	.+2      	; 0x63a <_parseDone+0x44>
 638:	ba c0       	rjmp	.+372    	; 0x7ae <_parseDone+0x1b8>
 63a:	e2 5c       	subi	r30, 0xC2	; 194
 63c:	ff 4f       	sbci	r31, 0xFF	; 255
 63e:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__tablejump2__>
		{
		case CMD_HELLO:
			_encapsulateData(sendBuf, CMD_HELLO2, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 642:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 646:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 64a:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 64e:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 652:	62 e0       	ldi	r22, 0x02	; 2
 654:	ce 01       	movw	r24, r28
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 65c:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 660:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 664:	30 97       	sbiw	r30, 0x00	; 0
 666:	09 f4       	brne	.+2      	; 0x66a <_parseDone+0x74>
 668:	a2 c0       	rjmp	.+324    	; 0x7ae <_parseDone+0x1b8>
 66a:	68 e0       	ldi	r22, 0x08	; 8
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	09 95       	icall
 672:	9d c0       	rjmp	.+314    	; 0x7ae <_parseDone+0x1b8>
			break;
		case CMD_HELLO2:
			break;
		case CMD_PING:
			_encapsulateData(sendBuf, CMD_PONG, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 674:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 678:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 67c:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 680:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 684:	64 e0       	ldi	r22, 0x04	; 4
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 68e:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 692:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 696:	30 97       	sbiw	r30, 0x00	; 0
 698:	09 f4       	brne	.+2      	; 0x69c <_parseDone+0xa6>
 69a:	89 c0       	rjmp	.+274    	; 0x7ae <_parseDone+0x1b8>
 69c:	68 e0       	ldi	r22, 0x08	; 8
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	09 95       	icall
 6a4:	84 c0       	rjmp	.+264    	; 0x7ae <_parseDone+0x1b8>
		case CMD_HALT:
			break;
		case CMD_HTOK:
			break;
		case CMD_STAT:
			_encapsulateData(sendBuf, CMD_STAT_RSP, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 6a6:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 6aa:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 6ae:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 6b2:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 6b6:	6a e0       	ldi	r22, 0x0A	; 10
 6b8:	ce 01       	movw	r24, r28
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 6c0:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 6c4:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 6c8:	30 97       	sbiw	r30, 0x00	; 0
 6ca:	09 f4       	brne	.+2      	; 0x6ce <_parseDone+0xd8>
 6cc:	70 c0       	rjmp	.+224    	; 0x7ae <_parseDone+0x1b8>
 6ce:	68 e0       	ldi	r22, 0x08	; 8
 6d0:	ce 01       	movw	r24, r28
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	09 95       	icall
 6d6:	6b c0       	rjmp	.+214    	; 0x7ae <_parseDone+0x1b8>
			break;
		case CMD_STAT_RSP:
			break;
		case CMD_GET_THRESH:
			_encapsulateData(sendBuf, CMD_GET_THRESH_RSP, (uint8_t)((vbat_threshold >> 8) & 0xFF), (uint8_t)(vbat_threshold & 0xFF), (uint8_t)((vacc_threshold >> 8) & 0xFF), (uint8_t)(vacc_threshold & 0xFF));
 6d8:	e0 90 01 38 	lds	r14, 0x3801	; 0x803801 <vacc_threshold>
 6dc:	00 91 02 38 	lds	r16, 0x3802	; 0x803802 <vacc_threshold+0x1>
 6e0:	20 91 03 38 	lds	r18, 0x3803	; 0x803803 <vbat_threshold>
 6e4:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <vbat_threshold+0x1>
 6e8:	6c e0       	ldi	r22, 0x0C	; 12
 6ea:	ce 01       	movw	r24, r28
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 6f2:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 6f6:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 6fa:	30 97       	sbiw	r30, 0x00	; 0
 6fc:	09 f4       	brne	.+2      	; 0x700 <_parseDone+0x10a>
 6fe:	57 c0       	rjmp	.+174    	; 0x7ae <_parseDone+0x1b8>
 700:	68 e0       	ldi	r22, 0x08	; 8
 702:	ce 01       	movw	r24, r28
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	09 95       	icall
 708:	52 c0       	rjmp	.+164    	; 0x7ae <_parseDone+0x1b8>
			break;
		case CMD_GET_THRESH_RSP:
			break;
		case CMD_SET_THRESH:
			vbat_threshold = ((uint16_t)data2) << 8;
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	76 2f       	mov	r23, r22
 70e:	66 27       	eor	r22, r22
			vbat_threshold += data3;
 710:	64 0f       	add	r22, r20
 712:	71 1d       	adc	r23, r1
 714:	60 93 03 38 	sts	0x3803, r22	; 0x803803 <vbat_threshold>
 718:	70 93 04 38 	sts	0x3804, r23	; 0x803804 <vbat_threshold+0x1>
			vacc_threshold = ((uint16_t)data4) << 8;
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	32 2f       	mov	r19, r18
 720:	22 27       	eor	r18, r18
			vacc_threshold += data5;
 722:	20 0f       	add	r18, r16
 724:	31 1d       	adc	r19, r1
 726:	20 93 01 38 	sts	0x3801, r18	; 0x803801 <vacc_threshold>
 72a:	30 93 02 38 	sts	0x3802, r19	; 0x803802 <vacc_threshold+0x1>
			_encapsulateData(sendBuf, CMD_SET_THRESH_RSP, (uint8_t)((vbat_threshold >> 8) & 0xFF), (uint8_t)(vbat_threshold & 0xFF), (uint8_t)((vacc_threshold >> 8) & 0xFF), (uint8_t)(vacc_threshold & 0xFF));
 72e:	e2 2e       	mov	r14, r18
 730:	03 2f       	mov	r16, r19
 732:	26 2f       	mov	r18, r22
 734:	47 2f       	mov	r20, r23
 736:	6e e0       	ldi	r22, 0x0E	; 14
 738:	ce 01       	movw	r24, r28
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 740:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 744:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 748:	30 97       	sbiw	r30, 0x00	; 0
 74a:	89 f1       	breq	.+98     	; 0x7ae <_parseDone+0x1b8>
 74c:	68 e0       	ldi	r22, 0x08	; 8
 74e:	ce 01       	movw	r24, r28
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	09 95       	icall
 754:	2c c0       	rjmp	.+88     	; 0x7ae <_parseDone+0x1b8>
			break;
		case CMD_SET_THRESH_RSP:
			break;
		case CMD_DONT_SLEEP:
			_dont_sleep = 1;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <_dont_sleep.1646>
			_encapsulateData(sendBuf, CMD_DONT_SLEEP_RSP, _dont_sleep, 0, 0, 0);
 75c:	e1 2c       	mov	r14, r1
 75e:	00 e0       	ldi	r16, 0x00	; 0
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	62 e1       	ldi	r22, 0x12	; 18
 766:	ce 01       	movw	r24, r28
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 76e:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 772:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 776:	30 97       	sbiw	r30, 0x00	; 0
 778:	d1 f0       	breq	.+52     	; 0x7ae <_parseDone+0x1b8>
 77a:	68 e0       	ldi	r22, 0x08	; 8
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	09 95       	icall
 782:	15 c0       	rjmp	.+42     	; 0x7ae <_parseDone+0x1b8>
			break;
		case CMD_DONT_SLEEP_RSP:
			break;
		case CMD_OKAY_SLEEP:
			_dont_sleep = 0;
 784:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <_dont_sleep.1646>
			_encapsulateData(sendBuf, CMD_OKAY_SLEEP_RSP, _dont_sleep, 0, 0, 0);
 788:	e1 2c       	mov	r14, r1
 78a:	00 e0       	ldi	r16, 0x00	; 0
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	64 e1       	ldi	r22, 0x14	; 20
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 79a:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 79e:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 7a2:	30 97       	sbiw	r30, 0x00	; 0
 7a4:	21 f0       	breq	.+8      	; 0x7ae <_parseDone+0x1b8>
 7a6:	68 e0       	ldi	r22, 0x08	; 8
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	09 95       	icall
			break;
		default:
			break;
		}
		
		if(_dont_sleep)
 7ae:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <_dont_sleep.1646>
 7b2:	88 23       	and	r24, r24
 7b4:	31 f0       	breq	.+12     	; 0x7c2 <_parseDone+0x1cc>
		{
			pending_sleep_flag |= PENDING_SLEEP_UART;
 7b6:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 7ba:	81 60       	ori	r24, 0x01	; 1
 7bc:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
 7c0:	05 c0       	rjmp	.+10     	; 0x7cc <_parseDone+0x1d6>
		}
		else
		{
			pending_sleep_flag &= ~PENDING_SLEEP_UART;
 7c2:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 7c6:	8e 7f       	andi	r24, 0xFE	; 254
 7c8:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
		}
#elif _ROLE == DVR_RECORDER
#else
#endif
	}
}
 7cc:	28 96       	adiw	r28, 0x08	; 8
 7ce:	cd bf       	out	0x3d, r28	; 61
 7d0:	de bf       	out	0x3e, r29	; 62
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	0f 91       	pop	r16
 7d8:	ef 90       	pop	r14
 7da:	08 95       	ret

000007dc <parserInit>:


void parserInit()
{
	parserState = 1;
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <parserState>
 7e4:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <parserState+0x1>
 7e8:	08 95       	ret

000007ea <setParseDoneCallback>:
}

void setParseDoneCallback(void (*func)(uint8_t, uint8_t, uint8_t, uint8_t, uint8_t))
{
	parseDoneCallBack = func;
 7ea:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <parseDoneCallBack>
 7ee:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <parseDoneCallBack+0x1>
 7f2:	08 95       	ret

000007f4 <setUartSendFunc>:
}

void setUartSendFunc(void (*func)(uint8_t *, uint8_t))
{
	uartSend = func;
 7f4:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <uartSend>
 7f8:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <uartSend+0x1>
 7fc:	08 95       	ret

000007fe <sendCmd>:
}

void sendCmd(uint8_t cmd, uint8_t one, uint8_t two, uint8_t three, uint8_t four)
{
 7fe:	ef 92       	push	r14
 800:	0f 93       	push	r16
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	28 97       	sbiw	r28, 0x08	; 8
 80c:	cd bf       	out	0x3d, r28	; 61
 80e:	de bf       	out	0x3e, r29	; 62
	uint8_t sendBuf[8] = {0,};
 810:	fe 01       	movw	r30, r28
 812:	31 96       	adiw	r30, 0x01	; 1
 814:	98 e0       	ldi	r25, 0x08	; 8
 816:	df 01       	movw	r26, r30
 818:	1d 92       	st	X+, r1
 81a:	9a 95       	dec	r25
 81c:	e9 f7       	brne	.-6      	; 0x818 <sendCmd+0x1a>
	_encapsulateData(sendBuf, cmd, one, two, three, four);
 81e:	e0 2e       	mov	r14, r16
 820:	02 2f       	mov	r16, r18
 822:	24 2f       	mov	r18, r20
 824:	46 2f       	mov	r20, r22
 826:	68 2f       	mov	r22, r24
 828:	cf 01       	movw	r24, r30
 82a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_encapsulateData>
	if(uartSend != NULL) uartSend(sendBuf, 8);
 82e:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 832:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 836:	30 97       	sbiw	r30, 0x00	; 0
 838:	21 f0       	breq	.+8      	; 0x842 <sendCmd+0x44>
 83a:	68 e0       	ldi	r22, 0x08	; 8
 83c:	ce 01       	movw	r24, r28
 83e:	01 96       	adiw	r24, 0x01	; 1
 840:	09 95       	icall
}
 842:	28 96       	adiw	r28, 0x08	; 8
 844:	cd bf       	out	0x3d, r28	; 61
 846:	de bf       	out	0x3e, r29	; 62
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	0f 91       	pop	r16
 84e:	ef 90       	pop	r14
 850:	08 95       	ret

00000852 <parseData>:

void parseData(uint8_t data)
{
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
	static uint8_t databuf[8] = {0,};
	static uint32_t recvdcnt = 0;
	uint8_t tmpChksum = 0;

	if(parserState)
 856:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <parserState>
 85a:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <parserState+0x1>
 85e:	23 2b       	or	r18, r19
 860:	09 f4       	brne	.+2      	; 0x864 <parseData+0x12>
 862:	58 c0       	rjmp	.+176    	; 0x914 <parseData+0xc2>
	{
		switch(uartState)
 864:	90 91 44 38 	lds	r25, 0x3844	; 0x803844 <uartState>
 868:	99 23       	and	r25, r25
 86a:	19 f0       	breq	.+6      	; 0x872 <parseData+0x20>
 86c:	91 30       	cpi	r25, 0x01	; 1
 86e:	b1 f0       	breq	.+44     	; 0x89c <parseData+0x4a>
 870:	51 c0       	rjmp	.+162    	; 0x914 <parseData+0xc2>
		{
		case UART_STATE_IDLE:
			if(data == UART_STX)
 872:	80 38       	cpi	r24, 0x80	; 128
 874:	09 f0       	breq	.+2      	; 0x878 <parseData+0x26>
 876:	4e c0       	rjmp	.+156    	; 0x914 <parseData+0xc2>
			{
				recvdcnt = 0;
				uartState = UART_STATE_RECEIVING;
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <uartState>
				databuf[recvdcnt++] = data;
 87e:	41 e0       	ldi	r20, 0x01	; 1
 880:	50 e0       	ldi	r21, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	40 93 39 38 	sts	0x3839, r20	; 0x803839 <recvdcnt.1707>
 88a:	50 93 3a 38 	sts	0x383A, r21	; 0x80383a <recvdcnt.1707+0x1>
 88e:	60 93 3b 38 	sts	0x383B, r22	; 0x80383b <recvdcnt.1707+0x2>
 892:	70 93 3c 38 	sts	0x383C, r23	; 0x80383c <recvdcnt.1707+0x3>
 896:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <databuf.1706>
 89a:	3c c0       	rjmp	.+120    	; 0x914 <parseData+0xc2>
			}
			break;
		case UART_STATE_RECEIVING:
			if(recvdcnt < 8)
 89c:	40 91 39 38 	lds	r20, 0x3839	; 0x803839 <recvdcnt.1707>
 8a0:	50 91 3a 38 	lds	r21, 0x383A	; 0x80383a <recvdcnt.1707+0x1>
 8a4:	60 91 3b 38 	lds	r22, 0x383B	; 0x80383b <recvdcnt.1707+0x2>
 8a8:	70 91 3c 38 	lds	r23, 0x383C	; 0x80383c <recvdcnt.1707+0x3>
 8ac:	48 30       	cpi	r20, 0x08	; 8
 8ae:	51 05       	cpc	r21, r1
 8b0:	61 05       	cpc	r22, r1
 8b2:	71 05       	cpc	r23, r1
 8b4:	68 f5       	brcc	.+90     	; 0x910 <parseData+0xbe>
			{
				databuf[recvdcnt++] = data;
 8b6:	8a 01       	movw	r16, r20
 8b8:	9b 01       	movw	r18, r22
 8ba:	0f 5f       	subi	r16, 0xFF	; 255
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
 8be:	2f 4f       	sbci	r18, 0xFF	; 255
 8c0:	3f 4f       	sbci	r19, 0xFF	; 255
 8c2:	00 93 39 38 	sts	0x3839, r16	; 0x803839 <recvdcnt.1707>
 8c6:	10 93 3a 38 	sts	0x383A, r17	; 0x80383a <recvdcnt.1707+0x1>
 8ca:	20 93 3b 38 	sts	0x383B, r18	; 0x80383b <recvdcnt.1707+0x2>
 8ce:	30 93 3c 38 	sts	0x383C, r19	; 0x80383c <recvdcnt.1707+0x3>
 8d2:	fa 01       	movw	r30, r20
 8d4:	ef 5c       	subi	r30, 0xCF	; 207
 8d6:	f7 4c       	sbci	r31, 0xC7	; 199
 8d8:	80 83       	st	Z, r24
				if(recvdcnt == 8)
 8da:	08 30       	cpi	r16, 0x08	; 8
 8dc:	11 05       	cpc	r17, r1
 8de:	21 05       	cpc	r18, r1
 8e0:	31 05       	cpc	r19, r1
 8e2:	c1 f4       	brne	.+48     	; 0x914 <parseData+0xc2>
				{
					if(data == UART_ETX)
 8e4:	86 38       	cpi	r24, 0x86	; 134
 8e6:	89 f4       	brne	.+34     	; 0x90a <parseData+0xb8>
					{
						tmpChksum = databuf[1] + databuf[2] + databuf[3] + databuf[4] + databuf[5];
 8e8:	e1 e3       	ldi	r30, 0x31	; 49
 8ea:	f8 e3       	ldi	r31, 0x38	; 56
 8ec:	81 81       	ldd	r24, Z+1	; 0x01
 8ee:	62 81       	ldd	r22, Z+2	; 0x02
 8f0:	43 81       	ldd	r20, Z+3	; 0x03
 8f2:	24 81       	ldd	r18, Z+4	; 0x04
 8f4:	05 81       	ldd	r16, Z+5	; 0x05
 8f6:	98 2f       	mov	r25, r24
 8f8:	96 0f       	add	r25, r22
 8fa:	94 0f       	add	r25, r20
 8fc:	92 0f       	add	r25, r18
 8fe:	90 0f       	add	r25, r16
						if(tmpChksum == databuf[6])
 900:	36 81       	ldd	r19, Z+6	; 0x06
 902:	93 13       	cpse	r25, r19
 904:	02 c0       	rjmp	.+4      	; 0x90a <parseData+0xb8>
						{
							_parseDone(databuf[1], databuf[2], databuf[3], databuf[4], databuf[5]);
 906:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_parseDone>
						}
					}
					//recvdcnt = 0;
					uartState = UART_STATE_IDLE;
 90a:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <uartState>
 90e:	02 c0       	rjmp	.+4      	; 0x914 <parseData+0xc2>
			}
			else
			{
				// Highly unlikely case
				//recvdcnt = 0;
				uartState = UART_STATE_IDLE;
 910:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <uartState>
			break;
		default:
			break;
		}
	}
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	08 95       	ret

0000091a <incTick>:

static uint8_t nowtick = 0;

inline void incTick(void)
{
	nowtick++;
 91a:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <nowtick>
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <nowtick>
 924:	08 95       	ret

00000926 <getCurrentTick>:
}

uint8_t getCurrentTick(void)
{
	return nowtick;
}
 926:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <nowtick>
 92a:	08 95       	ret

0000092c <__subsf3>:
 92c:	50 58       	subi	r21, 0x80	; 128

0000092e <__addsf3>:
 92e:	bb 27       	eor	r27, r27
 930:	aa 27       	eor	r26, r26
 932:	0e 94 ae 04 	call	0x95c	; 0x95c <__addsf3x>
 936:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
 93a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
 93e:	38 f0       	brcs	.+14     	; 0x94e <__addsf3+0x20>
 940:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
 944:	20 f0       	brcs	.+8      	; 0x94e <__addsf3+0x20>
 946:	39 f4       	brne	.+14     	; 0x956 <__addsf3+0x28>
 948:	9f 3f       	cpi	r25, 0xFF	; 255
 94a:	19 f4       	brne	.+6      	; 0x952 <__addsf3+0x24>
 94c:	26 f4       	brtc	.+8      	; 0x956 <__addsf3+0x28>
 94e:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>
 952:	0e f4       	brtc	.+2      	; 0x956 <__addsf3+0x28>
 954:	e0 95       	com	r30
 956:	e7 fb       	bst	r30, 7
 958:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>

0000095c <__addsf3x>:
 95c:	e9 2f       	mov	r30, r25
 95e:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
 962:	58 f3       	brcs	.-42     	; 0x93a <__addsf3+0xc>
 964:	ba 17       	cp	r27, r26
 966:	62 07       	cpc	r22, r18
 968:	73 07       	cpc	r23, r19
 96a:	84 07       	cpc	r24, r20
 96c:	95 07       	cpc	r25, r21
 96e:	20 f0       	brcs	.+8      	; 0x978 <__addsf3x+0x1c>
 970:	79 f4       	brne	.+30     	; 0x990 <__addsf3x+0x34>
 972:	a6 f5       	brtc	.+104    	; 0x9dc <__addsf3x+0x80>
 974:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_zero>
 978:	0e f4       	brtc	.+2      	; 0x97c <__addsf3x+0x20>
 97a:	e0 95       	com	r30
 97c:	0b 2e       	mov	r0, r27
 97e:	ba 2f       	mov	r27, r26
 980:	a0 2d       	mov	r26, r0
 982:	0b 01       	movw	r0, r22
 984:	b9 01       	movw	r22, r18
 986:	90 01       	movw	r18, r0
 988:	0c 01       	movw	r0, r24
 98a:	ca 01       	movw	r24, r20
 98c:	a0 01       	movw	r20, r0
 98e:	11 24       	eor	r1, r1
 990:	ff 27       	eor	r31, r31
 992:	59 1b       	sub	r21, r25
 994:	99 f0       	breq	.+38     	; 0x9bc <__addsf3x+0x60>
 996:	59 3f       	cpi	r21, 0xF9	; 249
 998:	50 f4       	brcc	.+20     	; 0x9ae <__addsf3x+0x52>
 99a:	50 3e       	cpi	r21, 0xE0	; 224
 99c:	68 f1       	brcs	.+90     	; 0x9f8 <__addsf3x+0x9c>
 99e:	1a 16       	cp	r1, r26
 9a0:	f0 40       	sbci	r31, 0x00	; 0
 9a2:	a2 2f       	mov	r26, r18
 9a4:	23 2f       	mov	r18, r19
 9a6:	34 2f       	mov	r19, r20
 9a8:	44 27       	eor	r20, r20
 9aa:	58 5f       	subi	r21, 0xF8	; 248
 9ac:	f3 cf       	rjmp	.-26     	; 0x994 <__addsf3x+0x38>
 9ae:	46 95       	lsr	r20
 9b0:	37 95       	ror	r19
 9b2:	27 95       	ror	r18
 9b4:	a7 95       	ror	r26
 9b6:	f0 40       	sbci	r31, 0x00	; 0
 9b8:	53 95       	inc	r21
 9ba:	c9 f7       	brne	.-14     	; 0x9ae <__addsf3x+0x52>
 9bc:	7e f4       	brtc	.+30     	; 0x9dc <__addsf3x+0x80>
 9be:	1f 16       	cp	r1, r31
 9c0:	ba 0b       	sbc	r27, r26
 9c2:	62 0b       	sbc	r22, r18
 9c4:	73 0b       	sbc	r23, r19
 9c6:	84 0b       	sbc	r24, r20
 9c8:	ba f0       	brmi	.+46     	; 0x9f8 <__addsf3x+0x9c>
 9ca:	91 50       	subi	r25, 0x01	; 1
 9cc:	a1 f0       	breq	.+40     	; 0x9f6 <__addsf3x+0x9a>
 9ce:	ff 0f       	add	r31, r31
 9d0:	bb 1f       	adc	r27, r27
 9d2:	66 1f       	adc	r22, r22
 9d4:	77 1f       	adc	r23, r23
 9d6:	88 1f       	adc	r24, r24
 9d8:	c2 f7       	brpl	.-16     	; 0x9ca <__addsf3x+0x6e>
 9da:	0e c0       	rjmp	.+28     	; 0x9f8 <__addsf3x+0x9c>
 9dc:	ba 0f       	add	r27, r26
 9de:	62 1f       	adc	r22, r18
 9e0:	73 1f       	adc	r23, r19
 9e2:	84 1f       	adc	r24, r20
 9e4:	48 f4       	brcc	.+18     	; 0x9f8 <__addsf3x+0x9c>
 9e6:	87 95       	ror	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f7 95       	ror	r31
 9f0:	9e 3f       	cpi	r25, 0xFE	; 254
 9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__addsf3x+0x9a>
 9f4:	b0 cf       	rjmp	.-160    	; 0x956 <__addsf3+0x28>
 9f6:	93 95       	inc	r25
 9f8:	88 0f       	add	r24, r24
 9fa:	08 f0       	brcs	.+2      	; 0x9fe <__addsf3x+0xa2>
 9fc:	99 27       	eor	r25, r25
 9fe:	ee 0f       	add	r30, r30
 a00:	97 95       	ror	r25
 a02:	87 95       	ror	r24
 a04:	08 95       	ret

00000a06 <__divsf3>:
 a06:	0e 94 17 05 	call	0xa2e	; 0xa2e <__divsf3x>
 a0a:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
 a0e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
 a12:	58 f0       	brcs	.+22     	; 0xa2a <__divsf3+0x24>
 a14:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
 a18:	40 f0       	brcs	.+16     	; 0xa2a <__divsf3+0x24>
 a1a:	29 f4       	brne	.+10     	; 0xa26 <__divsf3+0x20>
 a1c:	5f 3f       	cpi	r21, 0xFF	; 255
 a1e:	29 f0       	breq	.+10     	; 0xa2a <__divsf3+0x24>
 a20:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
 a24:	51 11       	cpse	r21, r1
 a26:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
 a2a:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>

00000a2e <__divsf3x>:
 a2e:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
 a32:	68 f3       	brcs	.-38     	; 0xa0e <__divsf3+0x8>

00000a34 <__divsf3_pse>:
 a34:	99 23       	and	r25, r25
 a36:	b1 f3       	breq	.-20     	; 0xa24 <__divsf3+0x1e>
 a38:	55 23       	and	r21, r21
 a3a:	91 f3       	breq	.-28     	; 0xa20 <__divsf3+0x1a>
 a3c:	95 1b       	sub	r25, r21
 a3e:	55 0b       	sbc	r21, r21
 a40:	bb 27       	eor	r27, r27
 a42:	aa 27       	eor	r26, r26
 a44:	62 17       	cp	r22, r18
 a46:	73 07       	cpc	r23, r19
 a48:	84 07       	cpc	r24, r20
 a4a:	38 f0       	brcs	.+14     	; 0xa5a <__divsf3_pse+0x26>
 a4c:	9f 5f       	subi	r25, 0xFF	; 255
 a4e:	5f 4f       	sbci	r21, 0xFF	; 255
 a50:	22 0f       	add	r18, r18
 a52:	33 1f       	adc	r19, r19
 a54:	44 1f       	adc	r20, r20
 a56:	aa 1f       	adc	r26, r26
 a58:	a9 f3       	breq	.-22     	; 0xa44 <__divsf3_pse+0x10>
 a5a:	35 d0       	rcall	.+106    	; 0xac6 <__divsf3_pse+0x92>
 a5c:	0e 2e       	mov	r0, r30
 a5e:	3a f0       	brmi	.+14     	; 0xa6e <__divsf3_pse+0x3a>
 a60:	e0 e8       	ldi	r30, 0x80	; 128
 a62:	32 d0       	rcall	.+100    	; 0xac8 <__divsf3_pse+0x94>
 a64:	91 50       	subi	r25, 0x01	; 1
 a66:	50 40       	sbci	r21, 0x00	; 0
 a68:	e6 95       	lsr	r30
 a6a:	00 1c       	adc	r0, r0
 a6c:	ca f7       	brpl	.-14     	; 0xa60 <__divsf3_pse+0x2c>
 a6e:	2b d0       	rcall	.+86     	; 0xac6 <__divsf3_pse+0x92>
 a70:	fe 2f       	mov	r31, r30
 a72:	29 d0       	rcall	.+82     	; 0xac6 <__divsf3_pse+0x92>
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	bb 1f       	adc	r27, r27
 a7c:	26 17       	cp	r18, r22
 a7e:	37 07       	cpc	r19, r23
 a80:	48 07       	cpc	r20, r24
 a82:	ab 07       	cpc	r26, r27
 a84:	b0 e8       	ldi	r27, 0x80	; 128
 a86:	09 f0       	breq	.+2      	; 0xa8a <__divsf3_pse+0x56>
 a88:	bb 0b       	sbc	r27, r27
 a8a:	80 2d       	mov	r24, r0
 a8c:	bf 01       	movw	r22, r30
 a8e:	ff 27       	eor	r31, r31
 a90:	93 58       	subi	r25, 0x83	; 131
 a92:	5f 4f       	sbci	r21, 0xFF	; 255
 a94:	3a f0       	brmi	.+14     	; 0xaa4 <__divsf3_pse+0x70>
 a96:	9e 3f       	cpi	r25, 0xFE	; 254
 a98:	51 05       	cpc	r21, r1
 a9a:	78 f0       	brcs	.+30     	; 0xaba <__divsf3_pse+0x86>
 a9c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
 aa0:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
 aa4:	5f 3f       	cpi	r21, 0xFF	; 255
 aa6:	e4 f3       	brlt	.-8      	; 0xaa0 <__divsf3_pse+0x6c>
 aa8:	98 3e       	cpi	r25, 0xE8	; 232
 aaa:	d4 f3       	brlt	.-12     	; 0xaa0 <__divsf3_pse+0x6c>
 aac:	86 95       	lsr	r24
 aae:	77 95       	ror	r23
 ab0:	67 95       	ror	r22
 ab2:	b7 95       	ror	r27
 ab4:	f7 95       	ror	r31
 ab6:	9f 5f       	subi	r25, 0xFF	; 255
 ab8:	c9 f7       	brne	.-14     	; 0xaac <__divsf3_pse+0x78>
 aba:	88 0f       	add	r24, r24
 abc:	91 1d       	adc	r25, r1
 abe:	96 95       	lsr	r25
 ac0:	87 95       	ror	r24
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret
 ac6:	e1 e0       	ldi	r30, 0x01	; 1
 ac8:	66 0f       	add	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	bb 1f       	adc	r27, r27
 ad0:	62 17       	cp	r22, r18
 ad2:	73 07       	cpc	r23, r19
 ad4:	84 07       	cpc	r24, r20
 ad6:	ba 07       	cpc	r27, r26
 ad8:	20 f0       	brcs	.+8      	; 0xae2 <__divsf3_pse+0xae>
 ada:	62 1b       	sub	r22, r18
 adc:	73 0b       	sbc	r23, r19
 ade:	84 0b       	sbc	r24, r20
 ae0:	ba 0b       	sbc	r27, r26
 ae2:	ee 1f       	adc	r30, r30
 ae4:	88 f7       	brcc	.-30     	; 0xac8 <__divsf3_pse+0x94>
 ae6:	e0 95       	com	r30
 ae8:	08 95       	ret

00000aea <__fixsfsi>:
 aea:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixunssfsi>
 aee:	68 94       	set
 af0:	b1 11       	cpse	r27, r1
 af2:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
 af6:	08 95       	ret

00000af8 <__fixunssfsi>:
 af8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_splitA>
 afc:	88 f0       	brcs	.+34     	; 0xb20 <__fixunssfsi+0x28>
 afe:	9f 57       	subi	r25, 0x7F	; 127
 b00:	98 f0       	brcs	.+38     	; 0xb28 <__fixunssfsi+0x30>
 b02:	b9 2f       	mov	r27, r25
 b04:	99 27       	eor	r25, r25
 b06:	b7 51       	subi	r27, 0x17	; 23
 b08:	b0 f0       	brcs	.+44     	; 0xb36 <__fixunssfsi+0x3e>
 b0a:	e1 f0       	breq	.+56     	; 0xb44 <__fixunssfsi+0x4c>
 b0c:	66 0f       	add	r22, r22
 b0e:	77 1f       	adc	r23, r23
 b10:	88 1f       	adc	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	1a f0       	brmi	.+6      	; 0xb1c <__fixunssfsi+0x24>
 b16:	ba 95       	dec	r27
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__fixunssfsi+0x14>
 b1a:	14 c0       	rjmp	.+40     	; 0xb44 <__fixunssfsi+0x4c>
 b1c:	b1 30       	cpi	r27, 0x01	; 1
 b1e:	91 f0       	breq	.+36     	; 0xb44 <__fixunssfsi+0x4c>
 b20:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_zero>
 b24:	b1 e0       	ldi	r27, 0x01	; 1
 b26:	08 95       	ret
 b28:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_zero>
 b2c:	67 2f       	mov	r22, r23
 b2e:	78 2f       	mov	r23, r24
 b30:	88 27       	eor	r24, r24
 b32:	b8 5f       	subi	r27, 0xF8	; 248
 b34:	39 f0       	breq	.+14     	; 0xb44 <__fixunssfsi+0x4c>
 b36:	b9 3f       	cpi	r27, 0xF9	; 249
 b38:	cc f3       	brlt	.-14     	; 0xb2c <__fixunssfsi+0x34>
 b3a:	86 95       	lsr	r24
 b3c:	77 95       	ror	r23
 b3e:	67 95       	ror	r22
 b40:	b3 95       	inc	r27
 b42:	d9 f7       	brne	.-10     	; 0xb3a <__fixunssfsi+0x42>
 b44:	3e f4       	brtc	.+14     	; 0xb54 <__fixunssfsi+0x5c>
 b46:	90 95       	com	r25
 b48:	80 95       	com	r24
 b4a:	70 95       	com	r23
 b4c:	61 95       	neg	r22
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__floatunsisf>:
 b56:	e8 94       	clt
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <__floatsisf+0x12>

00000b5a <__floatsisf>:
 b5a:	97 fb       	bst	r25, 7
 b5c:	3e f4       	brtc	.+14     	; 0xb6c <__floatsisf+0x12>
 b5e:	90 95       	com	r25
 b60:	80 95       	com	r24
 b62:	70 95       	com	r23
 b64:	61 95       	neg	r22
 b66:	7f 4f       	sbci	r23, 0xFF	; 255
 b68:	8f 4f       	sbci	r24, 0xFF	; 255
 b6a:	9f 4f       	sbci	r25, 0xFF	; 255
 b6c:	99 23       	and	r25, r25
 b6e:	a9 f0       	breq	.+42     	; 0xb9a <__floatsisf+0x40>
 b70:	f9 2f       	mov	r31, r25
 b72:	96 e9       	ldi	r25, 0x96	; 150
 b74:	bb 27       	eor	r27, r27
 b76:	93 95       	inc	r25
 b78:	f6 95       	lsr	r31
 b7a:	87 95       	ror	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b7 95       	ror	r27
 b82:	f1 11       	cpse	r31, r1
 b84:	f8 cf       	rjmp	.-16     	; 0xb76 <__floatsisf+0x1c>
 b86:	fa f4       	brpl	.+62     	; 0xbc6 <__floatsisf+0x6c>
 b88:	bb 0f       	add	r27, r27
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__floatsisf+0x36>
 b8c:	60 ff       	sbrs	r22, 0
 b8e:	1b c0       	rjmp	.+54     	; 0xbc6 <__floatsisf+0x6c>
 b90:	6f 5f       	subi	r22, 0xFF	; 255
 b92:	7f 4f       	sbci	r23, 0xFF	; 255
 b94:	8f 4f       	sbci	r24, 0xFF	; 255
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	16 c0       	rjmp	.+44     	; 0xbc6 <__floatsisf+0x6c>
 b9a:	88 23       	and	r24, r24
 b9c:	11 f0       	breq	.+4      	; 0xba2 <__floatsisf+0x48>
 b9e:	96 e9       	ldi	r25, 0x96	; 150
 ba0:	11 c0       	rjmp	.+34     	; 0xbc4 <__floatsisf+0x6a>
 ba2:	77 23       	and	r23, r23
 ba4:	21 f0       	breq	.+8      	; 0xbae <__floatsisf+0x54>
 ba6:	9e e8       	ldi	r25, 0x8E	; 142
 ba8:	87 2f       	mov	r24, r23
 baa:	76 2f       	mov	r23, r22
 bac:	05 c0       	rjmp	.+10     	; 0xbb8 <__floatsisf+0x5e>
 bae:	66 23       	and	r22, r22
 bb0:	71 f0       	breq	.+28     	; 0xbce <__floatsisf+0x74>
 bb2:	96 e8       	ldi	r25, 0x86	; 134
 bb4:	86 2f       	mov	r24, r22
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	2a f0       	brmi	.+10     	; 0xbc6 <__floatsisf+0x6c>
 bbc:	9a 95       	dec	r25
 bbe:	66 0f       	add	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	da f7       	brpl	.-10     	; 0xbbc <__floatsisf+0x62>
 bc6:	88 0f       	add	r24, r24
 bc8:	96 95       	lsr	r25
 bca:	87 95       	ror	r24
 bcc:	97 f9       	bld	r25, 7
 bce:	08 95       	ret

00000bd0 <__fp_inf>:
 bd0:	97 f9       	bld	r25, 7
 bd2:	9f 67       	ori	r25, 0x7F	; 127
 bd4:	80 e8       	ldi	r24, 0x80	; 128
 bd6:	70 e0       	ldi	r23, 0x00	; 0
 bd8:	60 e0       	ldi	r22, 0x00	; 0
 bda:	08 95       	ret

00000bdc <__fp_nan>:
 bdc:	9f ef       	ldi	r25, 0xFF	; 255
 bde:	80 ec       	ldi	r24, 0xC0	; 192
 be0:	08 95       	ret

00000be2 <__fp_pscA>:
 be2:	00 24       	eor	r0, r0
 be4:	0a 94       	dec	r0
 be6:	16 16       	cp	r1, r22
 be8:	17 06       	cpc	r1, r23
 bea:	18 06       	cpc	r1, r24
 bec:	09 06       	cpc	r0, r25
 bee:	08 95       	ret

00000bf0 <__fp_pscB>:
 bf0:	00 24       	eor	r0, r0
 bf2:	0a 94       	dec	r0
 bf4:	12 16       	cp	r1, r18
 bf6:	13 06       	cpc	r1, r19
 bf8:	14 06       	cpc	r1, r20
 bfa:	05 06       	cpc	r0, r21
 bfc:	08 95       	ret

00000bfe <__fp_round>:
 bfe:	09 2e       	mov	r0, r25
 c00:	03 94       	inc	r0
 c02:	00 0c       	add	r0, r0
 c04:	11 f4       	brne	.+4      	; 0xc0a <__fp_round+0xc>
 c06:	88 23       	and	r24, r24
 c08:	52 f0       	brmi	.+20     	; 0xc1e <__fp_round+0x20>
 c0a:	bb 0f       	add	r27, r27
 c0c:	40 f4       	brcc	.+16     	; 0xc1e <__fp_round+0x20>
 c0e:	bf 2b       	or	r27, r31
 c10:	11 f4       	brne	.+4      	; 0xc16 <__fp_round+0x18>
 c12:	60 ff       	sbrs	r22, 0
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <__fp_round+0x20>
 c16:	6f 5f       	subi	r22, 0xFF	; 255
 c18:	7f 4f       	sbci	r23, 0xFF	; 255
 c1a:	8f 4f       	sbci	r24, 0xFF	; 255
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	08 95       	ret

00000c20 <__fp_split3>:
 c20:	57 fd       	sbrc	r21, 7
 c22:	90 58       	subi	r25, 0x80	; 128
 c24:	44 0f       	add	r20, r20
 c26:	55 1f       	adc	r21, r21
 c28:	59 f0       	breq	.+22     	; 0xc40 <__fp_splitA+0x10>
 c2a:	5f 3f       	cpi	r21, 0xFF	; 255
 c2c:	71 f0       	breq	.+28     	; 0xc4a <__fp_splitA+0x1a>
 c2e:	47 95       	ror	r20

00000c30 <__fp_splitA>:
 c30:	88 0f       	add	r24, r24
 c32:	97 fb       	bst	r25, 7
 c34:	99 1f       	adc	r25, r25
 c36:	61 f0       	breq	.+24     	; 0xc50 <__fp_splitA+0x20>
 c38:	9f 3f       	cpi	r25, 0xFF	; 255
 c3a:	79 f0       	breq	.+30     	; 0xc5a <__fp_splitA+0x2a>
 c3c:	87 95       	ror	r24
 c3e:	08 95       	ret
 c40:	12 16       	cp	r1, r18
 c42:	13 06       	cpc	r1, r19
 c44:	14 06       	cpc	r1, r20
 c46:	55 1f       	adc	r21, r21
 c48:	f2 cf       	rjmp	.-28     	; 0xc2e <__fp_split3+0xe>
 c4a:	46 95       	lsr	r20
 c4c:	f1 df       	rcall	.-30     	; 0xc30 <__fp_splitA>
 c4e:	08 c0       	rjmp	.+16     	; 0xc60 <__fp_splitA+0x30>
 c50:	16 16       	cp	r1, r22
 c52:	17 06       	cpc	r1, r23
 c54:	18 06       	cpc	r1, r24
 c56:	99 1f       	adc	r25, r25
 c58:	f1 cf       	rjmp	.-30     	; 0xc3c <__fp_splitA+0xc>
 c5a:	86 95       	lsr	r24
 c5c:	71 05       	cpc	r23, r1
 c5e:	61 05       	cpc	r22, r1
 c60:	08 94       	sec
 c62:	08 95       	ret

00000c64 <__fp_zero>:
 c64:	e8 94       	clt

00000c66 <__fp_szero>:
 c66:	bb 27       	eor	r27, r27
 c68:	66 27       	eor	r22, r22
 c6a:	77 27       	eor	r23, r23
 c6c:	cb 01       	movw	r24, r22
 c6e:	97 f9       	bld	r25, 7
 c70:	08 95       	ret

00000c72 <__mulsf3>:
 c72:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulsf3x>
 c76:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
 c7a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
 c7e:	38 f0       	brcs	.+14     	; 0xc8e <__mulsf3+0x1c>
 c80:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
 c84:	20 f0       	brcs	.+8      	; 0xc8e <__mulsf3+0x1c>
 c86:	95 23       	and	r25, r21
 c88:	11 f0       	breq	.+4      	; 0xc8e <__mulsf3+0x1c>
 c8a:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
 c8e:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>
 c92:	11 24       	eor	r1, r1
 c94:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>

00000c98 <__mulsf3x>:
 c98:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
 c9c:	70 f3       	brcs	.-36     	; 0xc7a <__mulsf3+0x8>

00000c9e <__mulsf3_pse>:
 c9e:	95 9f       	mul	r25, r21
 ca0:	c1 f3       	breq	.-16     	; 0xc92 <__mulsf3+0x20>
 ca2:	95 0f       	add	r25, r21
 ca4:	50 e0       	ldi	r21, 0x00	; 0
 ca6:	55 1f       	adc	r21, r21
 ca8:	62 9f       	mul	r22, r18
 caa:	f0 01       	movw	r30, r0
 cac:	72 9f       	mul	r23, r18
 cae:	bb 27       	eor	r27, r27
 cb0:	f0 0d       	add	r31, r0
 cb2:	b1 1d       	adc	r27, r1
 cb4:	63 9f       	mul	r22, r19
 cb6:	aa 27       	eor	r26, r26
 cb8:	f0 0d       	add	r31, r0
 cba:	b1 1d       	adc	r27, r1
 cbc:	aa 1f       	adc	r26, r26
 cbe:	64 9f       	mul	r22, r20
 cc0:	66 27       	eor	r22, r22
 cc2:	b0 0d       	add	r27, r0
 cc4:	a1 1d       	adc	r26, r1
 cc6:	66 1f       	adc	r22, r22
 cc8:	82 9f       	mul	r24, r18
 cca:	22 27       	eor	r18, r18
 ccc:	b0 0d       	add	r27, r0
 cce:	a1 1d       	adc	r26, r1
 cd0:	62 1f       	adc	r22, r18
 cd2:	73 9f       	mul	r23, r19
 cd4:	b0 0d       	add	r27, r0
 cd6:	a1 1d       	adc	r26, r1
 cd8:	62 1f       	adc	r22, r18
 cda:	83 9f       	mul	r24, r19
 cdc:	a0 0d       	add	r26, r0
 cde:	61 1d       	adc	r22, r1
 ce0:	22 1f       	adc	r18, r18
 ce2:	74 9f       	mul	r23, r20
 ce4:	33 27       	eor	r19, r19
 ce6:	a0 0d       	add	r26, r0
 ce8:	61 1d       	adc	r22, r1
 cea:	23 1f       	adc	r18, r19
 cec:	84 9f       	mul	r24, r20
 cee:	60 0d       	add	r22, r0
 cf0:	21 1d       	adc	r18, r1
 cf2:	82 2f       	mov	r24, r18
 cf4:	76 2f       	mov	r23, r22
 cf6:	6a 2f       	mov	r22, r26
 cf8:	11 24       	eor	r1, r1
 cfa:	9f 57       	subi	r25, 0x7F	; 127
 cfc:	50 40       	sbci	r21, 0x00	; 0
 cfe:	9a f0       	brmi	.+38     	; 0xd26 <__mulsf3_pse+0x88>
 d00:	f1 f0       	breq	.+60     	; 0xd3e <__mulsf3_pse+0xa0>
 d02:	88 23       	and	r24, r24
 d04:	4a f0       	brmi	.+18     	; 0xd18 <__mulsf3_pse+0x7a>
 d06:	ee 0f       	add	r30, r30
 d08:	ff 1f       	adc	r31, r31
 d0a:	bb 1f       	adc	r27, r27
 d0c:	66 1f       	adc	r22, r22
 d0e:	77 1f       	adc	r23, r23
 d10:	88 1f       	adc	r24, r24
 d12:	91 50       	subi	r25, 0x01	; 1
 d14:	50 40       	sbci	r21, 0x00	; 0
 d16:	a9 f7       	brne	.-22     	; 0xd02 <__mulsf3_pse+0x64>
 d18:	9e 3f       	cpi	r25, 0xFE	; 254
 d1a:	51 05       	cpc	r21, r1
 d1c:	80 f0       	brcs	.+32     	; 0xd3e <__mulsf3_pse+0xa0>
 d1e:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
 d22:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
 d26:	5f 3f       	cpi	r21, 0xFF	; 255
 d28:	e4 f3       	brlt	.-8      	; 0xd22 <__mulsf3_pse+0x84>
 d2a:	98 3e       	cpi	r25, 0xE8	; 232
 d2c:	d4 f3       	brlt	.-12     	; 0xd22 <__mulsf3_pse+0x84>
 d2e:	86 95       	lsr	r24
 d30:	77 95       	ror	r23
 d32:	67 95       	ror	r22
 d34:	b7 95       	ror	r27
 d36:	f7 95       	ror	r31
 d38:	e7 95       	ror	r30
 d3a:	9f 5f       	subi	r25, 0xFF	; 255
 d3c:	c1 f7       	brne	.-16     	; 0xd2e <__mulsf3_pse+0x90>
 d3e:	fe 2b       	or	r31, r30
 d40:	88 0f       	add	r24, r24
 d42:	91 1d       	adc	r25, r1
 d44:	96 95       	lsr	r25
 d46:	87 95       	ror	r24
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <__tablejump2__>:
 d4c:	ee 0f       	add	r30, r30
 d4e:	ff 1f       	adc	r31, r31
 d50:	05 90       	lpm	r0, Z+
 d52:	f4 91       	lpm	r31, Z
 d54:	e0 2d       	mov	r30, r0
 d56:	09 94       	ijmp

00000d58 <__mulshisi3>:
 d58:	b7 ff       	sbrs	r27, 7
 d5a:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__muluhisi3>

00000d5e <__mulohisi3>:
 d5e:	0e 94 b4 06 	call	0xd68	; 0xd68 <__muluhisi3>
 d62:	82 1b       	sub	r24, r18
 d64:	93 0b       	sbc	r25, r19
 d66:	08 95       	ret

00000d68 <__muluhisi3>:
 d68:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__umulhisi3>
 d6c:	a5 9f       	mul	r26, r21
 d6e:	90 0d       	add	r25, r0
 d70:	b4 9f       	mul	r27, r20
 d72:	90 0d       	add	r25, r0
 d74:	a4 9f       	mul	r26, r20
 d76:	80 0d       	add	r24, r0
 d78:	91 1d       	adc	r25, r1
 d7a:	11 24       	eor	r1, r1
 d7c:	08 95       	ret

00000d7e <__umulhisi3>:
 d7e:	a2 9f       	mul	r26, r18
 d80:	b0 01       	movw	r22, r0
 d82:	b3 9f       	mul	r27, r19
 d84:	c0 01       	movw	r24, r0
 d86:	a3 9f       	mul	r26, r19
 d88:	70 0d       	add	r23, r0
 d8a:	81 1d       	adc	r24, r1
 d8c:	11 24       	eor	r1, r1
 d8e:	91 1d       	adc	r25, r1
 d90:	b2 9f       	mul	r27, r18
 d92:	70 0d       	add	r23, r0
 d94:	81 1d       	adc	r24, r1
 d96:	11 24       	eor	r1, r1
 d98:	91 1d       	adc	r25, r1
 d9a:	08 95       	ret

00000d9c <_exit>:
 d9c:	f8 94       	cli

00000d9e <__stop_program>:
 d9e:	ff cf       	rjmp	.-2      	; 0xd9e <__stop_program>
