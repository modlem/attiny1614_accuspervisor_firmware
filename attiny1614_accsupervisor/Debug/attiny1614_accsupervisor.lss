
attiny1614_accsupervisor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803800  00000dbe  00000e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00803806  00803806  00000e58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036be  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cbd  00000000  00000000  000046c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bfb  00000000  00000000  00006383  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00006f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c1c  00000000  00000000  000072c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb3  00000000  00000000  00008edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00009b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_7>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  68:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  6c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_27>
  70:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  7c:	30 03       	mulsu	r19, r16
  7e:	e6 03       	fmuls	r22, r22
  80:	49 03       	fmul	r20, r17
  82:	e6 03       	fmuls	r22, r22
  84:	e6 03       	fmuls	r22, r22
  86:	e6 03       	fmuls	r22, r22
  88:	e6 03       	fmuls	r22, r22
  8a:	e6 03       	fmuls	r22, r22
  8c:	62 03       	mulsu	r22, r18
  8e:	e6 03       	fmuls	r22, r22
  90:	7b 03       	fmul	r23, r19
  92:	e6 03       	fmuls	r22, r22
  94:	94 03       	fmuls	r17, r20
  96:	e6 03       	fmuls	r22, r22
  98:	e6 03       	fmuls	r22, r22
  9a:	e6 03       	fmuls	r22, r22
  9c:	ba 03       	fmulsu	r19, r18
  9e:	e6 03       	fmuls	r22, r22
  a0:	d1 03       	fmuls	r21, r17

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	df e3       	ldi	r29, 0x3F	; 63
  ac:	de bf       	out	0x3e, r29	; 62

000000ae <__do_copy_data>:
  ae:	18 e3       	ldi	r17, 0x38	; 56
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b8 e3       	ldi	r27, 0x38	; 56
  b4:	ee eb       	ldi	r30, 0xBE	; 190
  b6:	fd e0       	ldi	r31, 0x0D	; 13
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a6 30       	cpi	r26, 0x06	; 6
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
  c4:	28 e3       	ldi	r18, 0x38	; 56
  c6:	a6 e0       	ldi	r26, 0x06	; 6
  c8:	b8 e3       	ldi	r27, 0x38	; 56
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a6 34       	cpi	r26, 0x46	; 70
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <main>
  d8:	0c 94 dd 06 	jmp	0xdba	; 0xdba <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <__vector_7>:
}

int isAdcOn()
{
	return _gpio_status & GPIO_ADC_MASK;
}
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
 108:	0e 94 9c 04 	call	0x938	; 0x938 <incTick>
 10c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 110:	8f 31       	cpi	r24, 0x1F	; 31
 112:	18 f0       	brcs	.+6      	; 0x11a <__vector_7+0x3a>
 114:	8e e1       	ldi	r24, 0x1E	; 30
 116:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 11a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 11e:	88 23       	and	r24, r24
 120:	29 f0       	breq	.+10     	; 0x12c <__vector_7+0x4c>
 122:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 126:	81 50       	subi	r24, 0x01	; 1
 128:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_27>:
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
 164:	1f c0       	rjmp	.+62     	; 0x1a4 <__vector_27+0x56>
 166:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 16a:	81 fd       	sbrc	r24, 1
 16c:	1b c0       	rjmp	.+54     	; 0x1a4 <__vector_27+0x56>
 16e:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 172:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 176:	9c 01       	movw	r18, r24
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	20 93 0f 38 	sts	0x380F, r18	; 0x80380f <uart0_rbuf_wpnt>
 180:	30 93 10 38 	sts	0x3810, r19	; 0x803810 <uart0_rbuf_wpnt+0x1>
 184:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 188:	fc 01       	movw	r30, r24
 18a:	ef 5e       	subi	r30, 0xEF	; 239
 18c:	f7 4c       	sbci	r31, 0xC7	; 199
 18e:	20 83       	st	Z, r18
 190:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 194:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 198:	80 97       	sbiw	r24, 0x20	; 32
 19a:	20 f0       	brcs	.+8      	; 0x1a4 <__vector_27+0x56>
 19c:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <uart0_rbuf_wpnt>
 1a0:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <uart0_rbuf_wpnt+0x1>
 1a4:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
 1a8:	88 23       	and	r24, r24
 1aa:	ec f2       	brlt	.-70     	; 0x166 <__vector_27+0x18>
 1ac:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 1b0:	30 91 0e 38 	lds	r19, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1b4:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 1b8:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 1bc:	28 17       	cp	r18, r24
 1be:	39 07       	cpc	r19, r25
 1c0:	99 f4       	brne	.+38     	; 0x1e8 <__vector_27+0x9a>
 1c2:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 1c6:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <uart0_rbuf_rpnt>
 1d0:	90 93 0e 38 	sts	0x380E, r25	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1d4:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 1d8:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1dc:	80 97       	sbiw	r24, 0x20	; 32
 1de:	20 f0       	brcs	.+8      	; 0x1e8 <__vector_27+0x9a>
 1e0:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt>
 1e4:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <uart0_rbuf_rpnt+0x1>
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <RTC_init>:
 1fe:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
 202:	81 11       	cpse	r24, r1
 204:	fc cf       	rjmp	.-8      	; 0x1fe <RTC_init>
 206:	e0 e4       	ldi	r30, 0x40	; 64
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	87 83       	std	Z+7, r24	; 0x07
 20e:	85 83       	std	Z+5, r24	; 0x05
 210:	82 8b       	std	Z+18, r24	; 0x12
 212:	89 e4       	ldi	r24, 0x49	; 73
 214:	80 8b       	std	Z+16, r24	; 0x10
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	08 95       	ret

0000021c <SLPCTRL_init>:
 21c:	e0 e5       	ldi	r30, 0x50	; 80
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	84 60       	ori	r24, 0x04	; 4
 224:	80 83       	st	Z, r24
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	08 95       	ret

00000232 <GPIO_init>:
 232:	e0 e0       	ldi	r30, 0x00	; 0
 234:	f4 e0       	ldi	r31, 0x04	; 4
 236:	80 81       	ld	r24, Z
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	80 83       	st	Z, r24
 23c:	e0 e2       	ldi	r30, 0x20	; 32
 23e:	f4 e0       	ldi	r31, 0x04	; 4
 240:	80 81       	ld	r24, Z
 242:	82 60       	ori	r24, 0x02	; 2
 244:	80 83       	st	Z, r24
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	08 95       	ret

0000024c <USART0_init>:
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	c0 91 24 11 	lds	r28, 0x1124	; 0x801124 <__TEXT_REGION_LENGTH__+0x701124>
 256:	e0 e0       	ldi	r30, 0x00	; 0
 258:	f2 e0       	ldi	r31, 0x02	; 2
 25a:	21 81       	ldd	r18, Z+1	; 0x01
 25c:	2e 7f       	andi	r18, 0xFE	; 254
 25e:	21 83       	std	Z+1, r18	; 0x01
 260:	e0 e2       	ldi	r30, 0x20	; 32
 262:	f4 e0       	ldi	r31, 0x04	; 4
 264:	20 81       	ld	r18, Z
 266:	27 7f       	andi	r18, 0xF7	; 247
 268:	20 83       	st	Z, r18
 26a:	20 81       	ld	r18, Z
 26c:	24 60       	ori	r18, 0x04	; 4
 26e:	20 83       	st	Z, r18
 270:	0e 94 ba 05 	call	0xb74	; 0xb74 <__floatunsisf>
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	40 e8       	ldi	r20, 0x80	; 128
 27a:	51 e4       	ldi	r21, 0x41	; 65
 27c:	0e 94 48 06 	call	0xc90	; 0xc90 <__mulsf3>
 280:	9b 01       	movw	r18, r22
 282:	ac 01       	movw	r20, r24
 284:	64 e5       	ldi	r22, 0x54	; 84
 286:	73 e7       	ldi	r23, 0x73	; 115
 288:	8b e4       	ldi	r24, 0x4B	; 75
 28a:	9d e4       	ldi	r25, 0x4D	; 77
 28c:	0e 94 12 05 	call	0xa24	; 0xa24 <__divsf3>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	5f e3       	ldi	r21, 0x3F	; 63
 298:	0e 94 a6 04 	call	0x94c	; 0x94c <__addsf3>
 29c:	0e 94 84 05 	call	0xb08	; 0xb08 <__fixsfsi>
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	ac 2f       	mov	r26, r28
 2a6:	cc 0f       	add	r28, r28
 2a8:	bb 0b       	sbc	r27, r27
 2aa:	bc 5f       	subi	r27, 0xFC	; 252
 2ac:	0e 94 bb 06 	call	0xd76	; 0xd76 <__mulshisi3>
 2b0:	8b 01       	movw	r16, r22
 2b2:	9c 01       	movw	r18, r24
 2b4:	99 23       	and	r25, r25
 2b6:	24 f4       	brge	.+8      	; 0x2c0 <USART0_init+0x74>
 2b8:	01 50       	subi	r16, 0x01	; 1
 2ba:	1c 4f       	sbci	r17, 0xFC	; 252
 2bc:	2f 4f       	sbci	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	d9 01       	movw	r26, r18
 2c2:	c8 01       	movw	r24, r16
 2c4:	07 2e       	mov	r0, r23
 2c6:	7a e0       	ldi	r23, 0x0A	; 10
 2c8:	b5 95       	asr	r27
 2ca:	a7 95       	ror	r26
 2cc:	97 95       	ror	r25
 2ce:	87 95       	ror	r24
 2d0:	7a 95       	dec	r23
 2d2:	d1 f7       	brne	.-12     	; 0x2c8 <USART0_init+0x7c>
 2d4:	70 2d       	mov	r23, r0
 2d6:	e0 e0       	ldi	r30, 0x00	; 0
 2d8:	f8 e0       	ldi	r31, 0x08	; 8
 2da:	80 87       	std	Z+8, r24	; 0x08
 2dc:	91 87       	std	Z+9, r25	; 0x09
 2de:	80 e8       	ldi	r24, 0x80	; 128
 2e0:	85 83       	std	Z+5, r24	; 0x05
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	87 83       	std	Z+7, r24	; 0x07
 2e6:	13 86       	std	Z+11, r1	; 0x0b
 2e8:	80 ec       	ldi	r24, 0xC0	; 192
 2ea:	86 83       	std	Z+6, r24	; 0x06
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <USART0_sendChar>:
 2f8:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 2fc:	95 ff       	sbrs	r25, 5
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <USART0_sendChar>
 300:	e0 e0       	ldi	r30, 0x00	; 0
 302:	f8 e0       	ldi	r31, 0x08	; 8
 304:	94 81       	ldd	r25, Z+4	; 0x04
 306:	90 64       	ori	r25, 0x40	; 64
 308:	94 83       	std	Z+4, r25	; 0x04
 30a:	82 83       	std	Z+2, r24	; 0x02
 30c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 310:	86 ff       	sbrs	r24, 6
 312:	fc cf       	rjmp	.-8      	; 0x30c <USART0_sendChar+0x14>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	08 95       	ret

0000031a <USART0_sendBuf>:
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	7c 01       	movw	r14, r24
 326:	16 2f       	mov	r17, r22
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	09 c0       	rjmp	.+18     	; 0x340 <USART0_sendBuf+0x26>
 32e:	f7 01       	movw	r30, r14
 330:	ec 0f       	add	r30, r28
 332:	fd 1f       	adc	r31, r29
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <USART0_sendChar>
 33e:	21 96       	adiw	r28, 0x01	; 1
 340:	81 2f       	mov	r24, r17
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	c8 17       	cp	r28, r24
 346:	d9 07       	cpc	r29, r25
 348:	90 f3       	brcs	.-28     	; 0x32e <USART0_sendBuf+0x14>
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <relayOn>:
 356:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 360:	e0 e2       	ldi	r30, 0x20	; 32
 362:	f4 e0       	ldi	r31, 0x04	; 4
 364:	85 81       	ldd	r24, Z+5	; 0x05
 366:	82 60       	ori	r24, 0x02	; 2
 368:	85 83       	std	Z+5, r24	; 0x05
 36a:	08 95       	ret

0000036c <relayOff>:
 36c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 376:	e0 e2       	ldi	r30, 0x20	; 32
 378:	f4 e0       	ldi	r31, 0x04	; 4
 37a:	86 81       	ldd	r24, Z+6	; 0x06
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	86 83       	std	Z+6, r24	; 0x06
 380:	08 95       	ret

00000382 <adcOn>:
 382:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 386:	82 60       	ori	r24, 0x02	; 2
 388:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 38c:	e0 e0       	ldi	r30, 0x00	; 0
 38e:	f4 e0       	ldi	r31, 0x04	; 4
 390:	85 81       	ldd	r24, Z+5	; 0x05
 392:	88 60       	ori	r24, 0x08	; 8
 394:	85 83       	std	Z+5, r24	; 0x05
 396:	08 95       	ret

00000398 <adcOff>:
 398:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 39c:	8d 7f       	andi	r24, 0xFD	; 253
 39e:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <_gpio_status>
 3a2:	e0 e0       	ldi	r30, 0x00	; 0
 3a4:	f4 e0       	ldi	r31, 0x04	; 4
 3a6:	86 81       	ldd	r24, Z+6	; 0x06
 3a8:	88 60       	ori	r24, 0x08	; 8
 3aa:	86 83       	std	Z+6, r24	; 0x06
 3ac:	08 95       	ret

000003ae <isRelayOn>:
 3ae:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <_gpio_status>
 3b2:	81 70       	andi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	08 95       	ret

000003b8 <ADC_init>:

int ADC_init(void)
{
	// No inversion, no pull-up, no int., dig. buffer disable on PA1 and PA2.
	PORTA.PIN1CTRL &= ~PORT_ISC_gm;
 3b8:	e0 e0       	ldi	r30, 0x00	; 0
 3ba:	f4 e0       	ldi	r31, 0x04	; 4
 3bc:	81 89       	ldd	r24, Z+17	; 0x11
 3be:	88 7f       	andi	r24, 0xF8	; 248
 3c0:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL &= ~PORT_ISC_gm;
 3c2:	82 89       	ldd	r24, Z+18	; 0x12
 3c4:	88 7f       	andi	r24, 0xF8	; 248
 3c6:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3c8:	81 89       	ldd	r24, Z+17	; 0x11
 3ca:	84 60       	ori	r24, 0x04	; 4
 3cc:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 3ce:	82 89       	ldd	r24, Z+18	; 0x12
 3d0:	84 60       	ori	r24, 0x04	; 4
 3d2:	82 8b       	std	Z+18, r24	; 0x12
	
	// No run in standby, full 10-bit resolution, no freerun, enable.
	ADC0.CTRLA = (1 & ADC_ENABLE_bm);
 3d4:	e0 e0       	ldi	r30, 0x00	; 0
 3d6:	f6 e0       	ldi	r31, 0x06	; 6
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 83       	st	Z, r24
	// No accumulation. Max. value will be 0x3FF (max. of 10-bit)
	ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc;
 3dc:	11 82       	std	Z+1, r1	; 0x01
	// Big sample cap., VDD ref., DIV256 prescaler.
	// Ya, I know. It's an overkill. Better than going under.
	ADC0.CTRLC = ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV256_gc;
 3de:	97 e1       	ldi	r25, 0x17	; 23
 3e0:	92 83       	std	Z+2, r25	; 0x02
	// 256clk startup delay, no auto sample delay, no delay between samples.
	ADC0.CTRLD = ADC_INITDLY_DLY256_gc;
 3e2:	90 ea       	ldi	r25, 0xA0	; 160
 3e4:	93 83       	std	Z+3, r25	; 0x03
	// No window comp.
	ADC0.CTRLE = ADC_WINCM_NONE_gc;
 3e6:	14 82       	std	Z+4, r1	; 0x04
	// 0 sample len.
	ADC0.SAMPCTRL = (0 & ADC_SAMPLEN_gm);
 3e8:	15 82       	std	Z+5, r1	; 0x05
	// Not using evt. control
	ADC0.EVCTRL = (0 & ADC_STARTEI_bm);
 3ea:	11 86       	std	Z+9, r1	; 0x09
	// Not using int. control
	ADC0.INTCTRL = (0 & ADC_WCMP_bm) | (0 & ADC_RESRDY_bm);
 3ec:	12 86       	std	Z+10, r1	; 0x0a
	// Clearing possible previous int. flags
	ADC0.INTFLAGS = (1 & ADC_WCMP_bm) | (1 & ADC_RESRDY_bm);
 3ee:	83 87       	std	Z+11, r24	; 0x0b
	// Halting the peripheral in debug halt
	ADC0.DBGCTRL = (0 & ADC_DBGRUN_bm);
 3f0:	14 86       	std	Z+12, r1	; 0x0c
	
	return 0;
}
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	08 95       	ret

000003f8 <doAdcThings>:

void doAdcThings()
{
	pending_sleep_flag |= PENDING_SLEEP_ADC;
 3f8:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 3fc:	82 60       	ori	r24, 0x02	; 2
 3fe:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
	if((ADC0.COMMAND & ADC_STCONV_bm) == 0)
 402:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 406:	80 fd       	sbrc	r24, 0
 408:	3a c0       	rjmp	.+116    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		if(ADC0.INTFLAGS & ADC_RESRDY_bm)
 40a:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
 40e:	80 ff       	sbrs	r24, 0
 410:	27 c0       	rjmp	.+78     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			// Something has been done from previous conversion.
			if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 412:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 416:	8f 71       	andi	r24, 0x1F	; 31
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	69 f4       	brne	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			{
				// VBAT
				vbat_volt = ADC0.RES;
 41c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 420:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 424:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <vbat_volt>
 428:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <vbat_volt+0x1>
				adc_state |= 0x1;
 42c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 430:	81 60       	ori	r24, 0x01	; 1
 432:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc_state>
			}
			if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN2_gc)
 436:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 43a:	8f 71       	andi	r24, 0x1F	; 31
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	69 f4       	brne	.+26     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			{
				// VACC
				vacc_volt = ADC0.RES;
 440:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 444:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
 448:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <vacc_volt>
 44c:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <vacc_volt+0x1>
				adc_state |= 0x2;
 450:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 454:	82 60       	ori	r24, 0x02	; 2
 456:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc_state>
			}
			ADC0.INTFLAGS = (1 & ADC_RESRDY_bm);
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
		}
		
		if((ADC0.MUXPOS & ADC_MUXPOS_gm) == ADC_MUXPOS_AIN1_gc)
 460:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 464:	8f 71       	andi	r24, 0x1F	; 31
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	21 f4       	brne	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN2_gc;
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 470:	03 c0       	rjmp	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		}
		else
		{
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
		}
		ADC0.COMMAND = (1 & ADC_STCONV_bm);
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 47e:	08 95       	ret

00000480 <doSwitchingThings>:
	}
}

void doSwitchingThings(void)
{
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
	if(vacc_volt >= vacc_threshold)
 488:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt>
 48c:	10 91 09 38 	lds	r17, 0x3809	; 0x803809 <vacc_volt+0x1>
 490:	c0 91 01 38 	lds	r28, 0x3801	; 0x803801 <vacc_threshold>
 494:	d0 91 02 38 	lds	r29, 0x3802	; 0x803802 <vacc_threshold+0x1>
 498:	0c 17       	cp	r16, r28
 49a:	1d 07       	cpc	r17, r29
 49c:	18 f0       	brcs	.+6      	; 0x4a4 <doSwitchingThings+0x24>
	{
		tx2_timeout = TX2_TIMEOUT_SEC;
 49e:	8e e1       	ldi	r24, 0x1E	; 30
 4a0:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
	}
	
	if(isRelayOn())
 4a4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <isRelayOn>
 4a8:	89 2b       	or	r24, r25
 4aa:	d1 f0       	breq	.+52     	; 0x4e0 <doSwitchingThings+0x60>
	{
		if(vacc_volt < vacc_threshold || vbat_volt < vbat_threshold)
 4ac:	0c 17       	cp	r16, r28
 4ae:	1d 07       	cpc	r17, r29
 4b0:	58 f0       	brcs	.+22     	; 0x4c8 <doSwitchingThings+0x48>
 4b2:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 4b6:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <vbat_volt+0x1>
 4ba:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <vbat_threshold>
 4be:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <vbat_threshold+0x1>
 4c2:	28 17       	cp	r18, r24
 4c4:	39 07       	cpc	r19, r25
 4c6:	88 f4       	brcc	.+34     	; 0x4ea <doSwitchingThings+0x6a>
		{
			if(tx2_timeout == 0)
 4c8:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 4cc:	81 11       	cpse	r24, r1
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <doSwitchingThings+0x6a>
			{
				relayOff();
 4d0:	0e 94 b6 01 	call	0x36c	; 0x36c <relayOff>
				pending_sleep_flag &= ~PENDING_SLEEP_UART;
 4d4:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 4d8:	8e 7f       	andi	r24, 0xFE	; 254
 4da:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <doSwitchingThings+0x6a>
		}
	}
	else
	{
		// Relay is always on if the accessory power presents
		if(vacc_volt >= vacc_threshold) relayOn();
 4e0:	0c 17       	cp	r16, r28
 4e2:	1d 07       	cpc	r17, r29
 4e4:	10 f0       	brcs	.+4      	; 0x4ea <doSwitchingThings+0x6a>
 4e6:	0e 94 ab 01 	call	0x356	; 0x356 <relayOn>
	}
}
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <main>:
{
	//FILE USART_stream = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_WRITE);
	uint8_t oldTick = 255;
	uint8_t currentTick;
	
	cli();
 4f4:	f8 94       	cli
	RTC_init();
 4f6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <RTC_init>
	SLPCTRL_init();
 4fa:	0e 94 0e 01 	call	0x21c	; 0x21c <SLPCTRL_init>
	GPIO_init();
 4fe:	0e 94 19 01 	call	0x232	; 0x232 <GPIO_init>
	USART0_init(115200);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	72 ec       	ldi	r23, 0xC2	; 194
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 26 01 	call	0x24c	; 0x24c <USART0_init>
	ADC_init();
 50e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_init>
	sei();
 512:	78 94       	sei
	// Protocol8086 parser in action
	//stdout = &USART_stream;
	parserInit();
 514:	0e 94 fd 03 	call	0x7fa	; 0x7fa <parserInit>
	setParseDoneCallback(NULL);
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 04 04 	call	0x808	; 0x808 <setParseDoneCallback>
	setUartSendFunc(USART0_sendBuf);
 520:	8d e8       	ldi	r24, 0x8D	; 141
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 09 04 	call	0x812	; 0x812 <setUartSendFunc>
	
	pending_sleep_flag = 0 & PENDING_SLEEP_MASK;
 528:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
	adcOn();
 52c:	0e 94 c1 01 	call	0x382	; 0x382 <adcOn>
}

int main(void)
{
	//FILE USART_stream = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_WRITE);
	uint8_t oldTick = 255;
 530:	df ef       	ldi	r29, 0xFF	; 255
	adcOn();

	// Static scheduling loop
    while (1)
    {
		currentTick = getCurrentTick();
 532:	0e 94 a2 04 	call	0x944	; 0x944 <getCurrentTick>
 536:	c8 2f       	mov	r28, r24
		if(oldTick != currentTick)
 538:	d8 17       	cp	r29, r24
 53a:	b9 f0       	breq	.+46     	; 0x56a <main+0x76>
		{
			oldTick = currentTick;
			if(isRelayOn())
 53c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <isRelayOn>
 540:	89 2b       	or	r24, r25
 542:	91 f0       	breq	.+36     	; 0x568 <main+0x74>
			{
				sendCmd(CMD_HELLO, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 544:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <vacc_volt>
 548:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <vacc_volt+0x1>
 54c:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <vbat_volt>
 550:	60 91 0b 38 	lds	r22, 0x380B	; 0x80380b <vbat_volt+0x1>
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 0e 04 	call	0x81c	; 0x81c <sendCmd>
				pending_sleep_flag |= PENDING_SLEEP_UART;
 55a:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 55e:	81 60       	ori	r24, 0x01	; 1
 560:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
    while (1)
    {
		currentTick = getCurrentTick();
		if(oldTick != currentTick)
		{
			oldTick = currentTick;
 564:	dc 2f       	mov	r29, r28
 566:	01 c0       	rjmp	.+2      	; 0x56a <main+0x76>
 568:	dc 2f       	mov	r29, r28
				sendCmd(CMD_HELLO, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
				pending_sleep_flag |= PENDING_SLEEP_UART;
			}
		}
		
		doAdcThings();
 56a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <doAdcThings>
		if((adc_state & 0x3) == 0x3)
 56e:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc_state>
 572:	83 70       	andi	r24, 0x03	; 3
 574:	83 30       	cpi	r24, 0x03	; 3
 576:	49 f4       	brne	.+18     	; 0x58a <main+0x96>
		{
			adc_state = 0;
 578:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <adc_state>
			doSwitchingThings();
 57c:	0e 94 40 02 	call	0x480	; 0x480 <doSwitchingThings>
			pending_sleep_flag &= ~PENDING_SLEEP_ADC;
 580:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 584:	8d 7f       	andi	r24, 0xFD	; 253
 586:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
		}

		if(uart0_rbuf_rpnt != uart0_rbuf_wpnt)
 58a:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 58e:	30 91 0e 38 	lds	r19, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 592:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <uart0_rbuf_wpnt>
 596:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <uart0_rbuf_wpnt+0x1>
 59a:	28 17       	cp	r18, r24
 59c:	39 07       	cpc	r19, r25
 59e:	d9 f0       	breq	.+54     	; 0x5d6 <main+0xe2>
		{
			parseData(uart0_rbuf[uart0_rbuf_rpnt++]);
 5a0:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 5a4:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 5a8:	9c 01       	movw	r18, r24
 5aa:	2f 5f       	subi	r18, 0xFF	; 255
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	20 93 0d 38 	sts	0x380D, r18	; 0x80380d <uart0_rbuf_rpnt>
 5b2:	30 93 0e 38 	sts	0x380E, r19	; 0x80380e <uart0_rbuf_rpnt+0x1>
 5b6:	fc 01       	movw	r30, r24
 5b8:	ef 5e       	subi	r30, 0xEF	; 239
 5ba:	f7 4c       	sbci	r31, 0xC7	; 199
 5bc:	80 81       	ld	r24, Z
 5be:	0e 94 38 04 	call	0x870	; 0x870 <parseData>
			if(uart0_rbuf_rpnt >= UART_BUFLEN) uart0_rbuf_rpnt = 0;
 5c2:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <uart0_rbuf_rpnt>
 5c6:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <uart0_rbuf_rpnt+0x1>
 5ca:	80 97       	sbiw	r24, 0x20	; 32
 5cc:	20 f0       	brcs	.+8      	; 0x5d6 <main+0xe2>
 5ce:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <uart0_rbuf_rpnt>
 5d2:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <uart0_rbuf_rpnt+0x1>
		}
		
		if((pending_sleep_flag & PENDING_SLEEP_MASK) == 0)
 5d6:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 5da:	83 70       	andi	r24, 0x03	; 3
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <main+0xec>
 5de:	a9 cf       	rjmp	.-174    	; 0x532 <main+0x3e>
		{
			adcOff();
 5e0:	0e 94 cc 01 	call	0x398	; 0x398 <adcOff>
			sleep_cpu();
 5e4:	88 95       	sleep
			adcOn();
 5e6:	0e 94 c1 01 	call	0x382	; 0x382 <adcOn>
 5ea:	a3 cf       	rjmp	.-186    	; 0x532 <main+0x3e>

000005ec <_encapsulateData>:
static void (*uartSend)(uint8_t *buf, uint8_t szBuf) = NULL;

static int parserState = 0;

void _encapsulateData(uint8_t *buf8, uint8_t one, uint8_t two, uint8_t three, uint8_t four, uint8_t five)
{
 5ec:	ef 92       	push	r14
 5ee:	0f 93       	push	r16
 5f0:	fc 01       	movw	r30, r24
	buf8[0] = UART_STX;
 5f2:	80 e8       	ldi	r24, 0x80	; 128
 5f4:	80 83       	st	Z, r24
	buf8[1] = one;
 5f6:	61 83       	std	Z+1, r22	; 0x01
	buf8[2] = two;
 5f8:	42 83       	std	Z+2, r20	; 0x02
	buf8[3] = three;
 5fa:	23 83       	std	Z+3, r18	; 0x03
	buf8[4] = four;
 5fc:	04 83       	std	Z+4, r16	; 0x04
	buf8[5] = five;
 5fe:	e5 82       	std	Z+5, r14	; 0x05
	buf8[6] = one + two + three + four + five;
 600:	46 0f       	add	r20, r22
 602:	24 0f       	add	r18, r20
 604:	02 0f       	add	r16, r18
 606:	e0 0e       	add	r14, r16
 608:	e6 82       	std	Z+6, r14	; 0x06
	buf8[7] = UART_ETX;
 60a:	86 e8       	ldi	r24, 0x86	; 134
 60c:	87 83       	std	Z+7, r24	; 0x07
}
 60e:	0f 91       	pop	r16
 610:	ef 90       	pop	r14
 612:	08 95       	ret

00000614 <_parseDone>:

void _parseDone(uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
 614:	ef 92       	push	r14
 616:	0f 93       	push	r16
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
 620:	28 97       	sbiw	r28, 0x08	; 8
 622:	cd bf       	out	0x3d, r28	; 61
 624:	de bf       	out	0x3e, r29	; 62
	extern uint16_t vacc_volt;
	extern uint16_t vbat_threshold;
	extern uint16_t vacc_threshold;
	extern volatile uint8_t tx2_timeout;
	extern uint8_t pending_sleep_flag;
	uint8_t sendBuf[8] = {0,};
 626:	de 01       	movw	r26, r28
 628:	11 96       	adiw	r26, 0x01	; 1
 62a:	98 e0       	ldi	r25, 0x08	; 8
 62c:	fd 01       	movw	r30, r26
 62e:	11 92       	st	Z+, r1
 630:	9a 95       	dec	r25
 632:	e9 f7       	brne	.-6      	; 0x62e <_parseDone+0x1a>

	if(parseDoneCallBack != NULL) parseDoneCallBack(data1, data2, data3, data4, data5);
 634:	e0 91 42 38 	lds	r30, 0x3842	; 0x803842 <parseDoneCallBack>
 638:	f0 91 43 38 	lds	r31, 0x3843	; 0x803843 <parseDoneCallBack+0x1>
 63c:	30 97       	sbiw	r30, 0x00	; 0
 63e:	11 f0       	breq	.+4      	; 0x644 <_parseDone+0x30>
 640:	09 95       	icall
 642:	d3 c0       	rjmp	.+422    	; 0x7ea <_parseDone+0x1d6>
	else
	{
		/* Default Command Behaviour Parser */
#if _ROLE == PWR_MONITOR
		tx2_timeout = TX2_TIMEOUT_SEC;
 644:	9e e1       	ldi	r25, 0x1E	; 30
 646:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
		switch(data1)
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	fc 01       	movw	r30, r24
 64e:	31 97       	sbiw	r30, 0x01	; 1
 650:	e3 31       	cpi	r30, 0x13	; 19
 652:	f1 05       	cpc	r31, r1
 654:	08 f0       	brcs	.+2      	; 0x658 <_parseDone+0x44>
 656:	ba c0       	rjmp	.+372    	; 0x7cc <_parseDone+0x1b8>
 658:	e2 5c       	subi	r30, 0xC2	; 194
 65a:	ff 4f       	sbci	r31, 0xFF	; 255
 65c:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__tablejump2__>
		{
		case CMD_HELLO:
			_encapsulateData(sendBuf, CMD_HELLO2, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 660:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 664:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 668:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 66c:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 670:	62 e0       	ldi	r22, 0x02	; 2
 672:	ce 01       	movw	r24, r28
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 67a:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 67e:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 682:	30 97       	sbiw	r30, 0x00	; 0
 684:	09 f4       	brne	.+2      	; 0x688 <_parseDone+0x74>
 686:	a2 c0       	rjmp	.+324    	; 0x7cc <_parseDone+0x1b8>
 688:	68 e0       	ldi	r22, 0x08	; 8
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	09 95       	icall
 690:	9d c0       	rjmp	.+314    	; 0x7cc <_parseDone+0x1b8>
			break;
		case CMD_HELLO2:
			break;
		case CMD_PING:
			_encapsulateData(sendBuf, CMD_PONG, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 692:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 696:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 69a:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 69e:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 6a2:	64 e0       	ldi	r22, 0x04	; 4
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 6ac:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 6b0:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 6b4:	30 97       	sbiw	r30, 0x00	; 0
 6b6:	09 f4       	brne	.+2      	; 0x6ba <_parseDone+0xa6>
 6b8:	89 c0       	rjmp	.+274    	; 0x7cc <_parseDone+0x1b8>
 6ba:	68 e0       	ldi	r22, 0x08	; 8
 6bc:	ce 01       	movw	r24, r28
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	09 95       	icall
 6c2:	84 c0       	rjmp	.+264    	; 0x7cc <_parseDone+0x1b8>
		case CMD_HALT:
			break;
		case CMD_HTOK:
			break;
		case CMD_STAT:
			_encapsulateData(sendBuf, CMD_STAT_RSP, (uint8_t)((vbat_volt >> 8) & 0xFF), (uint8_t)(vbat_volt & 0xFF), (uint8_t)((vacc_volt >> 8) & 0xFF), (uint8_t)(vacc_volt & 0xFF));
 6c4:	e0 90 08 38 	lds	r14, 0x3808	; 0x803808 <vacc_volt>
 6c8:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <vacc_volt+0x1>
 6cc:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <vbat_volt>
 6d0:	40 91 0b 38 	lds	r20, 0x380B	; 0x80380b <vbat_volt+0x1>
 6d4:	6a e0       	ldi	r22, 0x0A	; 10
 6d6:	ce 01       	movw	r24, r28
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 6de:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 6e2:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 6e6:	30 97       	sbiw	r30, 0x00	; 0
 6e8:	09 f4       	brne	.+2      	; 0x6ec <_parseDone+0xd8>
 6ea:	70 c0       	rjmp	.+224    	; 0x7cc <_parseDone+0x1b8>
 6ec:	68 e0       	ldi	r22, 0x08	; 8
 6ee:	ce 01       	movw	r24, r28
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	09 95       	icall
 6f4:	6b c0       	rjmp	.+214    	; 0x7cc <_parseDone+0x1b8>
			break;
		case CMD_STAT_RSP:
			break;
		case CMD_GET_THRESH:
			_encapsulateData(sendBuf, CMD_GET_THRESH_RSP, (uint8_t)((vbat_threshold >> 8) & 0xFF), (uint8_t)(vbat_threshold & 0xFF), (uint8_t)((vacc_threshold >> 8) & 0xFF), (uint8_t)(vacc_threshold & 0xFF));
 6f6:	e0 90 01 38 	lds	r14, 0x3801	; 0x803801 <vacc_threshold>
 6fa:	00 91 02 38 	lds	r16, 0x3802	; 0x803802 <vacc_threshold+0x1>
 6fe:	20 91 03 38 	lds	r18, 0x3803	; 0x803803 <vbat_threshold>
 702:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <vbat_threshold+0x1>
 706:	6c e0       	ldi	r22, 0x0C	; 12
 708:	ce 01       	movw	r24, r28
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 710:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 714:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 718:	30 97       	sbiw	r30, 0x00	; 0
 71a:	09 f4       	brne	.+2      	; 0x71e <_parseDone+0x10a>
 71c:	57 c0       	rjmp	.+174    	; 0x7cc <_parseDone+0x1b8>
 71e:	68 e0       	ldi	r22, 0x08	; 8
 720:	ce 01       	movw	r24, r28
 722:	01 96       	adiw	r24, 0x01	; 1
 724:	09 95       	icall
 726:	52 c0       	rjmp	.+164    	; 0x7cc <_parseDone+0x1b8>
			break;
		case CMD_GET_THRESH_RSP:
			break;
		case CMD_SET_THRESH:
			vbat_threshold = ((uint16_t)data2) << 8;
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	76 2f       	mov	r23, r22
 72c:	66 27       	eor	r22, r22
			vbat_threshold += data3;
 72e:	64 0f       	add	r22, r20
 730:	71 1d       	adc	r23, r1
 732:	60 93 03 38 	sts	0x3803, r22	; 0x803803 <vbat_threshold>
 736:	70 93 04 38 	sts	0x3804, r23	; 0x803804 <vbat_threshold+0x1>
			vacc_threshold = ((uint16_t)data4) << 8;
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	32 2f       	mov	r19, r18
 73e:	22 27       	eor	r18, r18
			vacc_threshold += data5;
 740:	20 0f       	add	r18, r16
 742:	31 1d       	adc	r19, r1
 744:	20 93 01 38 	sts	0x3801, r18	; 0x803801 <vacc_threshold>
 748:	30 93 02 38 	sts	0x3802, r19	; 0x803802 <vacc_threshold+0x1>
			_encapsulateData(sendBuf, CMD_SET_THRESH_RSP, (uint8_t)((vbat_threshold >> 8) & 0xFF), (uint8_t)(vbat_threshold & 0xFF), (uint8_t)((vacc_threshold >> 8) & 0xFF), (uint8_t)(vacc_threshold & 0xFF));
 74c:	e2 2e       	mov	r14, r18
 74e:	03 2f       	mov	r16, r19
 750:	26 2f       	mov	r18, r22
 752:	47 2f       	mov	r20, r23
 754:	6e e0       	ldi	r22, 0x0E	; 14
 756:	ce 01       	movw	r24, r28
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 75e:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 762:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 766:	30 97       	sbiw	r30, 0x00	; 0
 768:	89 f1       	breq	.+98     	; 0x7cc <_parseDone+0x1b8>
 76a:	68 e0       	ldi	r22, 0x08	; 8
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	09 95       	icall
 772:	2c c0       	rjmp	.+88     	; 0x7cc <_parseDone+0x1b8>
			break;
		case CMD_SET_THRESH_RSP:
			break;
		case CMD_DONT_SLEEP:
			_dont_sleep = 1;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <_dont_sleep.1646>
			_encapsulateData(sendBuf, CMD_DONT_SLEEP_RSP, _dont_sleep, 0, 0, 0);
 77a:	e1 2c       	mov	r14, r1
 77c:	00 e0       	ldi	r16, 0x00	; 0
 77e:	20 e0       	ldi	r18, 0x00	; 0
 780:	41 e0       	ldi	r20, 0x01	; 1
 782:	62 e1       	ldi	r22, 0x12	; 18
 784:	ce 01       	movw	r24, r28
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 78c:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 790:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 794:	30 97       	sbiw	r30, 0x00	; 0
 796:	d1 f0       	breq	.+52     	; 0x7cc <_parseDone+0x1b8>
 798:	68 e0       	ldi	r22, 0x08	; 8
 79a:	ce 01       	movw	r24, r28
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	09 95       	icall
 7a0:	15 c0       	rjmp	.+42     	; 0x7cc <_parseDone+0x1b8>
			break;
		case CMD_DONT_SLEEP_RSP:
			break;
		case CMD_OKAY_SLEEP:
			_dont_sleep = 0;
 7a2:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <_dont_sleep.1646>
			_encapsulateData(sendBuf, CMD_OKAY_SLEEP_RSP, _dont_sleep, 0, 0, 0);
 7a6:	e1 2c       	mov	r14, r1
 7a8:	00 e0       	ldi	r16, 0x00	; 0
 7aa:	20 e0       	ldi	r18, 0x00	; 0
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	64 e1       	ldi	r22, 0x14	; 20
 7b0:	ce 01       	movw	r24, r28
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
			if(uartSend != NULL) uartSend(sendBuf, 8);
 7b8:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 7bc:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 7c0:	30 97       	sbiw	r30, 0x00	; 0
 7c2:	21 f0       	breq	.+8      	; 0x7cc <_parseDone+0x1b8>
 7c4:	68 e0       	ldi	r22, 0x08	; 8
 7c6:	ce 01       	movw	r24, r28
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	09 95       	icall
			break;
		default:
			break;
		}
		
		if(_dont_sleep)
 7cc:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <_dont_sleep.1646>
 7d0:	88 23       	and	r24, r24
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <_parseDone+0x1cc>
		{
			pending_sleep_flag |= PENDING_SLEEP_UART;
 7d4:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 7d8:	81 60       	ori	r24, 0x01	; 1
 7da:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <_parseDone+0x1d6>
		}
		else
		{
			pending_sleep_flag &= ~PENDING_SLEEP_UART;
 7e0:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
 7e4:	8e 7f       	andi	r24, 0xFE	; 254
 7e6:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
		}
#elif _ROLE == DVR_RECORDER
#else
#endif
	}
}
 7ea:	28 96       	adiw	r28, 0x08	; 8
 7ec:	cd bf       	out	0x3d, r28	; 61
 7ee:	de bf       	out	0x3e, r29	; 62
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	0f 91       	pop	r16
 7f6:	ef 90       	pop	r14
 7f8:	08 95       	ret

000007fa <parserInit>:


void parserInit()
{
	parserState = 1;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <parserState>
 802:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <parserState+0x1>
 806:	08 95       	ret

00000808 <setParseDoneCallback>:
}

void setParseDoneCallback(void (*func)(uint8_t, uint8_t, uint8_t, uint8_t, uint8_t))
{
	parseDoneCallBack = func;
 808:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <parseDoneCallBack>
 80c:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <parseDoneCallBack+0x1>
 810:	08 95       	ret

00000812 <setUartSendFunc>:
}

void setUartSendFunc(void (*func)(uint8_t *, uint8_t))
{
	uartSend = func;
 812:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <uartSend>
 816:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <uartSend+0x1>
 81a:	08 95       	ret

0000081c <sendCmd>:
}

void sendCmd(uint8_t cmd, uint8_t one, uint8_t two, uint8_t three, uint8_t four)
{
 81c:	ef 92       	push	r14
 81e:	0f 93       	push	r16
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	28 97       	sbiw	r28, 0x08	; 8
 82a:	cd bf       	out	0x3d, r28	; 61
 82c:	de bf       	out	0x3e, r29	; 62
	uint8_t sendBuf[8] = {0,};
 82e:	fe 01       	movw	r30, r28
 830:	31 96       	adiw	r30, 0x01	; 1
 832:	98 e0       	ldi	r25, 0x08	; 8
 834:	df 01       	movw	r26, r30
 836:	1d 92       	st	X+, r1
 838:	9a 95       	dec	r25
 83a:	e9 f7       	brne	.-6      	; 0x836 <sendCmd+0x1a>
	_encapsulateData(sendBuf, cmd, one, two, three, four);
 83c:	e0 2e       	mov	r14, r16
 83e:	02 2f       	mov	r16, r18
 840:	24 2f       	mov	r18, r20
 842:	46 2f       	mov	r20, r22
 844:	68 2f       	mov	r22, r24
 846:	cf 01       	movw	r24, r30
 848:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_encapsulateData>
	if(uartSend != NULL) uartSend(sendBuf, 8);
 84c:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <uartSend>
 850:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <uartSend+0x1>
 854:	30 97       	sbiw	r30, 0x00	; 0
 856:	21 f0       	breq	.+8      	; 0x860 <sendCmd+0x44>
 858:	68 e0       	ldi	r22, 0x08	; 8
 85a:	ce 01       	movw	r24, r28
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	09 95       	icall
}
 860:	28 96       	adiw	r28, 0x08	; 8
 862:	cd bf       	out	0x3d, r28	; 61
 864:	de bf       	out	0x3e, r29	; 62
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	0f 91       	pop	r16
 86c:	ef 90       	pop	r14
 86e:	08 95       	ret

00000870 <parseData>:

void parseData(uint8_t data)
{
 870:	0f 93       	push	r16
 872:	1f 93       	push	r17
	static uint8_t databuf[8] = {0,};
	static uint32_t recvdcnt = 0;
	uint8_t tmpChksum = 0;

	if(parserState)
 874:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <parserState>
 878:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <parserState+0x1>
 87c:	23 2b       	or	r18, r19
 87e:	09 f4       	brne	.+2      	; 0x882 <parseData+0x12>
 880:	58 c0       	rjmp	.+176    	; 0x932 <parseData+0xc2>
	{
		switch(uartState)
 882:	90 91 44 38 	lds	r25, 0x3844	; 0x803844 <uartState>
 886:	99 23       	and	r25, r25
 888:	19 f0       	breq	.+6      	; 0x890 <parseData+0x20>
 88a:	91 30       	cpi	r25, 0x01	; 1
 88c:	b1 f0       	breq	.+44     	; 0x8ba <parseData+0x4a>
 88e:	51 c0       	rjmp	.+162    	; 0x932 <parseData+0xc2>
		{
		case UART_STATE_IDLE:
			if(data == UART_STX)
 890:	80 38       	cpi	r24, 0x80	; 128
 892:	09 f0       	breq	.+2      	; 0x896 <parseData+0x26>
 894:	4e c0       	rjmp	.+156    	; 0x932 <parseData+0xc2>
			{
				recvdcnt = 0;
				uartState = UART_STATE_RECEIVING;
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <uartState>
				databuf[recvdcnt++] = data;
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	40 93 39 38 	sts	0x3839, r20	; 0x803839 <recvdcnt.1707>
 8a8:	50 93 3a 38 	sts	0x383A, r21	; 0x80383a <recvdcnt.1707+0x1>
 8ac:	60 93 3b 38 	sts	0x383B, r22	; 0x80383b <recvdcnt.1707+0x2>
 8b0:	70 93 3c 38 	sts	0x383C, r23	; 0x80383c <recvdcnt.1707+0x3>
 8b4:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <databuf.1706>
 8b8:	3c c0       	rjmp	.+120    	; 0x932 <parseData+0xc2>
			}
			break;
		case UART_STATE_RECEIVING:
			if(recvdcnt < 8)
 8ba:	40 91 39 38 	lds	r20, 0x3839	; 0x803839 <recvdcnt.1707>
 8be:	50 91 3a 38 	lds	r21, 0x383A	; 0x80383a <recvdcnt.1707+0x1>
 8c2:	60 91 3b 38 	lds	r22, 0x383B	; 0x80383b <recvdcnt.1707+0x2>
 8c6:	70 91 3c 38 	lds	r23, 0x383C	; 0x80383c <recvdcnt.1707+0x3>
 8ca:	48 30       	cpi	r20, 0x08	; 8
 8cc:	51 05       	cpc	r21, r1
 8ce:	61 05       	cpc	r22, r1
 8d0:	71 05       	cpc	r23, r1
 8d2:	68 f5       	brcc	.+90     	; 0x92e <parseData+0xbe>
			{
				databuf[recvdcnt++] = data;
 8d4:	8a 01       	movw	r16, r20
 8d6:	9b 01       	movw	r18, r22
 8d8:	0f 5f       	subi	r16, 0xFF	; 255
 8da:	1f 4f       	sbci	r17, 0xFF	; 255
 8dc:	2f 4f       	sbci	r18, 0xFF	; 255
 8de:	3f 4f       	sbci	r19, 0xFF	; 255
 8e0:	00 93 39 38 	sts	0x3839, r16	; 0x803839 <recvdcnt.1707>
 8e4:	10 93 3a 38 	sts	0x383A, r17	; 0x80383a <recvdcnt.1707+0x1>
 8e8:	20 93 3b 38 	sts	0x383B, r18	; 0x80383b <recvdcnt.1707+0x2>
 8ec:	30 93 3c 38 	sts	0x383C, r19	; 0x80383c <recvdcnt.1707+0x3>
 8f0:	fa 01       	movw	r30, r20
 8f2:	ef 5c       	subi	r30, 0xCF	; 207
 8f4:	f7 4c       	sbci	r31, 0xC7	; 199
 8f6:	80 83       	st	Z, r24
				if(recvdcnt == 8)
 8f8:	08 30       	cpi	r16, 0x08	; 8
 8fa:	11 05       	cpc	r17, r1
 8fc:	21 05       	cpc	r18, r1
 8fe:	31 05       	cpc	r19, r1
 900:	c1 f4       	brne	.+48     	; 0x932 <parseData+0xc2>
				{
					if(data == UART_ETX)
 902:	86 38       	cpi	r24, 0x86	; 134
 904:	89 f4       	brne	.+34     	; 0x928 <parseData+0xb8>
					{
						tmpChksum = databuf[1] + databuf[2] + databuf[3] + databuf[4] + databuf[5];
 906:	e1 e3       	ldi	r30, 0x31	; 49
 908:	f8 e3       	ldi	r31, 0x38	; 56
 90a:	81 81       	ldd	r24, Z+1	; 0x01
 90c:	62 81       	ldd	r22, Z+2	; 0x02
 90e:	43 81       	ldd	r20, Z+3	; 0x03
 910:	24 81       	ldd	r18, Z+4	; 0x04
 912:	05 81       	ldd	r16, Z+5	; 0x05
 914:	98 2f       	mov	r25, r24
 916:	96 0f       	add	r25, r22
 918:	94 0f       	add	r25, r20
 91a:	92 0f       	add	r25, r18
 91c:	90 0f       	add	r25, r16
						if(tmpChksum == databuf[6])
 91e:	36 81       	ldd	r19, Z+6	; 0x06
 920:	93 13       	cpse	r25, r19
 922:	02 c0       	rjmp	.+4      	; 0x928 <parseData+0xb8>
						{
							_parseDone(databuf[1], databuf[2], databuf[3], databuf[4], databuf[5]);
 924:	0e 94 0a 03 	call	0x614	; 0x614 <_parseDone>
						}
					}
					//recvdcnt = 0;
					uartState = UART_STATE_IDLE;
 928:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <uartState>
 92c:	02 c0       	rjmp	.+4      	; 0x932 <parseData+0xc2>
			}
			else
			{
				// Highly unlikely case
				//recvdcnt = 0;
				uartState = UART_STATE_IDLE;
 92e:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <uartState>
			break;
		default:
			break;
		}
	}
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	08 95       	ret

00000938 <incTick>:

static uint8_t nowtick = 0;

inline void incTick(void)
{
	nowtick++;
 938:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <nowtick>
 93c:	8f 5f       	subi	r24, 0xFF	; 255
 93e:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <nowtick>
 942:	08 95       	ret

00000944 <getCurrentTick>:
}

uint8_t getCurrentTick(void)
{
	return nowtick;
}
 944:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <nowtick>
 948:	08 95       	ret

0000094a <__subsf3>:
 94a:	50 58       	subi	r21, 0x80	; 128

0000094c <__addsf3>:
 94c:	bb 27       	eor	r27, r27
 94e:	aa 27       	eor	r26, r26
 950:	0e 94 bd 04 	call	0x97a	; 0x97a <__addsf3x>
 954:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_round>
 958:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscA>
 95c:	38 f0       	brcs	.+14     	; 0x96c <__addsf3+0x20>
 95e:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_pscB>
 962:	20 f0       	brcs	.+8      	; 0x96c <__addsf3+0x20>
 964:	39 f4       	brne	.+14     	; 0x974 <__addsf3+0x28>
 966:	9f 3f       	cpi	r25, 0xFF	; 255
 968:	19 f4       	brne	.+6      	; 0x970 <__addsf3+0x24>
 96a:	26 f4       	brtc	.+8      	; 0x974 <__addsf3+0x28>
 96c:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_nan>
 970:	0e f4       	brtc	.+2      	; 0x974 <__addsf3+0x28>
 972:	e0 95       	com	r30
 974:	e7 fb       	bst	r30, 7
 976:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_inf>

0000097a <__addsf3x>:
 97a:	e9 2f       	mov	r30, r25
 97c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_split3>
 980:	58 f3       	brcs	.-42     	; 0x958 <__addsf3+0xc>
 982:	ba 17       	cp	r27, r26
 984:	62 07       	cpc	r22, r18
 986:	73 07       	cpc	r23, r19
 988:	84 07       	cpc	r24, r20
 98a:	95 07       	cpc	r25, r21
 98c:	20 f0       	brcs	.+8      	; 0x996 <__addsf3x+0x1c>
 98e:	79 f4       	brne	.+30     	; 0x9ae <__addsf3x+0x34>
 990:	a6 f5       	brtc	.+104    	; 0x9fa <__addsf3x+0x80>
 992:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_zero>
 996:	0e f4       	brtc	.+2      	; 0x99a <__addsf3x+0x20>
 998:	e0 95       	com	r30
 99a:	0b 2e       	mov	r0, r27
 99c:	ba 2f       	mov	r27, r26
 99e:	a0 2d       	mov	r26, r0
 9a0:	0b 01       	movw	r0, r22
 9a2:	b9 01       	movw	r22, r18
 9a4:	90 01       	movw	r18, r0
 9a6:	0c 01       	movw	r0, r24
 9a8:	ca 01       	movw	r24, r20
 9aa:	a0 01       	movw	r20, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	ff 27       	eor	r31, r31
 9b0:	59 1b       	sub	r21, r25
 9b2:	99 f0       	breq	.+38     	; 0x9da <__addsf3x+0x60>
 9b4:	59 3f       	cpi	r21, 0xF9	; 249
 9b6:	50 f4       	brcc	.+20     	; 0x9cc <__addsf3x+0x52>
 9b8:	50 3e       	cpi	r21, 0xE0	; 224
 9ba:	68 f1       	brcs	.+90     	; 0xa16 <__addsf3x+0x9c>
 9bc:	1a 16       	cp	r1, r26
 9be:	f0 40       	sbci	r31, 0x00	; 0
 9c0:	a2 2f       	mov	r26, r18
 9c2:	23 2f       	mov	r18, r19
 9c4:	34 2f       	mov	r19, r20
 9c6:	44 27       	eor	r20, r20
 9c8:	58 5f       	subi	r21, 0xF8	; 248
 9ca:	f3 cf       	rjmp	.-26     	; 0x9b2 <__addsf3x+0x38>
 9cc:	46 95       	lsr	r20
 9ce:	37 95       	ror	r19
 9d0:	27 95       	ror	r18
 9d2:	a7 95       	ror	r26
 9d4:	f0 40       	sbci	r31, 0x00	; 0
 9d6:	53 95       	inc	r21
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__addsf3x+0x52>
 9da:	7e f4       	brtc	.+30     	; 0x9fa <__addsf3x+0x80>
 9dc:	1f 16       	cp	r1, r31
 9de:	ba 0b       	sbc	r27, r26
 9e0:	62 0b       	sbc	r22, r18
 9e2:	73 0b       	sbc	r23, r19
 9e4:	84 0b       	sbc	r24, r20
 9e6:	ba f0       	brmi	.+46     	; 0xa16 <__addsf3x+0x9c>
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	a1 f0       	breq	.+40     	; 0xa14 <__addsf3x+0x9a>
 9ec:	ff 0f       	add	r31, r31
 9ee:	bb 1f       	adc	r27, r27
 9f0:	66 1f       	adc	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	c2 f7       	brpl	.-16     	; 0x9e8 <__addsf3x+0x6e>
 9f8:	0e c0       	rjmp	.+28     	; 0xa16 <__addsf3x+0x9c>
 9fa:	ba 0f       	add	r27, r26
 9fc:	62 1f       	adc	r22, r18
 9fe:	73 1f       	adc	r23, r19
 a00:	84 1f       	adc	r24, r20
 a02:	48 f4       	brcc	.+18     	; 0xa16 <__addsf3x+0x9c>
 a04:	87 95       	ror	r24
 a06:	77 95       	ror	r23
 a08:	67 95       	ror	r22
 a0a:	b7 95       	ror	r27
 a0c:	f7 95       	ror	r31
 a0e:	9e 3f       	cpi	r25, 0xFE	; 254
 a10:	08 f0       	brcs	.+2      	; 0xa14 <__addsf3x+0x9a>
 a12:	b0 cf       	rjmp	.-160    	; 0x974 <__addsf3+0x28>
 a14:	93 95       	inc	r25
 a16:	88 0f       	add	r24, r24
 a18:	08 f0       	brcs	.+2      	; 0xa1c <__addsf3x+0xa2>
 a1a:	99 27       	eor	r25, r25
 a1c:	ee 0f       	add	r30, r30
 a1e:	97 95       	ror	r25
 a20:	87 95       	ror	r24
 a22:	08 95       	ret

00000a24 <__divsf3>:
 a24:	0e 94 26 05 	call	0xa4c	; 0xa4c <__divsf3x>
 a28:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_round>
 a2c:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_pscB>
 a30:	58 f0       	brcs	.+22     	; 0xa48 <__divsf3+0x24>
 a32:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscA>
 a36:	40 f0       	brcs	.+16     	; 0xa48 <__divsf3+0x24>
 a38:	29 f4       	brne	.+10     	; 0xa44 <__divsf3+0x20>
 a3a:	5f 3f       	cpi	r21, 0xFF	; 255
 a3c:	29 f0       	breq	.+10     	; 0xa48 <__divsf3+0x24>
 a3e:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_inf>
 a42:	51 11       	cpse	r21, r1
 a44:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>
 a48:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_nan>

00000a4c <__divsf3x>:
 a4c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_split3>
 a50:	68 f3       	brcs	.-38     	; 0xa2c <__divsf3+0x8>

00000a52 <__divsf3_pse>:
 a52:	99 23       	and	r25, r25
 a54:	b1 f3       	breq	.-20     	; 0xa42 <__divsf3+0x1e>
 a56:	55 23       	and	r21, r21
 a58:	91 f3       	breq	.-28     	; 0xa3e <__divsf3+0x1a>
 a5a:	95 1b       	sub	r25, r21
 a5c:	55 0b       	sbc	r21, r21
 a5e:	bb 27       	eor	r27, r27
 a60:	aa 27       	eor	r26, r26
 a62:	62 17       	cp	r22, r18
 a64:	73 07       	cpc	r23, r19
 a66:	84 07       	cpc	r24, r20
 a68:	38 f0       	brcs	.+14     	; 0xa78 <__divsf3_pse+0x26>
 a6a:	9f 5f       	subi	r25, 0xFF	; 255
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	22 0f       	add	r18, r18
 a70:	33 1f       	adc	r19, r19
 a72:	44 1f       	adc	r20, r20
 a74:	aa 1f       	adc	r26, r26
 a76:	a9 f3       	breq	.-22     	; 0xa62 <__divsf3_pse+0x10>
 a78:	35 d0       	rcall	.+106    	; 0xae4 <__divsf3_pse+0x92>
 a7a:	0e 2e       	mov	r0, r30
 a7c:	3a f0       	brmi	.+14     	; 0xa8c <__divsf3_pse+0x3a>
 a7e:	e0 e8       	ldi	r30, 0x80	; 128
 a80:	32 d0       	rcall	.+100    	; 0xae6 <__divsf3_pse+0x94>
 a82:	91 50       	subi	r25, 0x01	; 1
 a84:	50 40       	sbci	r21, 0x00	; 0
 a86:	e6 95       	lsr	r30
 a88:	00 1c       	adc	r0, r0
 a8a:	ca f7       	brpl	.-14     	; 0xa7e <__divsf3_pse+0x2c>
 a8c:	2b d0       	rcall	.+86     	; 0xae4 <__divsf3_pse+0x92>
 a8e:	fe 2f       	mov	r31, r30
 a90:	29 d0       	rcall	.+82     	; 0xae4 <__divsf3_pse+0x92>
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	bb 1f       	adc	r27, r27
 a9a:	26 17       	cp	r18, r22
 a9c:	37 07       	cpc	r19, r23
 a9e:	48 07       	cpc	r20, r24
 aa0:	ab 07       	cpc	r26, r27
 aa2:	b0 e8       	ldi	r27, 0x80	; 128
 aa4:	09 f0       	breq	.+2      	; 0xaa8 <__divsf3_pse+0x56>
 aa6:	bb 0b       	sbc	r27, r27
 aa8:	80 2d       	mov	r24, r0
 aaa:	bf 01       	movw	r22, r30
 aac:	ff 27       	eor	r31, r31
 aae:	93 58       	subi	r25, 0x83	; 131
 ab0:	5f 4f       	sbci	r21, 0xFF	; 255
 ab2:	3a f0       	brmi	.+14     	; 0xac2 <__divsf3_pse+0x70>
 ab4:	9e 3f       	cpi	r25, 0xFE	; 254
 ab6:	51 05       	cpc	r21, r1
 ab8:	78 f0       	brcs	.+30     	; 0xad8 <__divsf3_pse+0x86>
 aba:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_inf>
 abe:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	e4 f3       	brlt	.-8      	; 0xabe <__divsf3_pse+0x6c>
 ac6:	98 3e       	cpi	r25, 0xE8	; 232
 ac8:	d4 f3       	brlt	.-12     	; 0xabe <__divsf3_pse+0x6c>
 aca:	86 95       	lsr	r24
 acc:	77 95       	ror	r23
 ace:	67 95       	ror	r22
 ad0:	b7 95       	ror	r27
 ad2:	f7 95       	ror	r31
 ad4:	9f 5f       	subi	r25, 0xFF	; 255
 ad6:	c9 f7       	brne	.-14     	; 0xaca <__divsf3_pse+0x78>
 ad8:	88 0f       	add	r24, r24
 ada:	91 1d       	adc	r25, r1
 adc:	96 95       	lsr	r25
 ade:	87 95       	ror	r24
 ae0:	97 f9       	bld	r25, 7
 ae2:	08 95       	ret
 ae4:	e1 e0       	ldi	r30, 0x01	; 1
 ae6:	66 0f       	add	r22, r22
 ae8:	77 1f       	adc	r23, r23
 aea:	88 1f       	adc	r24, r24
 aec:	bb 1f       	adc	r27, r27
 aee:	62 17       	cp	r22, r18
 af0:	73 07       	cpc	r23, r19
 af2:	84 07       	cpc	r24, r20
 af4:	ba 07       	cpc	r27, r26
 af6:	20 f0       	brcs	.+8      	; 0xb00 <__divsf3_pse+0xae>
 af8:	62 1b       	sub	r22, r18
 afa:	73 0b       	sbc	r23, r19
 afc:	84 0b       	sbc	r24, r20
 afe:	ba 0b       	sbc	r27, r26
 b00:	ee 1f       	adc	r30, r30
 b02:	88 f7       	brcc	.-30     	; 0xae6 <__divsf3_pse+0x94>
 b04:	e0 95       	com	r30
 b06:	08 95       	ret

00000b08 <__fixsfsi>:
 b08:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fixunssfsi>
 b0c:	68 94       	set
 b0e:	b1 11       	cpse	r27, r1
 b10:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>
 b14:	08 95       	ret

00000b16 <__fixunssfsi>:
 b16:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fp_splitA>
 b1a:	88 f0       	brcs	.+34     	; 0xb3e <__fixunssfsi+0x28>
 b1c:	9f 57       	subi	r25, 0x7F	; 127
 b1e:	98 f0       	brcs	.+38     	; 0xb46 <__fixunssfsi+0x30>
 b20:	b9 2f       	mov	r27, r25
 b22:	99 27       	eor	r25, r25
 b24:	b7 51       	subi	r27, 0x17	; 23
 b26:	b0 f0       	brcs	.+44     	; 0xb54 <__fixunssfsi+0x3e>
 b28:	e1 f0       	breq	.+56     	; 0xb62 <__fixunssfsi+0x4c>
 b2a:	66 0f       	add	r22, r22
 b2c:	77 1f       	adc	r23, r23
 b2e:	88 1f       	adc	r24, r24
 b30:	99 1f       	adc	r25, r25
 b32:	1a f0       	brmi	.+6      	; 0xb3a <__fixunssfsi+0x24>
 b34:	ba 95       	dec	r27
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__fixunssfsi+0x14>
 b38:	14 c0       	rjmp	.+40     	; 0xb62 <__fixunssfsi+0x4c>
 b3a:	b1 30       	cpi	r27, 0x01	; 1
 b3c:	91 f0       	breq	.+36     	; 0xb62 <__fixunssfsi+0x4c>
 b3e:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_zero>
 b42:	b1 e0       	ldi	r27, 0x01	; 1
 b44:	08 95       	ret
 b46:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_zero>
 b4a:	67 2f       	mov	r22, r23
 b4c:	78 2f       	mov	r23, r24
 b4e:	88 27       	eor	r24, r24
 b50:	b8 5f       	subi	r27, 0xF8	; 248
 b52:	39 f0       	breq	.+14     	; 0xb62 <__fixunssfsi+0x4c>
 b54:	b9 3f       	cpi	r27, 0xF9	; 249
 b56:	cc f3       	brlt	.-14     	; 0xb4a <__fixunssfsi+0x34>
 b58:	86 95       	lsr	r24
 b5a:	77 95       	ror	r23
 b5c:	67 95       	ror	r22
 b5e:	b3 95       	inc	r27
 b60:	d9 f7       	brne	.-10     	; 0xb58 <__fixunssfsi+0x42>
 b62:	3e f4       	brtc	.+14     	; 0xb72 <__fixunssfsi+0x5c>
 b64:	90 95       	com	r25
 b66:	80 95       	com	r24
 b68:	70 95       	com	r23
 b6a:	61 95       	neg	r22
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	08 95       	ret

00000b74 <__floatunsisf>:
 b74:	e8 94       	clt
 b76:	09 c0       	rjmp	.+18     	; 0xb8a <__floatsisf+0x12>

00000b78 <__floatsisf>:
 b78:	97 fb       	bst	r25, 7
 b7a:	3e f4       	brtc	.+14     	; 0xb8a <__floatsisf+0x12>
 b7c:	90 95       	com	r25
 b7e:	80 95       	com	r24
 b80:	70 95       	com	r23
 b82:	61 95       	neg	r22
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	99 23       	and	r25, r25
 b8c:	a9 f0       	breq	.+42     	; 0xbb8 <__floatsisf+0x40>
 b8e:	f9 2f       	mov	r31, r25
 b90:	96 e9       	ldi	r25, 0x96	; 150
 b92:	bb 27       	eor	r27, r27
 b94:	93 95       	inc	r25
 b96:	f6 95       	lsr	r31
 b98:	87 95       	ror	r24
 b9a:	77 95       	ror	r23
 b9c:	67 95       	ror	r22
 b9e:	b7 95       	ror	r27
 ba0:	f1 11       	cpse	r31, r1
 ba2:	f8 cf       	rjmp	.-16     	; 0xb94 <__floatsisf+0x1c>
 ba4:	fa f4       	brpl	.+62     	; 0xbe4 <__floatsisf+0x6c>
 ba6:	bb 0f       	add	r27, r27
 ba8:	11 f4       	brne	.+4      	; 0xbae <__floatsisf+0x36>
 baa:	60 ff       	sbrs	r22, 0
 bac:	1b c0       	rjmp	.+54     	; 0xbe4 <__floatsisf+0x6c>
 bae:	6f 5f       	subi	r22, 0xFF	; 255
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255
 bb6:	16 c0       	rjmp	.+44     	; 0xbe4 <__floatsisf+0x6c>
 bb8:	88 23       	and	r24, r24
 bba:	11 f0       	breq	.+4      	; 0xbc0 <__floatsisf+0x48>
 bbc:	96 e9       	ldi	r25, 0x96	; 150
 bbe:	11 c0       	rjmp	.+34     	; 0xbe2 <__floatsisf+0x6a>
 bc0:	77 23       	and	r23, r23
 bc2:	21 f0       	breq	.+8      	; 0xbcc <__floatsisf+0x54>
 bc4:	9e e8       	ldi	r25, 0x8E	; 142
 bc6:	87 2f       	mov	r24, r23
 bc8:	76 2f       	mov	r23, r22
 bca:	05 c0       	rjmp	.+10     	; 0xbd6 <__floatsisf+0x5e>
 bcc:	66 23       	and	r22, r22
 bce:	71 f0       	breq	.+28     	; 0xbec <__floatsisf+0x74>
 bd0:	96 e8       	ldi	r25, 0x86	; 134
 bd2:	86 2f       	mov	r24, r22
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	2a f0       	brmi	.+10     	; 0xbe4 <__floatsisf+0x6c>
 bda:	9a 95       	dec	r25
 bdc:	66 0f       	add	r22, r22
 bde:	77 1f       	adc	r23, r23
 be0:	88 1f       	adc	r24, r24
 be2:	da f7       	brpl	.-10     	; 0xbda <__floatsisf+0x62>
 be4:	88 0f       	add	r24, r24
 be6:	96 95       	lsr	r25
 be8:	87 95       	ror	r24
 bea:	97 f9       	bld	r25, 7
 bec:	08 95       	ret

00000bee <__fp_inf>:
 bee:	97 f9       	bld	r25, 7
 bf0:	9f 67       	ori	r25, 0x7F	; 127
 bf2:	80 e8       	ldi	r24, 0x80	; 128
 bf4:	70 e0       	ldi	r23, 0x00	; 0
 bf6:	60 e0       	ldi	r22, 0x00	; 0
 bf8:	08 95       	ret

00000bfa <__fp_nan>:
 bfa:	9f ef       	ldi	r25, 0xFF	; 255
 bfc:	80 ec       	ldi	r24, 0xC0	; 192
 bfe:	08 95       	ret

00000c00 <__fp_pscA>:
 c00:	00 24       	eor	r0, r0
 c02:	0a 94       	dec	r0
 c04:	16 16       	cp	r1, r22
 c06:	17 06       	cpc	r1, r23
 c08:	18 06       	cpc	r1, r24
 c0a:	09 06       	cpc	r0, r25
 c0c:	08 95       	ret

00000c0e <__fp_pscB>:
 c0e:	00 24       	eor	r0, r0
 c10:	0a 94       	dec	r0
 c12:	12 16       	cp	r1, r18
 c14:	13 06       	cpc	r1, r19
 c16:	14 06       	cpc	r1, r20
 c18:	05 06       	cpc	r0, r21
 c1a:	08 95       	ret

00000c1c <__fp_round>:
 c1c:	09 2e       	mov	r0, r25
 c1e:	03 94       	inc	r0
 c20:	00 0c       	add	r0, r0
 c22:	11 f4       	brne	.+4      	; 0xc28 <__fp_round+0xc>
 c24:	88 23       	and	r24, r24
 c26:	52 f0       	brmi	.+20     	; 0xc3c <__fp_round+0x20>
 c28:	bb 0f       	add	r27, r27
 c2a:	40 f4       	brcc	.+16     	; 0xc3c <__fp_round+0x20>
 c2c:	bf 2b       	or	r27, r31
 c2e:	11 f4       	brne	.+4      	; 0xc34 <__fp_round+0x18>
 c30:	60 ff       	sbrs	r22, 0
 c32:	04 c0       	rjmp	.+8      	; 0xc3c <__fp_round+0x20>
 c34:	6f 5f       	subi	r22, 0xFF	; 255
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	08 95       	ret

00000c3e <__fp_split3>:
 c3e:	57 fd       	sbrc	r21, 7
 c40:	90 58       	subi	r25, 0x80	; 128
 c42:	44 0f       	add	r20, r20
 c44:	55 1f       	adc	r21, r21
 c46:	59 f0       	breq	.+22     	; 0xc5e <__fp_splitA+0x10>
 c48:	5f 3f       	cpi	r21, 0xFF	; 255
 c4a:	71 f0       	breq	.+28     	; 0xc68 <__fp_splitA+0x1a>
 c4c:	47 95       	ror	r20

00000c4e <__fp_splitA>:
 c4e:	88 0f       	add	r24, r24
 c50:	97 fb       	bst	r25, 7
 c52:	99 1f       	adc	r25, r25
 c54:	61 f0       	breq	.+24     	; 0xc6e <__fp_splitA+0x20>
 c56:	9f 3f       	cpi	r25, 0xFF	; 255
 c58:	79 f0       	breq	.+30     	; 0xc78 <__fp_splitA+0x2a>
 c5a:	87 95       	ror	r24
 c5c:	08 95       	ret
 c5e:	12 16       	cp	r1, r18
 c60:	13 06       	cpc	r1, r19
 c62:	14 06       	cpc	r1, r20
 c64:	55 1f       	adc	r21, r21
 c66:	f2 cf       	rjmp	.-28     	; 0xc4c <__fp_split3+0xe>
 c68:	46 95       	lsr	r20
 c6a:	f1 df       	rcall	.-30     	; 0xc4e <__fp_splitA>
 c6c:	08 c0       	rjmp	.+16     	; 0xc7e <__fp_splitA+0x30>
 c6e:	16 16       	cp	r1, r22
 c70:	17 06       	cpc	r1, r23
 c72:	18 06       	cpc	r1, r24
 c74:	99 1f       	adc	r25, r25
 c76:	f1 cf       	rjmp	.-30     	; 0xc5a <__fp_splitA+0xc>
 c78:	86 95       	lsr	r24
 c7a:	71 05       	cpc	r23, r1
 c7c:	61 05       	cpc	r22, r1
 c7e:	08 94       	sec
 c80:	08 95       	ret

00000c82 <__fp_zero>:
 c82:	e8 94       	clt

00000c84 <__fp_szero>:
 c84:	bb 27       	eor	r27, r27
 c86:	66 27       	eor	r22, r22
 c88:	77 27       	eor	r23, r23
 c8a:	cb 01       	movw	r24, r22
 c8c:	97 f9       	bld	r25, 7
 c8e:	08 95       	ret

00000c90 <__mulsf3>:
 c90:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3x>
 c94:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_round>
 c98:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscA>
 c9c:	38 f0       	brcs	.+14     	; 0xcac <__mulsf3+0x1c>
 c9e:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_pscB>
 ca2:	20 f0       	brcs	.+8      	; 0xcac <__mulsf3+0x1c>
 ca4:	95 23       	and	r25, r21
 ca6:	11 f0       	breq	.+4      	; 0xcac <__mulsf3+0x1c>
 ca8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_inf>
 cac:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_nan>
 cb0:	11 24       	eor	r1, r1
 cb2:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>

00000cb6 <__mulsf3x>:
 cb6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_split3>
 cba:	70 f3       	brcs	.-36     	; 0xc98 <__mulsf3+0x8>

00000cbc <__mulsf3_pse>:
 cbc:	95 9f       	mul	r25, r21
 cbe:	c1 f3       	breq	.-16     	; 0xcb0 <__mulsf3+0x20>
 cc0:	95 0f       	add	r25, r21
 cc2:	50 e0       	ldi	r21, 0x00	; 0
 cc4:	55 1f       	adc	r21, r21
 cc6:	62 9f       	mul	r22, r18
 cc8:	f0 01       	movw	r30, r0
 cca:	72 9f       	mul	r23, r18
 ccc:	bb 27       	eor	r27, r27
 cce:	f0 0d       	add	r31, r0
 cd0:	b1 1d       	adc	r27, r1
 cd2:	63 9f       	mul	r22, r19
 cd4:	aa 27       	eor	r26, r26
 cd6:	f0 0d       	add	r31, r0
 cd8:	b1 1d       	adc	r27, r1
 cda:	aa 1f       	adc	r26, r26
 cdc:	64 9f       	mul	r22, r20
 cde:	66 27       	eor	r22, r22
 ce0:	b0 0d       	add	r27, r0
 ce2:	a1 1d       	adc	r26, r1
 ce4:	66 1f       	adc	r22, r22
 ce6:	82 9f       	mul	r24, r18
 ce8:	22 27       	eor	r18, r18
 cea:	b0 0d       	add	r27, r0
 cec:	a1 1d       	adc	r26, r1
 cee:	62 1f       	adc	r22, r18
 cf0:	73 9f       	mul	r23, r19
 cf2:	b0 0d       	add	r27, r0
 cf4:	a1 1d       	adc	r26, r1
 cf6:	62 1f       	adc	r22, r18
 cf8:	83 9f       	mul	r24, r19
 cfa:	a0 0d       	add	r26, r0
 cfc:	61 1d       	adc	r22, r1
 cfe:	22 1f       	adc	r18, r18
 d00:	74 9f       	mul	r23, r20
 d02:	33 27       	eor	r19, r19
 d04:	a0 0d       	add	r26, r0
 d06:	61 1d       	adc	r22, r1
 d08:	23 1f       	adc	r18, r19
 d0a:	84 9f       	mul	r24, r20
 d0c:	60 0d       	add	r22, r0
 d0e:	21 1d       	adc	r18, r1
 d10:	82 2f       	mov	r24, r18
 d12:	76 2f       	mov	r23, r22
 d14:	6a 2f       	mov	r22, r26
 d16:	11 24       	eor	r1, r1
 d18:	9f 57       	subi	r25, 0x7F	; 127
 d1a:	50 40       	sbci	r21, 0x00	; 0
 d1c:	9a f0       	brmi	.+38     	; 0xd44 <__mulsf3_pse+0x88>
 d1e:	f1 f0       	breq	.+60     	; 0xd5c <__mulsf3_pse+0xa0>
 d20:	88 23       	and	r24, r24
 d22:	4a f0       	brmi	.+18     	; 0xd36 <__mulsf3_pse+0x7a>
 d24:	ee 0f       	add	r30, r30
 d26:	ff 1f       	adc	r31, r31
 d28:	bb 1f       	adc	r27, r27
 d2a:	66 1f       	adc	r22, r22
 d2c:	77 1f       	adc	r23, r23
 d2e:	88 1f       	adc	r24, r24
 d30:	91 50       	subi	r25, 0x01	; 1
 d32:	50 40       	sbci	r21, 0x00	; 0
 d34:	a9 f7       	brne	.-22     	; 0xd20 <__mulsf3_pse+0x64>
 d36:	9e 3f       	cpi	r25, 0xFE	; 254
 d38:	51 05       	cpc	r21, r1
 d3a:	80 f0       	brcs	.+32     	; 0xd5c <__mulsf3_pse+0xa0>
 d3c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_inf>
 d40:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>
 d44:	5f 3f       	cpi	r21, 0xFF	; 255
 d46:	e4 f3       	brlt	.-8      	; 0xd40 <__mulsf3_pse+0x84>
 d48:	98 3e       	cpi	r25, 0xE8	; 232
 d4a:	d4 f3       	brlt	.-12     	; 0xd40 <__mulsf3_pse+0x84>
 d4c:	86 95       	lsr	r24
 d4e:	77 95       	ror	r23
 d50:	67 95       	ror	r22
 d52:	b7 95       	ror	r27
 d54:	f7 95       	ror	r31
 d56:	e7 95       	ror	r30
 d58:	9f 5f       	subi	r25, 0xFF	; 255
 d5a:	c1 f7       	brne	.-16     	; 0xd4c <__mulsf3_pse+0x90>
 d5c:	fe 2b       	or	r31, r30
 d5e:	88 0f       	add	r24, r24
 d60:	91 1d       	adc	r25, r1
 d62:	96 95       	lsr	r25
 d64:	87 95       	ror	r24
 d66:	97 f9       	bld	r25, 7
 d68:	08 95       	ret

00000d6a <__tablejump2__>:
 d6a:	ee 0f       	add	r30, r30
 d6c:	ff 1f       	adc	r31, r31
 d6e:	05 90       	lpm	r0, Z+
 d70:	f4 91       	lpm	r31, Z
 d72:	e0 2d       	mov	r30, r0
 d74:	09 94       	ijmp

00000d76 <__mulshisi3>:
 d76:	b7 ff       	sbrs	r27, 7
 d78:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__muluhisi3>

00000d7c <__mulohisi3>:
 d7c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__muluhisi3>
 d80:	82 1b       	sub	r24, r18
 d82:	93 0b       	sbc	r25, r19
 d84:	08 95       	ret

00000d86 <__muluhisi3>:
 d86:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__umulhisi3>
 d8a:	a5 9f       	mul	r26, r21
 d8c:	90 0d       	add	r25, r0
 d8e:	b4 9f       	mul	r27, r20
 d90:	90 0d       	add	r25, r0
 d92:	a4 9f       	mul	r26, r20
 d94:	80 0d       	add	r24, r0
 d96:	91 1d       	adc	r25, r1
 d98:	11 24       	eor	r1, r1
 d9a:	08 95       	ret

00000d9c <__umulhisi3>:
 d9c:	a2 9f       	mul	r26, r18
 d9e:	b0 01       	movw	r22, r0
 da0:	b3 9f       	mul	r27, r19
 da2:	c0 01       	movw	r24, r0
 da4:	a3 9f       	mul	r26, r19
 da6:	70 0d       	add	r23, r0
 da8:	81 1d       	adc	r24, r1
 daa:	11 24       	eor	r1, r1
 dac:	91 1d       	adc	r25, r1
 dae:	b2 9f       	mul	r27, r18
 db0:	70 0d       	add	r23, r0
 db2:	81 1d       	adc	r24, r1
 db4:	11 24       	eor	r1, r1
 db6:	91 1d       	adc	r25, r1
 db8:	08 95       	ret

00000dba <_exit>:
 dba:	f8 94       	cli

00000dbc <__stop_program>:
 dbc:	ff cf       	rjmp	.-2      	; 0xdbc <__stop_program>
